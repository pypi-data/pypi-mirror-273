# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import model_pb2 as model__pb2


class ModelServiceGrpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.modelCommonControl = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/modelCommonControl',
                request_serializer=model__pb2.ModelControlRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.mecanumMotorControl = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/mecanumMotorControl',
                request_serializer=model__pb2.MotorControlRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.mecanumXYZControl = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/mecanumXYZControl',
                request_serializer=model__pb2.XYZControlRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.mecanumStop = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/mecanumStop',
                request_serializer=model__pb2.MecanumStopRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.balanceKeepBalancing = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/balanceKeepBalancing',
                request_serializer=model__pb2.BalanceKeepBalancingRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.transformArmsControl = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/transformArmsControl',
                request_serializer=model__pb2.TransformArmsControlRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.transformSetHeight = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/transformSetHeight',
                request_serializer=model__pb2.TransformSetHeightRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.enableAdaptivePose = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/enableAdaptivePose',
                request_serializer=model__pb2.EnableAdaptivePoseRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.transformSetHeightByIncrement = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/transformSetHeightByIncrement',
                request_serializer=model__pb2.TransformSetHeightIncrementRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.wheelleggedRestory = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/wheelleggedRestory',
                request_serializer=model__pb2.WheelleggedRestoryRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.wheelleggedSetHeight = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/wheelleggedSetHeight',
                request_serializer=model__pb2.WheelleggedSetHeightRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.wheelleggedSetLeanAngle = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/wheelleggedSetLeanAngle',
                request_serializer=model__pb2.WheelleggedSetLeanAngleRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.setAcceleration = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/setAcceleration',
                request_serializer=model__pb2.SetAccelerationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.resetAcceleration = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/resetAcceleration',
                request_serializer=model__pb2.ResetAccelerationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.setGait = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/setGait',
                request_serializer=model__pb2.SetGaitRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )
        self.performAction = channel.unary_unary(
                '/ModelPackage.ModelServiceGrpc/performAction',
                request_serializer=model__pb2.PerformActionRequest.SerializeToString,
                response_deserializer=model__pb2.ModelCommonResponse.FromString,
                )


class ModelServiceGrpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def modelCommonControl(self, request, context):
        """模型通用运动控制
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mecanumMotorControl(self, request, context):
        """麦轮车
        4个电机控制
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mecanumXYZControl(self, request, context):
        """xyz控制
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mecanumStop(self, request, context):
        """麦轮车停止
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def balanceKeepBalancing(self, request, context):
        """平衡车
        启动/停止小车并保持自平衡
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transformArmsControl(self, request, context):
        """变形工程车
        变形车四个臂角度控制
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transformSetHeight(self, request, context):
        """设置底盘高度，适用模型：变形车、狗
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enableAdaptivePose(self, request, context):
        """开启/关闭自适应，适用模型：变形车
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transformSetHeightByIncrement(self, request, context):
        """变形车按增量升高/降低底盘高度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wheelleggedRestory(self, request, context):
        """轮腿
        轮腿恢复到初始高度，适用模型：轮腿、蜘蛛、狗
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wheelleggedSetHeight(self, request, context):
        """设置高度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wheelleggedSetLeanAngle(self, request, context):
        """设置左右倾斜角度，适用模型：轮腿、狗
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAcceleration(self, request, context):
        """加速度，目前只用于平衡车
        设置加速度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetAcceleration(self, request, context):
        """重置加速度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setGait(self, request, context):
        """设置步态，蜘蛛和狗适用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performAction(self, request, context):
        """执行动作，狗适用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'modelCommonControl': grpc.unary_unary_rpc_method_handler(
                    servicer.modelCommonControl,
                    request_deserializer=model__pb2.ModelControlRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'mecanumMotorControl': grpc.unary_unary_rpc_method_handler(
                    servicer.mecanumMotorControl,
                    request_deserializer=model__pb2.MotorControlRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'mecanumXYZControl': grpc.unary_unary_rpc_method_handler(
                    servicer.mecanumXYZControl,
                    request_deserializer=model__pb2.XYZControlRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'mecanumStop': grpc.unary_unary_rpc_method_handler(
                    servicer.mecanumStop,
                    request_deserializer=model__pb2.MecanumStopRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'balanceKeepBalancing': grpc.unary_unary_rpc_method_handler(
                    servicer.balanceKeepBalancing,
                    request_deserializer=model__pb2.BalanceKeepBalancingRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'transformArmsControl': grpc.unary_unary_rpc_method_handler(
                    servicer.transformArmsControl,
                    request_deserializer=model__pb2.TransformArmsControlRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'transformSetHeight': grpc.unary_unary_rpc_method_handler(
                    servicer.transformSetHeight,
                    request_deserializer=model__pb2.TransformSetHeightRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'enableAdaptivePose': grpc.unary_unary_rpc_method_handler(
                    servicer.enableAdaptivePose,
                    request_deserializer=model__pb2.EnableAdaptivePoseRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'transformSetHeightByIncrement': grpc.unary_unary_rpc_method_handler(
                    servicer.transformSetHeightByIncrement,
                    request_deserializer=model__pb2.TransformSetHeightIncrementRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'wheelleggedRestory': grpc.unary_unary_rpc_method_handler(
                    servicer.wheelleggedRestory,
                    request_deserializer=model__pb2.WheelleggedRestoryRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'wheelleggedSetHeight': grpc.unary_unary_rpc_method_handler(
                    servicer.wheelleggedSetHeight,
                    request_deserializer=model__pb2.WheelleggedSetHeightRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'wheelleggedSetLeanAngle': grpc.unary_unary_rpc_method_handler(
                    servicer.wheelleggedSetLeanAngle,
                    request_deserializer=model__pb2.WheelleggedSetLeanAngleRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'setAcceleration': grpc.unary_unary_rpc_method_handler(
                    servicer.setAcceleration,
                    request_deserializer=model__pb2.SetAccelerationRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'resetAcceleration': grpc.unary_unary_rpc_method_handler(
                    servicer.resetAcceleration,
                    request_deserializer=model__pb2.ResetAccelerationRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'setGait': grpc.unary_unary_rpc_method_handler(
                    servicer.setGait,
                    request_deserializer=model__pb2.SetGaitRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
            'performAction': grpc.unary_unary_rpc_method_handler(
                    servicer.performAction,
                    request_deserializer=model__pb2.PerformActionRequest.FromString,
                    response_serializer=model__pb2.ModelCommonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelPackage.ModelServiceGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelServiceGrpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def modelCommonControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/modelCommonControl',
            model__pb2.ModelControlRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mecanumMotorControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/mecanumMotorControl',
            model__pb2.MotorControlRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mecanumXYZControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/mecanumXYZControl',
            model__pb2.XYZControlRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mecanumStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/mecanumStop',
            model__pb2.MecanumStopRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def balanceKeepBalancing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/balanceKeepBalancing',
            model__pb2.BalanceKeepBalancingRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transformArmsControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/transformArmsControl',
            model__pb2.TransformArmsControlRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transformSetHeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/transformSetHeight',
            model__pb2.TransformSetHeightRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enableAdaptivePose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/enableAdaptivePose',
            model__pb2.EnableAdaptivePoseRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transformSetHeightByIncrement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/transformSetHeightByIncrement',
            model__pb2.TransformSetHeightIncrementRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wheelleggedRestory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/wheelleggedRestory',
            model__pb2.WheelleggedRestoryRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wheelleggedSetHeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/wheelleggedSetHeight',
            model__pb2.WheelleggedSetHeightRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wheelleggedSetLeanAngle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/wheelleggedSetLeanAngle',
            model__pb2.WheelleggedSetLeanAngleRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setAcceleration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/setAcceleration',
            model__pb2.SetAccelerationRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resetAcceleration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/resetAcceleration',
            model__pb2.ResetAccelerationRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setGait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/setGait',
            model__pb2.SetGaitRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def performAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelPackage.ModelServiceGrpc/performAction',
            model__pb2.PerformActionRequest.SerializeToString,
            model__pb2.ModelCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
