# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import device_pb2 as device__pb2


class DeviceServiceGrpcStub(object):
    """包括设备列表、显示屏、灯条等服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getDeviceList = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getDeviceList',
                request_serializer=device__pb2.DeviceListRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceListResponse.FromString,
                )
        self.startDeviceListChangeListener = channel.unary_stream(
                '/DevicePackage.DeviceServiceGrpc/startDeviceListChangeListener',
                request_serializer=device__pb2.DeviceListRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceListResponse.FromString,
                )
        self.stopDeviceListChangeListener = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/stopDeviceListChangeListener',
                request_serializer=device__pb2.DeviceListRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceCommonResponse.FromString,
                )
        self.setDisplayUI = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/setDisplayUI',
                request_serializer=device__pb2.DisplayUIRequest.SerializeToString,
                response_deserializer=device__pb2.DisplayUIResponse.FromString,
                )
        self.getDisplayPictureList = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getDisplayPictureList',
                request_serializer=device__pb2.DisplayPictureListRequest.SerializeToString,
                response_deserializer=device__pb2.DisplayPictureListResponse.FromString,
                )
        self.deleteDisplayPicture = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/deleteDisplayPicture',
                request_serializer=device__pb2.DeleteDisplayPictureRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceCommonResponse.FromString,
                )
        self.stopDisplayUI = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/stopDisplayUI',
                request_serializer=device__pb2.DeviceCommonRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceCommonResponse.FromString,
                )
        self.setDisplayEmotion = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/setDisplayEmotion',
                request_serializer=device__pb2.DisplayEmotionRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceCommonResponse.FromString,
                )
        self.setBrightness = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/setBrightness',
                request_serializer=device__pb2.SetBrightnessRequest.SerializeToString,
                response_deserializer=device__pb2.BrightnessResponse.FromString,
                )
        self.getBrightness = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getBrightness',
                request_serializer=device__pb2.GetBrightnessRequest.SerializeToString,
                response_deserializer=device__pb2.BrightnessResponse.FromString,
                )
        self.getMacAddress = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getMacAddress',
                request_serializer=device__pb2.MacAddressRequest.SerializeToString,
                response_deserializer=device__pb2.MacAddressResponse.FromString,
                )
        self.setVolume = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/setVolume',
                request_serializer=device__pb2.SetVolumeRequest.SerializeToString,
                response_deserializer=device__pb2.VolumeResponse.FromString,
                )
        self.getVolume = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getVolume',
                request_serializer=device__pb2.GetVolumeRequest.SerializeToString,
                response_deserializer=device__pb2.VolumeResponse.FromString,
                )
        self.muteVolume = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/muteVolume',
                request_serializer=device__pb2.MuteVolumeRequest.SerializeToString,
                response_deserializer=device__pb2.VolumeResponse.FromString,
                )
        self.selectModel = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/selectModel',
                request_serializer=device__pb2.SelectModelRequest.SerializeToString,
                response_deserializer=device__pb2.SelectModelResponse.FromString,
                )
        self.getDeviceModel = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getDeviceModel',
                request_serializer=device__pb2.DeviceModelRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceModelResponse.FromString,
                )
        self.getDeviceSoftwareVersion = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getDeviceSoftwareVersion',
                request_serializer=device__pb2.DeviceCommonRequest.SerializeToString,
                response_deserializer=device__pb2.DeviceVersionResponse.FromString,
                )
        self.showLightEffect = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/showLightEffect',
                request_serializer=device__pb2.LightEffectRequest.SerializeToString,
                response_deserializer=device__pb2.LightResponse.FromString,
                )
        self.showLightColor = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/showLightColor',
                request_serializer=device__pb2.LightColorRequest.SerializeToString,
                response_deserializer=device__pb2.LightResponse.FromString,
                )
        self.turnOffLight = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/turnOffLight',
                request_serializer=device__pb2.TurnOffLightRequest.SerializeToString,
                response_deserializer=device__pb2.LightResponse.FromString,
                )
        self.changeLanguage = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/changeLanguage',
                request_serializer=device__pb2.ChangeLangRequest.SerializeToString,
                response_deserializer=device__pb2.ChangeLangResponse.FromString,
                )
        self.getTouchEvent = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getTouchEvent',
                request_serializer=device__pb2.DeviceCommonRequest.SerializeToString,
                response_deserializer=device__pb2.TouchEventResponse.FromString,
                )
        self.removeChassisProtection = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/removeChassisProtection',
                request_serializer=device__pb2.ChassisProtectionRequest.SerializeToString,
                response_deserializer=device__pb2.ChassisProtectionResponse.FromString,
                )
        self.getLanguage = channel.unary_unary(
                '/DevicePackage.DeviceServiceGrpc/getLanguage',
                request_serializer=device__pb2.GetLangRequest.SerializeToString,
                response_deserializer=device__pb2.GetLangResponse.FromString,
                )


class DeviceServiceGrpcServicer(object):
    """包括设备列表、显示屏、灯条等服务
    """

    def getDeviceList(self, request, context):
        """定义设备列表服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startDeviceListChangeListener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDeviceListChangeListener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDisplayUI(self, request, context):
        """定义显示屏服务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDisplayPictureList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteDisplayPicture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopDisplayUI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDisplayEmotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setBrightness(self, request, context):
        """设置屏幕背光亮度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBrightness(self, request, context):
        """获取背光亮度值
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMacAddress(self, request, context):
        """获取wlan0 Mac地址    
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setVolume(self, request, context):
        """设置音量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getVolume(self, request, context):
        """获取音量
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def muteVolume(self, request, context):
        """静音
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selectModel(self, request, context):
        """选择模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceModel(self, request, context):
        """获取模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDeviceSoftwareVersion(self, request, context):
        """获取软件版本号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def showLightEffect(self, request, context):
        """灯效
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def showLightColor(self, request, context):
        """灯光
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def turnOffLight(self, request, context):
        """关闭灯光
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def changeLanguage(self, request, context):
        """修改语言配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTouchEvent(self, request, context):
        """获取屏幕点击事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeChassisProtection(self, request, context):
        """解除底盘保护  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLanguage(self, request, context):
        """获取语言配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getDeviceList': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceList,
                    request_deserializer=device__pb2.DeviceListRequest.FromString,
                    response_serializer=device__pb2.DeviceListResponse.SerializeToString,
            ),
            'startDeviceListChangeListener': grpc.unary_stream_rpc_method_handler(
                    servicer.startDeviceListChangeListener,
                    request_deserializer=device__pb2.DeviceListRequest.FromString,
                    response_serializer=device__pb2.DeviceListResponse.SerializeToString,
            ),
            'stopDeviceListChangeListener': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDeviceListChangeListener,
                    request_deserializer=device__pb2.DeviceListRequest.FromString,
                    response_serializer=device__pb2.DeviceCommonResponse.SerializeToString,
            ),
            'setDisplayUI': grpc.unary_unary_rpc_method_handler(
                    servicer.setDisplayUI,
                    request_deserializer=device__pb2.DisplayUIRequest.FromString,
                    response_serializer=device__pb2.DisplayUIResponse.SerializeToString,
            ),
            'getDisplayPictureList': grpc.unary_unary_rpc_method_handler(
                    servicer.getDisplayPictureList,
                    request_deserializer=device__pb2.DisplayPictureListRequest.FromString,
                    response_serializer=device__pb2.DisplayPictureListResponse.SerializeToString,
            ),
            'deleteDisplayPicture': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteDisplayPicture,
                    request_deserializer=device__pb2.DeleteDisplayPictureRequest.FromString,
                    response_serializer=device__pb2.DeviceCommonResponse.SerializeToString,
            ),
            'stopDisplayUI': grpc.unary_unary_rpc_method_handler(
                    servicer.stopDisplayUI,
                    request_deserializer=device__pb2.DeviceCommonRequest.FromString,
                    response_serializer=device__pb2.DeviceCommonResponse.SerializeToString,
            ),
            'setDisplayEmotion': grpc.unary_unary_rpc_method_handler(
                    servicer.setDisplayEmotion,
                    request_deserializer=device__pb2.DisplayEmotionRequest.FromString,
                    response_serializer=device__pb2.DeviceCommonResponse.SerializeToString,
            ),
            'setBrightness': grpc.unary_unary_rpc_method_handler(
                    servicer.setBrightness,
                    request_deserializer=device__pb2.SetBrightnessRequest.FromString,
                    response_serializer=device__pb2.BrightnessResponse.SerializeToString,
            ),
            'getBrightness': grpc.unary_unary_rpc_method_handler(
                    servicer.getBrightness,
                    request_deserializer=device__pb2.GetBrightnessRequest.FromString,
                    response_serializer=device__pb2.BrightnessResponse.SerializeToString,
            ),
            'getMacAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.getMacAddress,
                    request_deserializer=device__pb2.MacAddressRequest.FromString,
                    response_serializer=device__pb2.MacAddressResponse.SerializeToString,
            ),
            'setVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.setVolume,
                    request_deserializer=device__pb2.SetVolumeRequest.FromString,
                    response_serializer=device__pb2.VolumeResponse.SerializeToString,
            ),
            'getVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.getVolume,
                    request_deserializer=device__pb2.GetVolumeRequest.FromString,
                    response_serializer=device__pb2.VolumeResponse.SerializeToString,
            ),
            'muteVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.muteVolume,
                    request_deserializer=device__pb2.MuteVolumeRequest.FromString,
                    response_serializer=device__pb2.VolumeResponse.SerializeToString,
            ),
            'selectModel': grpc.unary_unary_rpc_method_handler(
                    servicer.selectModel,
                    request_deserializer=device__pb2.SelectModelRequest.FromString,
                    response_serializer=device__pb2.SelectModelResponse.SerializeToString,
            ),
            'getDeviceModel': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceModel,
                    request_deserializer=device__pb2.DeviceModelRequest.FromString,
                    response_serializer=device__pb2.DeviceModelResponse.SerializeToString,
            ),
            'getDeviceSoftwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getDeviceSoftwareVersion,
                    request_deserializer=device__pb2.DeviceCommonRequest.FromString,
                    response_serializer=device__pb2.DeviceVersionResponse.SerializeToString,
            ),
            'showLightEffect': grpc.unary_unary_rpc_method_handler(
                    servicer.showLightEffect,
                    request_deserializer=device__pb2.LightEffectRequest.FromString,
                    response_serializer=device__pb2.LightResponse.SerializeToString,
            ),
            'showLightColor': grpc.unary_unary_rpc_method_handler(
                    servicer.showLightColor,
                    request_deserializer=device__pb2.LightColorRequest.FromString,
                    response_serializer=device__pb2.LightResponse.SerializeToString,
            ),
            'turnOffLight': grpc.unary_unary_rpc_method_handler(
                    servicer.turnOffLight,
                    request_deserializer=device__pb2.TurnOffLightRequest.FromString,
                    response_serializer=device__pb2.LightResponse.SerializeToString,
            ),
            'changeLanguage': grpc.unary_unary_rpc_method_handler(
                    servicer.changeLanguage,
                    request_deserializer=device__pb2.ChangeLangRequest.FromString,
                    response_serializer=device__pb2.ChangeLangResponse.SerializeToString,
            ),
            'getTouchEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.getTouchEvent,
                    request_deserializer=device__pb2.DeviceCommonRequest.FromString,
                    response_serializer=device__pb2.TouchEventResponse.SerializeToString,
            ),
            'removeChassisProtection': grpc.unary_unary_rpc_method_handler(
                    servicer.removeChassisProtection,
                    request_deserializer=device__pb2.ChassisProtectionRequest.FromString,
                    response_serializer=device__pb2.ChassisProtectionResponse.SerializeToString,
            ),
            'getLanguage': grpc.unary_unary_rpc_method_handler(
                    servicer.getLanguage,
                    request_deserializer=device__pb2.GetLangRequest.FromString,
                    response_serializer=device__pb2.GetLangResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DevicePackage.DeviceServiceGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeviceServiceGrpc(object):
    """包括设备列表、显示屏、灯条等服务
    """

    @staticmethod
    def getDeviceList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getDeviceList',
            device__pb2.DeviceListRequest.SerializeToString,
            device__pb2.DeviceListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startDeviceListChangeListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DevicePackage.DeviceServiceGrpc/startDeviceListChangeListener',
            device__pb2.DeviceListRequest.SerializeToString,
            device__pb2.DeviceListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDeviceListChangeListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/stopDeviceListChangeListener',
            device__pb2.DeviceListRequest.SerializeToString,
            device__pb2.DeviceCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setDisplayUI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/setDisplayUI',
            device__pb2.DisplayUIRequest.SerializeToString,
            device__pb2.DisplayUIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDisplayPictureList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getDisplayPictureList',
            device__pb2.DisplayPictureListRequest.SerializeToString,
            device__pb2.DisplayPictureListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteDisplayPicture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/deleteDisplayPicture',
            device__pb2.DeleteDisplayPictureRequest.SerializeToString,
            device__pb2.DeviceCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopDisplayUI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/stopDisplayUI',
            device__pb2.DeviceCommonRequest.SerializeToString,
            device__pb2.DeviceCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setDisplayEmotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/setDisplayEmotion',
            device__pb2.DisplayEmotionRequest.SerializeToString,
            device__pb2.DeviceCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setBrightness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/setBrightness',
            device__pb2.SetBrightnessRequest.SerializeToString,
            device__pb2.BrightnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBrightness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getBrightness',
            device__pb2.GetBrightnessRequest.SerializeToString,
            device__pb2.BrightnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMacAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getMacAddress',
            device__pb2.MacAddressRequest.SerializeToString,
            device__pb2.MacAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/setVolume',
            device__pb2.SetVolumeRequest.SerializeToString,
            device__pb2.VolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getVolume',
            device__pb2.GetVolumeRequest.SerializeToString,
            device__pb2.VolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def muteVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/muteVolume',
            device__pb2.MuteVolumeRequest.SerializeToString,
            device__pb2.VolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def selectModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/selectModel',
            device__pb2.SelectModelRequest.SerializeToString,
            device__pb2.SelectModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getDeviceModel',
            device__pb2.DeviceModelRequest.SerializeToString,
            device__pb2.DeviceModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDeviceSoftwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getDeviceSoftwareVersion',
            device__pb2.DeviceCommonRequest.SerializeToString,
            device__pb2.DeviceVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def showLightEffect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/showLightEffect',
            device__pb2.LightEffectRequest.SerializeToString,
            device__pb2.LightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def showLightColor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/showLightColor',
            device__pb2.LightColorRequest.SerializeToString,
            device__pb2.LightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def turnOffLight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/turnOffLight',
            device__pb2.TurnOffLightRequest.SerializeToString,
            device__pb2.LightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def changeLanguage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/changeLanguage',
            device__pb2.ChangeLangRequest.SerializeToString,
            device__pb2.ChangeLangResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTouchEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getTouchEvent',
            device__pb2.DeviceCommonRequest.SerializeToString,
            device__pb2.TouchEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeChassisProtection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/removeChassisProtection',
            device__pb2.ChassisProtectionRequest.SerializeToString,
            device__pb2.ChassisProtectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLanguage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DevicePackage.DeviceServiceGrpc/getLanguage',
            device__pb2.GetLangRequest.SerializeToString,
            device__pb2.GetLangResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
