# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from perian.models.done_at import DoneAt
from perian.models.errors import Errors
from perian.models.job_status import JobStatus
from perian.models.job_view_docker_metadata import JobViewDockerMetadata
from perian.models.job_view_requirement_metadata import JobViewRequirementMetadata
from perian.models.job_view_runtime_metadata import JobViewRuntimeMetadata
from perian.models.logs import Logs
from perian.models.price_data import PriceData
from perian.models.started_at import StartedAt
from typing import Optional, Set
from typing_extensions import Self

class JobView(BaseModel):
    """
    Limited View on Model representation of a perian job.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    status: Optional[JobStatus] = None
    started_at: Optional[StartedAt] = None
    done_at: Optional[DoneAt] = None
    logs: Optional[Logs] = None
    errors: Optional[Errors] = None
    price: Optional[PriceData] = None
    docker_metadata: Optional[JobViewDockerMetadata] = None
    requirement_metadata: Optional[JobViewRequirementMetadata] = None
    runtime_metadata: Optional[JobViewRuntimeMetadata] = None
    __properties: ClassVar[List[str]] = ["id", "status", "started_at", "done_at", "logs", "errors", "price", "docker_metadata", "requirement_metadata", "runtime_metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of started_at
        if self.started_at:
            _dict['started_at'] = self.started_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of done_at
        if self.done_at:
            _dict['done_at'] = self.done_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logs
        if self.logs:
            _dict['logs'] = self.logs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_metadata
        if self.docker_metadata:
            _dict['docker_metadata'] = self.docker_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requirement_metadata
        if self.requirement_metadata:
            _dict['requirement_metadata'] = self.requirement_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_metadata
        if self.runtime_metadata:
            _dict['runtime_metadata'] = self.runtime_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "started_at": StartedAt.from_dict(obj["started_at"]) if obj.get("started_at") is not None else None,
            "done_at": DoneAt.from_dict(obj["done_at"]) if obj.get("done_at") is not None else None,
            "logs": Logs.from_dict(obj["logs"]) if obj.get("logs") is not None else None,
            "errors": Errors.from_dict(obj["errors"]) if obj.get("errors") is not None else None,
            "price": PriceData.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "docker_metadata": JobViewDockerMetadata.from_dict(obj["docker_metadata"]) if obj.get("docker_metadata") is not None else None,
            "requirement_metadata": JobViewRequirementMetadata.from_dict(obj["requirement_metadata"]) if obj.get("requirement_metadata") is not None else None,
            "runtime_metadata": JobViewRuntimeMetadata.from_dict(obj["runtime_metadata"]) if obj.get("runtime_metadata") is not None else None
        })
        return _obj


