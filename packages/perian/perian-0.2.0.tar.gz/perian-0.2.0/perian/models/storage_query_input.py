# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List, Optional
from perian.models.accelerator_query_input_operator import AcceleratorQueryInputOperator
from perian.models.accelerator_query_input_options import AcceleratorQueryInputOptions
from perian.models.included import Included
from perian.models.no import No
from perian.models.size import Size
from perian.models.speed import Speed
from perian.models.type import Type
from typing import Optional, Set
from typing_extensions import Self

class StorageQueryInput(BaseModel):
    """
    StorageQueryInput
    """ # noqa: E501
    operator: Optional[AcceleratorQueryInputOperator] = None
    options: Optional[AcceleratorQueryInputOptions] = None
    no: Optional[No] = None
    size: Optional[Size] = None
    type: Optional[Type] = None
    speed: Optional[Speed] = None
    included: Optional[Included] = None
    __properties: ClassVar[List[str]] = ["operator", "options", "no", "size", "type", "speed", "included"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageQueryInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operator
        if self.operator:
            _dict['operator'] = self.operator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no
        if self.no:
            _dict['no'] = self.no.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speed
        if self.speed:
            _dict['speed'] = self.speed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of included
        if self.included:
            _dict['included'] = self.included.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageQueryInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operator": AcceleratorQueryInputOperator.from_dict(obj["operator"]) if obj.get("operator") is not None else None,
            "options": AcceleratorQueryInputOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "no": No.from_dict(obj["no"]) if obj.get("no") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "type": Type.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "speed": Speed.from_dict(obj["speed"]) if obj.get("speed") is not None else None,
            "included": Included.from_dict(obj["included"]) if obj.get("included") is not None else None
        })
        return _obj


