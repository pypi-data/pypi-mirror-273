# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List, Optional
from perian.models.accelerator_query_input_operator import AcceleratorQueryInputOperator
from perian.models.accelerator_query_input_options import AcceleratorQueryInputOptions
from perian.models.accelerator_query_output_memory import AcceleratorQueryOutputMemory
from perian.models.id import Id
from perian.models.instance_type_query_output_accelerator import InstanceTypeQueryOutputAccelerator
from perian.models.instance_type_query_output_availability import InstanceTypeQueryOutputAvailability
from perian.models.instance_type_query_output_cpu import InstanceTypeQueryOutputCpu
from perian.models.instance_type_query_output_network import InstanceTypeQueryOutputNetwork
from perian.models.instance_type_query_output_price import InstanceTypeQueryOutputPrice
from perian.models.instance_type_query_output_provider import InstanceTypeQueryOutputProvider
from perian.models.instance_type_query_output_reference_id import InstanceTypeQueryOutputReferenceId
from perian.models.instance_type_query_output_region import InstanceTypeQueryOutputRegion
from perian.models.instance_type_query_output_storage import InstanceTypeQueryOutputStorage
from perian.models.instance_type_query_output_zone import InstanceTypeQueryOutputZone
from perian.models.name1 import Name1
from perian.models.type import Type
from typing import Optional, Set
from typing_extensions import Self

class InstanceTypeQueryOutput(BaseModel):
    """
    InstanceTypeQueryOutput
    """ # noqa: E501
    operator: Optional[AcceleratorQueryInputOperator] = None
    options: Optional[AcceleratorQueryInputOptions] = None
    id: Optional[Id] = None
    region: Optional[InstanceTypeQueryOutputRegion] = None
    zone: Optional[InstanceTypeQueryOutputZone] = None
    name: Optional[Name1] = None
    cpu: Optional[InstanceTypeQueryOutputCpu] = None
    accelerator: Optional[InstanceTypeQueryOutputAccelerator] = None
    ram: Optional[AcceleratorQueryOutputMemory] = None
    storage: Optional[InstanceTypeQueryOutputStorage] = None
    network: Optional[InstanceTypeQueryOutputNetwork] = None
    price: Optional[InstanceTypeQueryOutputPrice] = None
    availability: Optional[InstanceTypeQueryOutputAvailability] = None
    type: Optional[Type] = None
    provider: Optional[InstanceTypeQueryOutputProvider] = None
    reference_id: Optional[InstanceTypeQueryOutputReferenceId] = None
    __properties: ClassVar[List[str]] = ["operator", "options", "id", "region", "zone", "name", "cpu", "accelerator", "ram", "storage", "network", "price", "availability", "type", "provider", "reference_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceTypeQueryOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operator
        if self.operator:
            _dict['operator'] = self.operator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zone
        if self.zone:
            _dict['zone'] = self.zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accelerator
        if self.accelerator:
            _dict['accelerator'] = self.accelerator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ram
        if self.ram:
            _dict['ram'] = self.ram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference_id
        if self.reference_id:
            _dict['reference_id'] = self.reference_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceTypeQueryOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operator": AcceleratorQueryInputOperator.from_dict(obj["operator"]) if obj.get("operator") is not None else None,
            "options": AcceleratorQueryInputOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "id": Id.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "region": InstanceTypeQueryOutputRegion.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "zone": InstanceTypeQueryOutputZone.from_dict(obj["zone"]) if obj.get("zone") is not None else None,
            "name": Name1.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "cpu": InstanceTypeQueryOutputCpu.from_dict(obj["cpu"]) if obj.get("cpu") is not None else None,
            "accelerator": InstanceTypeQueryOutputAccelerator.from_dict(obj["accelerator"]) if obj.get("accelerator") is not None else None,
            "ram": AcceleratorQueryOutputMemory.from_dict(obj["ram"]) if obj.get("ram") is not None else None,
            "storage": InstanceTypeQueryOutputStorage.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "network": InstanceTypeQueryOutputNetwork.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "price": InstanceTypeQueryOutputPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "availability": InstanceTypeQueryOutputAvailability.from_dict(obj["availability"]) if obj.get("availability") is not None else None,
            "type": Type.from_dict(obj["type"]) if obj.get("type") is not None else None,
            "provider": InstanceTypeQueryOutputProvider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "reference_id": InstanceTypeQueryOutputReferenceId.from_dict(obj["reference_id"]) if obj.get("reference_id") is not None else None
        })
        return _obj


