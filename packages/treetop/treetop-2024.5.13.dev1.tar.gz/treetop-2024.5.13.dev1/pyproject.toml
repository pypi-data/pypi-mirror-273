[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.4"]

[project]
authors = [{name = "Robert McArthur"}]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["sc-supertree ==2024.5.6", "cogent3"]
keywords = [
  "phylogenetic reconstruction",
  "dcm3",
  "iqtree",
  "supertree",
  "phylogeny",
  "biology",
  "bioinformatics",
]
license = {file = "LICENSE"}
name = "treetop"
readme = "README.md"
requires-python = ">=3.10,<3.13"
# the following are inferred from the source code
dynamic = ["version", "description"]

[project.urls]
"Bug Tracker" = "https://github.com/rmcar17/TreeTOP/issues"
"Source Code" = "https://github.com/rmcar17/TreeTOP"

# [project.scripts]
# scs = "treetop.cli:treetop"

[project.optional-dependencies]
dev = [
  "ruff==0.4.4",
  "click==8.1.7",
  "mypy==1.10.0",
  "docformatter",
  "flit",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "nox",
]
test = ["pytest", "pytest-cov", "pytest-xdist", "nox"]

[tool.flit.module]
name = "treetop"

[tool.pytest.ini_options]
addopts = ["--strict-config", "-ra"]
testpaths = "tests"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
