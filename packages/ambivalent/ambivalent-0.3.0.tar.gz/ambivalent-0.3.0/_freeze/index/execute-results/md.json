{
  "hash": "a040065b0fea9e97cea1878f1c3f484e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nsite-url: https://saforem2.github.io/ambivalent\n# editor:\n#    render-on-save: true\nexecute:\n   freeze: auto\nformat:\n  html: default\n  # revealjs:\n  #   output-file: slides.html\n  gfm:\n    default-image-extension: svg\n    author: Sam Foreman\n    output-file: \"README.md\"\n---\n\n[~~`opinionated`~~](https://github.com/saforem2/opinionated) $\\longrightarrow$ [**`ambivalent`**](https://github.com/saforem2/ambivalent) ü§∑üèª‚Äç\n\nClean, simple style for Matplotlib figures.\n\nTransparent backgrounds with grey text $\\textcolor{#838383}{\\blacksquare}$ that\nare accessible / legible and `{light, dark}`-mode independent.\n\n## Install\n\n```bash\npython3 -m pip install ambivalent\n```\n\n## Getting Started\n\n\n\n<!-- - Use `ambivalend.STYLES['ambivalent']` as the default style for `matplotlib`. -->\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\nimport ambivalent\nimport matplotlib.pyplot as plt\nplt.style.use(ambivalent.STYLES['ambivalent'])\n```\n:::\n\n\n## Examples\n\n### `seaborn` Tips Dataset\n\n- [Seaborn Gallery](https://seaborn.pydata.org/examples/index.html)\n    - [Tips Dataset Example](https://seaborn.pydata.org/generated/seaborn.kdeplot.html)\n\n<!-- <details closed><summary><code>code</code>:</summary> -->\n\n::: {.cell layout='[[100]]' execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\ntips.head()\n\nfig, ax = plt.subplots(figsize=(6, 6))  # , ncols=2)\n\n_ = sns.kdeplot(\n   data=tips, x=\"total_bill\", hue=\"size\",\n   fill=True, common_norm=False, palette=\"flare_r\",\n   alpha=.3, linewidth=0,\n   ax=ax,  # [0],\n)\n_ = ax.set_ylabel('')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Tips -- Density Plot](index_files/figure-commonmark/fig-py-tips-density-output-1.svg){#fig-py-tips-density}\n:::\n:::\n\n\n<!-- </details> -->\n\n### `seaborn` Scatter Plot\n\n<!-- <details closed><summary><code>code</code>:</summary> -->\n\n::: {.cell layout='[[100]]' execution_count=4}\n``` {.python .cell-code code-fold=\"true\"}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the example diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# Draw a scatter plot while assigning point colors and sizes to different\n# variables in the dataset\nf, ax = plt.subplots(figsize=(6, 6))\n_ = sns.despine(f, left=True, bottom=True)\n_ = clarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\n_ = sns.scatterplot(x=\"carat\", y=\"price\",\n                hue=\"clarity\", size=\"depth\",\n                palette=\"flare\",\n                hue_order=clarity_ranking,\n                sizes=(1, 8), linewidth=0,\n                data=diamonds, ax=ax)\n```\n![scatter plot with markers of varying size and color](index_files/figure-commonmark/fig-py-diamonds-scatter-output-1.svg){#fig-py-diamonds-scatter}\n:::\n\n\n<!-- </details> -->\n\n### Histogram + Scatter Plot\n\n<!-- <details closed><summary><code>code</code>:</summary> -->\n\n::: {.cell layout='[[100]]' execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Simulate data from a bivariate Gaussian\nn = 10000\nmean = [0, 0]\ncov = [(2, .4), (.4, .2)]\nrng = np.random.RandomState(0)\nx, y = rng.multivariate_normal(mean, cov, n).T\n\n# Draw a combo histogram and scatterplot with density contours\nf, ax = plt.subplots(figsize=(6, 6))\n_ = sns.scatterplot(x=x, y=y, s=5, color=\"#666666\", alpha=0.3)\n_ = sns.histplot(x=x, y=y, bins=50, pthresh=.1, cmap=\"flare_r\")\n_ = sns.kdeplot(x=x, y=y, levels=5, color=\"w\", linewidths=1)\n_ = ax.set_xlabel('x')\n_ = ax.set_ylabel('y')\n_ = plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Combo histogram + Scatter Plot with Density Contours](index_files/figure-commonmark/fig-py-hist-scatter-output-1.svg){#fig-py-hist-scatter}\n:::\n:::\n\n\n<!-- </details> -->\n\n### Jointplot\n\n<!-- <details closed><summary><code>code</code>:</summary> -->\n\n::: {.cell layout='[[100]]' execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\nimport seaborn as sns\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n# Show the joint distribution using kernel density estimation\nimport matplotlib as mpl\nwith mpl.rc_context(plt.rcParams.update({'axes.grid': False})):\n  g = sns.jointplot(\n      data=penguins,\n      x=\"bill_length_mm\",\n      y=\"bill_depth_mm\",\n      hue=\"species\",\n      edgecolors='none',\n      alpha=0.4,\n  )\n  _ = plt.grid(False)\n  plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Joint Distribution with Kernel Density Estimation](index_files/figure-commonmark/fig-py-kde-2d-output-1.svg){#fig-py-kde-2d}\n:::\n:::\n\n\n<!-- </details> -->\n\n### Matplotlib Histograms\n\n<!-- <details closed><summary><code>code</code>:</summary> -->\n\n::: {.cell layout='[[100]]' execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nn_bins = 10\nx = np.random.randn(1000, 3)\n\nplt.rcParams['axes.grid'] = True\n\nfig, ((ax0, ax1), (ax2, ax3)) = plt.subplots(nrows=2, ncols=2)\n\ncolors = ['#333333', '#666666', '#999999']\nax0.hist(x, n_bins, density=True, histtype='bar', color=colors, label=colors)\n_ = ax0.legend()\n_ = ax0.set_title('bars with legend')\n\n_ = ax1.hist(x, n_bins, density=True, histtype='bar', stacked=True, alpha=0.4)\n_ = ax1.set_title('stacked bar')\n\n_ = ax2.hist(x, n_bins, histtype='step', stacked=True, fill=False)\n_ = ax2.set_title('stack step (unfilled)')\n\n# Make a multiple-histogram of data-sets with different length.\nx_multi = [np.random.randn(n) for n in [10000, 5000, 2000]]\n_ = ax3.hist(x_multi, n_bins, histtype='bar')\n_ = ax3.set_title('different sample sizes')\n\n_ = fig.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Histograms with Matplotlib](index_files/figure-commonmark/fig-py-mpl-hists-output-1.svg){#fig-py-mpl-hists}\n:::\n:::\n\n\n<!-- </details> -->\n\n## Gallery[^examples]\n\n<details closed><summary><italic>More Examples...</italic></summary>\n\n[^examples]: Examples from [Matplotlib Examples](https://matplotlib.org/stable/gallery/index.html)\n\n\n<!-- ::: {#fig-gallery style=\"display: flex; flex-direction:row; align-items: flex-end\"} -->\n\n::: {layout-nrow=3}\n\n::: {layout-ncol=2}\n\n![[`seaborn.jointplot`](https://seaborn.pydata.org/generated/seaborn.jointplot.html#seaborn.jointplot)](./assets/penguins.svg){#fig-penguins .stretch}\n\n![[spectrum](https://matplotlib.org/stable/gallery/lines_bars_and_markers/spectrum_demo.html#sphx-glr-gallery-lines-bars-and-markers-spectrum-demo-py)](./assets/spectrum.svg){#fig-spectrum .stretch}\n\n:::\n\n<!-- ::: {layout=\"[[45, 45]]\" layout-valign=\"bottom\" style=\"text-align:center;\"} -->\n::: {layout-ncol=2}\n\n![`tips` dataset](./assets/tipde-kde_r.svg){#fig-tips-kde .stretch}\n\n![2D KDE](./assets/kde-2d_r.svg){#fig-2d-kde .stretch}\n\n:::\n\n<!-- ::: {layout=\"[[80]]\" style=\"display: flex; text-align:center;\"} -->\n::: {layout-ncol=1}\n\n![Histograms](./assets/mpl-hist.svg){#fig-mpl-hist .stretch}\n\n:::\n\n:::\n\n\n<!-- ::: {.stretch layout=\"[[31, 31, 31]]\" layout-valign=\"bottom\" style=\"display: flex; text-align:center!important;\"} -->\n\n::: {#fig-chains-J layout-ncol=3}\n\n![$|J_{f}|$](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_33_22.svg){.stretch}\n\n![$|J_{b}|$](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_33_23.svg){.stretch}\n\n![$|J|$](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_33_21.svg){.stretch}\n\n$|J|$ during training\n\n:::\n\n::: {#fig-chains-dQ layout=\"[[80]]\" layout-valign=\"bottom\" style=\"display: flex; text-align:center;\"}\n\n![$\\delta Q_{\\mathrm{train}}$](./assets/chains.svg){#fig-chains .stretch}\n\nFigure from [`l2hmc-qcd` Notebook](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/l2hmc-2dU1.html#inference)\n\n:::\n\n::: {#fig-xeps style=\"display: flex; text-align:center;\"}\n\n![](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_30_68.svg){.stretch}\n\n$\\varepsilon_{x}$ during training\n\n:::\n\n::: {#fig-veps style=\"display: flex; text-align:center;\"}\n\n![](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_30_68.svg){.stretch}\n\n$\\varepsilon_{x}$ during training\n\n:::\n\n::: {#fig-combined-chains layout=\"[[80]]\" style=\"display: flex; text-align:center;\"}\n\n![$\\sum \\delta Q$](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/assets/output_48_1.svg){#fig-dQhist .stretch}\n\nFigure from [`l2hmc-qcd` Notebook](https://saforem2.github.io/l2hmc-qcd/qmd/l2hmc-2dU1/l2hmc-2dU1.html)\n\n:::\n\n</details>\n\n\n<!-- ```{python} -->\n<!-- #| code-fold: true -->\n<!-- #| code-summary: \"boxenplot\" -->\n<!-- #| label: fig-py-boxenplot -->\n<!-- #| output: true -->\n<!-- #| fig-cap: \"Seaborn Boxenplot\" -->\n<!-- #| layout: [[100]] -->\n<!---->\n<!-- import seaborn as sns -->\n<!---->\n<!-- diamonds = sns.load_dataset(\"diamonds\") -->\n<!-- clarity_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"] -->\n<!---->\n<!-- sns.boxenplot( -->\n<!--     diamonds, x=\"clarity\", y=\"carat\", -->\n<!--     color=\"b\", order=clarity_ranking, width_method=\"linear\", -->\n<!-- ) -->\n<!-- ``` -->\n\n<!-- ```{python} -->\n<!-- import warnings -->\n<!-- from ambivalent import STYLES -->\n<!-- import matplotlib.pyplot as plt -->\n<!-- import numpy as np -->\n<!---->\n<!-- plt.style.use(STYLES['ambivalent']) -->\n<!---->\n<!-- # some random data -->\n<!-- x = np.random.randn(1000) -->\n<!-- y = np.random.randn(1000) -->\n<!---->\n<!---->\n<!-- def scatter_hist(x, y, ax, ax_histx, ax_histy, alpha: float = 0.4): -->\n<!--     # no labels -->\n<!--     ax_histx.tick_params(axis=\"x\", labelbottom=False) -->\n<!--     ax_histy.tick_params(axis=\"y\", labelleft=False) -->\n<!---->\n<!--     # the scatter plot: -->\n<!--     ax.scatter(x, y, alpha=alpha) -->\n<!---->\n<!--     # now determine nice limits by hand: -->\n<!--     binwidth = 0.25 -->\n<!--     xymax = max(np.max(np.abs(x)), np.max(np.abs(y))) -->\n<!--     lim = (int(xymax/binwidth) + 1) * binwidth -->\n<!---->\n<!--     bins = np.arange(-lim, lim + binwidth, binwidth) -->\n<!--     ax_histx.hist(x, bins=bins) -->\n<!--     ax_histy.hist(y, bins=bins, orientation='horizontal') -->\n<!-- ``` -->\n\n<!-- ### 2D Density -->\n<!---->\n<!-- ```{python} -->\n<!-- #| code-fold: true -->\n<!-- #| code-summary: \"Make the plot\" -->\n<!-- #| label: fig-py-density2d -->\n<!-- #| output: true -->\n<!-- #| fig-cap: \"2D Density plot\" -->\n<!-- #| layout: [[100]] -->\n<!---->\n<!-- # Start with a square Figure. -->\n<!-- fig = plt.figure(figsize=(6, 6)) -->\n<!-- # Add a gridspec with two rows and two columns and a ratio of 1 to 4 between -->\n<!-- # the size of the marginal axes and the main axes in both directions. -->\n<!-- # Also adjust the subplot parameters for a square plot. -->\n<!-- gs = fig.add_gridspec(2, 2,  width_ratios=(4, 1), height_ratios=(1, 4), -->\n<!--                       left=0.1, right=0.9, bottom=0.1, top=0.9, -->\n<!--                       wspace=0.15, hspace=0.15) -->\n<!-- # Create the Axes. -->\n<!-- ax = fig.add_subplot(gs[1, 0]) -->\n<!-- ax_histx = fig.add_subplot(gs[0, 0], sharex=ax) -->\n<!-- ax_histy = fig.add_subplot(gs[1, 1], sharey=ax) -->\n<!-- _ = fig.axes[1].grid(False) -->\n<!-- _ = fig.axes[2].set_xticklabels([]) -->\n<!-- _ = fig.axes[1].set_yticklabels([]) -->\n<!-- _ = fig.axes[2].grid(False) -->\n<!-- _ = fig.axes[0].set_xticklabels(fig.axes[0].get_xticklabels()) -->\n<!-- _ = fig.axes[0].set_yticklabels(fig.axes[0].get_yticklabels()) -->\n<!---->\n<!-- # Draw the scatter plot and marginals. -->\n<!-- _ = scatter_hist(x, y, ax, ax_histx, ax_histy) -->\n<!-- _ = plt.show() -->\n<!-- ``` -->\n<!---->\n<!---->\n\n\n\n<!-- ```{python} -->\n<!-- import numpy as np -->\n<!-- import matplotlib.animation as animation -->\n<!---->\n<!-- # Fixing random state for reproducibility -->\n<!-- np.random.seed(19680801) -->\n<!---->\n<!---->\n<!-- def random_walk(num_steps, max_step=0.05): -->\n<!--     \"\"\"Return a 3D random walk as (num_steps, 3) array.\"\"\" -->\n<!--     start_pos = np.random.random(3) -->\n<!--     steps = np.random.uniform(-max_step, max_step, size=(num_steps, 3)) -->\n<!--     walk = start_pos + np.cumsum(steps, axis=0) -->\n<!--     return walk -->\n<!---->\n<!---->\n<!-- def update_lines(num, walks, lines): -->\n<!--     for line, walk in zip(lines, walks): -->\n<!--         # NOTE: there is no .set_data() for 3 dim data... -->\n<!--         line.set_data(walk[:num, :2].T) -->\n<!--         line.set_3d_properties(walk[:num, 2]) -->\n<!--     return lines -->\n<!---->\n<!---->\n<!-- # Data: 40 random walks as (num_steps, 3) arrays -->\n<!-- num_steps = 30 -->\n<!-- walks = [random_walk(num_steps) for index in range(40)] -->\n<!---->\n<!-- # Attaching 3D axis to the figure -->\n<!-- fig = plt.figure() -->\n<!-- ax = fig.add_subplot(projection=\"3d\") -->\n<!---->\n<!-- # Create lines initially without data -->\n<!-- lines = [ax.plot([], [], [])[0] for _ in walks] -->\n<!---->\n<!-- # Setting the axes properties -->\n<!-- _ = ax.set(xlim3d=(0, 1), xlabel='X') -->\n<!-- _ = ax.set(ylim3d=(0, 1), ylabel='Y') -->\n<!-- _ = ax.set(zlim3d=(0, 1), zlabel='Z') -->\n<!---->\n<!-- # Creating the Animation object -->\n<!-- ani = animation.FuncAnimation( -->\n<!--     fig, update_lines, num_steps, fargs=(walks, lines), interval=100) -->\n<!---->\n<!-- plt.show() -->\n<!-- ``` -->\n\n\n::: {.callout-tip icon=false title='[üíù Status]{.dim-text}' collapse=\"false\" style=\"text-align: left!important; width:100%; border: none!important; border-left: 1px solid var(--dim-text)!important; border-radius: 0pt!important; background-color: var(--bg-transparent); opacity:100%;\"}\n\n[![](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fsaforem2.github.io%2Fambivalent&count_bg=%23222222&title_bg=%23303030&icon=&icon_color=%23E7E7E7)]{style=\"text-align:center;\"}\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f; font-style: italic\">Last Updated</span>: <span style=\"color: #f06292; text-decoration-color: #f06292; font-weight: bold\">05</span><span style=\"color: #f06292; text-decoration-color: #f06292\">/</span><span style=\"color: #f06292; text-decoration-color: #f06292; font-weight: bold\">13</span><span style=\"color: #f06292; text-decoration-color: #f06292\">/</span><span style=\"color: #f06292; text-decoration-color: #f06292; font-weight: bold\">2024</span> <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">@</span> <span style=\"color: #1a8fff; text-decoration-color: #1a8fff; font-weight: bold\">21:56:28</span>\n</pre>\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "index_files/figure-commonmark"
    ],
    "filters": []
  }
}