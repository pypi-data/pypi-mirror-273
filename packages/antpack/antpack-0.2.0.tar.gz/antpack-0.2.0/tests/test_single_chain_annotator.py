"""Tests basic functionality for the SingleChainAnnotator class."""
import os
import gzip
import unittest
from antpack import SingleChainAnnotator

class TestSingleChainAnnotator(unittest.TestCase):


    def test_error_checking(self):
        """Check that sequences which have known issues are flagged
        as such, and that deliberately invalid inputs are recognized."""
        # Pass dummy sequences with errors.
        aligner = SingleChainAnnotator(chains=["H", "K", "L"])
        with self.assertRaises(ValueError):
            aligner.analyze_seqs("YYY")

        results = aligner.analyze_seqs(["YaY"])
        self.assertTrue(results[0][3].startswith("Invalid sequence"))
        results = aligner.analyze_seqs(["YBW"])
        self.assertTrue(results[0][3].startswith("Invalid sequence"))
        results = aligner.analyze_seqs(["Y K"])
        self.assertTrue(results[0][3].startswith("Invalid sequence"))
        results = aligner.analyze_seqs(["Y-K"])
        self.assertTrue(results[0][3].startswith("Invalid sequence"))

        results = aligner.analyze_seq("Y-K")
        self.assertTrue(results[3].startswith("Invalid sequence"))
        results = aligner.analyze_seq("yAy")
        self.assertTrue(results[3].startswith("Invalid sequence"))


    def test_chain_recognition(self):
        """Ensure that single chain annotator can correctly recognize the
        input chain when supplied with something that could be L or H,
        and ensure it can correctly detect sequences with large deletions
        that remove one or more conserved residues."""

        known_K = ("DIVMTQSPSSLTVTAGEKVTMSCKSSQSLLSSGNQKNYLTWYQQIPGQPPKLLIYWASTR"
                    "ESGVPDRFTGSGSGTDFTLTINSVQAEDLAVYYCQNDYTYPLTFGAGTKLELKRTV")
        known_L = ("QSALTQPASVSGSPGQSITISCTGTTSDVGTYNFVSWYQQHPGKAPKAIIFDVTNRPSGI"
                    "SNRFSGSKFGNTASLTISGLQAEDEADYYCAAYTVASTLLFGGGTKVTVLRQP")
        known_H = ("VHLQQSGAELMKPGASVKISCKASGYTFITYWIEWVKQRPGHGLEWIGDILPGSGSTNYN"
                    "ENFKGKATFTADSSSNTAYMQLSSLTSEDSAVYYCARSGYYGNSGFAYWGQGTLVTVSA")

        for scheme in ["martin", "imgt", "kabat"]:
            aligner = SingleChainAnnotator(chains=["H", "K", "L"],
                            scheme = scheme)
            results = aligner.analyze_seqs([known_K, known_L, known_H])
            self.assertTrue(results[0][2] == "K")
            self.assertTrue(results[1][2] == "L")
            self.assertTrue(results[2][2] == "H")

            self.assertTrue(aligner.analyze_seq(known_K)[2] == "K")
            self.assertTrue(aligner.analyze_seq(known_L)[2] == "L")
            self.assertTrue(aligner.analyze_seq(known_H)[2] == "H")

            bad_chain = known_H[:100]
            self.assertTrue(aligner.analyze_seqs([bad_chain])[0][3].startswith("Unexpected"))
            self.assertTrue(aligner.analyze_seq(bad_chain)[3].startswith("Unexpected"))

    def test_performance(self):
        """Run a batch of test data (approximately 1600 sequences from the
        PDB) to ensure that numbering is consistent with numbering generated
        by another tool. There will occasionally be small differences in
        cases where there are multiple possible acceptable alignments,
        but in general we expect the numbering to be the same the vast
        majority of the time."""
        project_path = os.path.abspath(os.path.dirname(__file__))
        current_dir = os.getcwd()
        os.chdir(os.path.join(project_path, "test_data"))

        with gzip.open("test_data.csv.gz", "rt") as fhandle:
            _ = fhandle.readline()
            seqs, martin_num, imgt_num, kabat_num = [], [], [], []
            for line in fhandle:
                line_elements = line.strip().split(",")
                seqs.append(line_elements[0])
                martin_num.append(line_elements[1].split("_"))
                imgt_num.append(line_elements[2].split("_"))
                kabat_num.append(line_elements[3].split("_"))

        os.chdir(current_dir)

        numberings = [martin_num, imgt_num, kabat_num]
        schemes = ["martin", "imgt", "kabat"]

        aligners = [SingleChainAnnotator(chains=["H", "K", "L"],
                        scheme=k) for k in schemes]

        for aligner, scheme, numbering in zip(aligners, schemes, numberings):
            total_comparisons, num_correct = compare_results(aligner.analyze_seqs(seqs),
                                    numbering, seqs, scheme)
            print(f"{scheme}: Total comparisons: {total_comparisons}. Num matching: {num_correct}.")
            self.assertTrue(num_correct / total_comparisons > 0.97)


def compare_results(results, comparator_numbering, seqs, scheme):
    """Compares the numbering generated by AntPack with a comparator,
    and returns the number correct vs total comparisons. Also contains
    some (commented-out) code for writing non-matching results to
    a temporary file for closer inspection."""
    total_comparisons, num_correct = 0, 0
    #outhandle = open(f"temp_{scheme}.csv", "w+", encoding="utf-8")
    for result, comparator, seq in zip(results, comparator_numbering, seqs):
        if result[3] != '':
            continue
        total_comparisons += 1
        if result[0] == comparator:
            num_correct += 1
        #This code writes results to file in a format which is easy to look
        #at. Comment it out normally.
        #else:
        #    for i, resnum in enumerate(result[0]):
        #        if resnum != comparator[i]:
        #            result[0][i] = result[0][i] + "!!"
        #    outhandle.write(f"Sequence,{','.join(list(seq))}\n")
        #    outhandle.write(f"Antpack_result,{','.join(result[0])}\n")
        #    outhandle.write(f"Comparator_result,{','.join(comparator)}\n\n")

    #outhandle.close()
    return total_comparisons, num_correct


if __name__ == "__main__":
    unittest.main()
