[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
name = "ssec"
version = "3.0.1"
description = "Synchronous and asynchronous library for server-sent events."
readme = "README.md"
requires-python = ">=3.12"
authors = [
  { name = "J. Baudisch", email = "justin.baudisch@hsbi.de" },
]
maintainers = [{ name = "J. Baudisch", email = "justin.baudisch@hsbi.de" }]
keywords = [
  "Network",
  "Synchronous",
  "Asynchronous",
  "Server-sent events"
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development",
  "Typing :: Typed"
]
dependencies = [
  "httpx~=0.27.0",
]

[project.optional-dependencies]
dev = [
  "mypy~=1.10.0",
  "ruff~=0.4.4",
  "sphinx~=7.3.7",
  "furo~=2024.5.6",
  "pytest~=8.2.0",
  "pytest-asyncio~=0.23.6",
]

[project.urls]
Repository = "https://github.com/sharly-project/ssec"

[tool.mypy]
cache_dir = ".cache/mypy"

[tool.ruff]
cache-dir = ".cache/ruff"
extend-exclude = [
  ".cache",
  "pyproject.toml",
]
preview = true
src = ["src", "tests"]
lint.select = [
  "F",      # pyflakes
  "E",      # pycodestyle errors
  "W",      # pycodestyle warnings
  "C90",    # mccabe
  "I",      # isort
  "N",      # pep8-naming
  "D",      # pydocstyle
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
  "ANN",    # flake8-annotations
  "ASYNC",  # flake8-async
  # "TRIO",   # flake8-trio
  "S",      # flake8-bandit
  "BLE",    # flake8-blind-except
  "FBT",    # flake8-boolean-trap
  "B",      # flake8-bugbear
  "A",      # flake8-builtins
  "COM",    # flake8-commas
  # "CPY",    # flake8-copyright
  "C4",     # flake8-comprehensions
  "DTZ",    # flake8-datetimez
  "T10",    # flake8-debugger
  # "DJ",     # flake8-django
  "EM",     # flake8-errmsg
  "EXE",    # flake8-executable
  "FA",     # flake8-future-annotations
  "ISC",    # flake8-implicit-str-concat
  # "ICN",    # flake8-import-conventions
  "LOG",    # flake8-logging
  # "G",      # flake8-logging-format
  "INP",    # flake8-no-pep420
  "PIE",    # flake8-pie
  "T20",    # flake8-print
  "PYI",    # flake8-pyi
  "PT",     # flake8-pytest-style
  "Q",      # flake8-quotes
  "RSE",    # flake8-raise
  "RET",    # flake8-return
  "SLF",    # flake8-self
  "SLOT",   # flake8-slots
  "SIM",    # flake8-simplify
  "TID",    # flake8-tidy-imports
  "TCH",    # flake8-type-checking
  # "INT",    # flake8-gettext
  "ARG",    # flake8-unused-arguments
  "PTH",    # flake8-use-pathlib
  "TD",     # flake8-todos
  "FIX",    # flake8-fixme
  "ERA",    # eradicate
  "PD",     # pandas-vet
  "PGH",    # pygrep-hooks
  "PL",     # pylint
  "TRY",    # tryceratops
  "FLY",    # flynt
  "NPY",    # numpy-specific
  # "AIR",    # airflow
  "PERF",   # perflint
  "FURB",   # refurb
  "RUF"     # ruff-specific-rules
]
lint.ignore = [
  "ANN101",   # allow missing type annotation for `self` in method
  "ANN102",   # allow missing type annotation for `cls` in method
  "D105",     # allow missing docstring in magic method
  "TD003",    # allow missing issue link on TODO's
  "RSE102",   # allow unnecessary parentheses on raised exceptions (bug in ruff)
  "PLR1702",  # allow too many nested blocks
  "PLR0913",  # allow too many arguments
  "PLR0912",  # allow too many branches
  "C901",     # allow complex structure
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["F401"]  # allow unused imports

[tool.ruff.lint.pydocstyle]
convention = "numpy"
