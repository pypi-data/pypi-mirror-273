# coding: utf-8

"""
    Workspace Data Service

    This page lists current APIs. As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wds_client.configuration import Configuration


class DiskSpaceComponentDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total': 'str',
        'free': 'float',
        'threshold': 'float',
        'exists': 'bool'
    }

    attribute_map = {
        'total': 'total',
        'free': 'free',
        'threshold': 'threshold',
        'exists': 'exists'
    }

    def __init__(self, total=None, free=None, threshold=None, exists=None, local_vars_configuration=None):  # noqa: E501
        """DiskSpaceComponentDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total = None
        self._free = None
        self._threshold = None
        self._exists = None
        self.discriminator = None

        if total is not None:
            self.total = total
        if free is not None:
            self.free = free
        if threshold is not None:
            self.threshold = threshold
        if exists is not None:
            self.exists = exists

    @property
    def total(self):
        """Gets the total of this DiskSpaceComponentDetails.  # noqa: E501


        :return: The total of this DiskSpaceComponentDetails.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DiskSpaceComponentDetails.


        :param total: The total of this DiskSpaceComponentDetails.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def free(self):
        """Gets the free of this DiskSpaceComponentDetails.  # noqa: E501


        :return: The free of this DiskSpaceComponentDetails.  # noqa: E501
        :rtype: float
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this DiskSpaceComponentDetails.


        :param free: The free of this DiskSpaceComponentDetails.  # noqa: E501
        :type: float
        """

        self._free = free

    @property
    def threshold(self):
        """Gets the threshold of this DiskSpaceComponentDetails.  # noqa: E501


        :return: The threshold of this DiskSpaceComponentDetails.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this DiskSpaceComponentDetails.


        :param threshold: The threshold of this DiskSpaceComponentDetails.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def exists(self):
        """Gets the exists of this DiskSpaceComponentDetails.  # noqa: E501


        :return: The exists of this DiskSpaceComponentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """Sets the exists of this DiskSpaceComponentDetails.


        :param exists: The exists of this DiskSpaceComponentDetails.  # noqa: E501
        :type: bool
        """

        self._exists = exists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskSpaceComponentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiskSpaceComponentDetails):
            return True

        return self.to_dict() != other.to_dict()
