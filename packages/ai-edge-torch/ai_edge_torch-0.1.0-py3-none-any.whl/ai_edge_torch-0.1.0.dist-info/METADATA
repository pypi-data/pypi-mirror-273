Metadata-Version: 2.1
Name: ai-edge-torch
Version: 0.1.0
Summary: Enables preparing PyTorch models for performant on-device execution.
Home-page: https://github.com/google-ai-edge/ai-edge-torch
Keywords: On-Device ML,AI,SDK,Google,Tensorflow-Lite,PyTorch,LLMs,Gen-AI
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9, <3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: safetensors
Requires-Dist: tabulate
Requires-Dist: torch ==2.4.*

<!--ts-->
* [AI Edge Torch](#ai-edge-torch)
   * [PyTorch Converter](#pytorch-converter)
   * [Generative API](#generative-api)
   * [Build Status](#build-status)
   * [Installation](#installation)
      * [Requirements and Dependencies](#requirements-and-dependencies)
      * [Python Virtual Env](#python-virtual-env)
* [Contributing](#contributing)
* [Getting Help](#getting-help)

<!-- Created by https://github.com/ekalinin/github-markdown-toc -->
<!-- Added by: advaitjain, at: Sun May 12 12:00:01 AM PDT 2024 -->

<!--te-->


# AI Edge Torch

This repository has two primary components

1. PyTorch Converter:
   * Provides direct path from PyTorch to [TFLite runtime](https://www.tensorflow.org/lite/guide/inference)
     with great model coverage and CPU performance.
   * This is currently in Beta with planned improvements for hardware
     acceleration, quantization, and ease-of-use.

1. Generative API:
   * Python library that allows developers to author high performance LLMs for
     Mobile devices in PyTorch. These models are then converted via the PyTorch
     Converter to run on devices using the TFLite runtime.
   * This is currently in early Alpha with planned improvements for hardware
     acceleration, quantization, and ease-of-use.

## PyTorch Converter
Here are the steps needed to convert a PyTorch model to a TFLite flatbuffer:

```python
import torch
import torchvision
import ai_edge_torch

# Use resnet18 with pre-trained weights.
resnet18 = torchvision.models.resnet18(torchvision.models.ResNet18_Weights.IMAGENET1K_V1)
sample_inputs = (torch.randn(1, 3, 224, 224),)

# Convert and serialize PyTorch model to a tflite flatbuffer. Note that we
# are setting the model to evaluation mode prior to conversion.
edge_model = ai_edge_torch.convert(resnet18.eval(), sample_inputs)
edge_model.export("resnet18.tflite")
```

The [getting started](docs/pytorch_converter/getting_started.ipynb) Jupyter
notebook gives an initial walkthrough of the conversion process and can be tried
out with Google Colab.

More details are [here](docs/pytorch_converter/README.md).

## Generative API
The AI Edge Torch Generative API is a Torch native library for authoring mobile-optimzed PyTorch Transformer models, which can be converted to TFLite, allowing users to easily deploy Large Language Models (LLMs) on mobile devices. Users can convert the models using the [PyTorch Converter](docs/pytorch_converter/README.md), and run them via the TensorFlow Lite runtime. See [here](ai_edge_torch/generative/examples/c%2B%2B).

Mobile app developers can also use the Edge Generative API to integrate PyTorch LLMs directly with the MediaPipe LLM Inference API for easy integration within their application code. See [here](http://ai.google.dev/edge/mediapipe/solutions/genai/llm_inference#ai_edge_model_conversion).

The AI Edge Torch Generative API is currently CPU-only, with planned support for GPU and NPU.

More detailed documentation can be found [here](ai_edge_torch/generative).

## Build Status

Build Type         |    Status     |
-----------        | --------------|
Generative API (Linux) | [![](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_generative_api.yml/badge.svg?branch=main)](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_generative_api.yml) |
Model Coverage (Linux) | [![](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_model_coverage.yml/badge.svg?branch=main)](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_model_coverage.yml) |
Unit tests (Linux)     | [![](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_unittests.yml/badge.svg?branch=main)](https://github.com/google-ai-edge/ai-edge-torch/actions/workflows/nightly_unittests.yml) |


## Installation

### Requirements and Dependencies

 * Python versions:  3.9, 3.10, 3.11
 * Operating system: Linux
 * PyTorch: ![torch](https://img.shields.io/badge/torch-2.4.0.dev20240429-blue)
 * TensorFlow: ![tf-nightly](https://img.shields.io/badge/tf--nightly-2.17.0.dev20240430-blue)

<!-- requirement badges are updated by ci/update_nightly_versions.py -->

### Python Virtual Env

Set up a Python virtualenv:
```bash
python -m venv --prompt ai-edge-torch venv
source venv/bin/activate
```

A specific release (for example 0.1.0) can be installed with:
```bash
pip install -r https://github.com/google-ai-edge/ai-edge-torch/releases/tag/v0.1.0/requirements.txt
pip install ai-edge-torch==0.1.0
```

Alternately, the nightly version can be installed with:
```bash
pip install -r https://github.com/google-ai-edge/ai-edge-torch/requirements.txt
pip install ai-edge-torch
```

* The list of versioned releases can be seen [here](https://github.com/google-ai-edge/ai-edge-torch/releases).
* The full list of PyPi releases (including nightly builds) can be seen [here](https://pypi.org/project/ai-edge-torch/#history).


# Contributing

See our [contribution documentation](CONTRIBUTING.md).

# Getting Help

Please [create a GitHub issue](https://github.com/google-ai-edge/ai-edge-torch/issues/new/choose) with any questions.

