# coding: utf-8


"""
IGNORE:
    Nutanix VMM APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.CategoryReference import CategoryReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.ClusterReference import ClusterReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.HostReference import HostReference  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.NutanixGuestTools import NutanixGuestTools  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.OwnershipInfo import OwnershipInfo  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.esxi.config.PowerState import PowerState  # noqa: F401,E501

class Vm(ExternalizableAbstractModel):

    """VM configuration.

    :param name: (:attr:`name`) VM name.
    :type name: 
    :param cluster: (:attr:`cluster`) 
    :type cluster: 
    :param host: (:attr:`host`) 
    :type host: 
    :param description: (:attr:`description`) VM description.
    :type description: 
    :param categories: (:attr:`categories`) Categories for the VM.
    :type categories: 
    :param ownership_info: (:attr:`ownership_info`) 
    :type ownership_info: 
    :param nutanix_guest_tools: (:attr:`nutanix_guest_tools`) 
    :type nutanix_guest_tools: 
    :param power_state: (:attr:`power_state`) 
    :type power_state: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'cluster': 'vmm.v4.esxi.config.ClusterReference',
        'host': 'vmm.v4.esxi.config.HostReference',
        'description': 'str',
        'categories': 'list[vmm.v4.esxi.config.CategoryReference]',
        'ownership_info': 'vmm.v4.esxi.config.OwnershipInfo',
        'nutanix_guest_tools': 'vmm.v4.esxi.config.NutanixGuestTools',
        'power_state': 'vmm.v4.esxi.config.PowerState',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'cluster': 'cluster',
        'host': 'host',
        'description': 'description',
        'categories': 'categories',
        'ownership_info': 'ownershipInfo',
        'nutanix_guest_tools': 'nutanixGuestTools',
        'power_state': 'powerState',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, cluster=None, host=None, description=None, categories=None, ownership_info=None, nutanix_guest_tools=None, power_state=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__cluster = None
        self.__host = None
        self.__description = None
        self.__categories = None
        self.__ownership_info = None
        self.__nutanix_guest_tools = None
        self.__power_state = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if cluster is not None:
            self.__cluster = cluster
        if host is not None:
            self.__host = host
        if description is not None:
            self.__description = description
        if categories is not None:
            self.__categories = categories
        if ownership_info is not None:
            self.__ownership_info = ownership_info
        if nutanix_guest_tools is not None:
            self.__nutanix_guest_tools = nutanix_guest_tools
        if power_state is not None:
            self.__power_state = power_state

    def _initialize_object_type(self):
        return 'vmm.v4.esxi.config.Vm'

    def _initialize_object_version(self):
        return 'v4.r0.b1'


    @property
    def name(self):
        """
        VM name.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def cluster(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.ClusterReference`
        """  # noqa: E501
        return self.__cluster

    @cluster.setter
    def cluster(self, cluster):

        self.__cluster = cluster

    @property
    def host(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.HostReference`
        """  # noqa: E501
        return self.__host

    @host.setter
    def host(self, host):

        self.__host = host

    @property
    def description(self):
        """
        VM description.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def categories(self):
        """
        Categories for the VM.

        :type:
             list[ :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.CategoryReference` ]
        """  # noqa: E501
        return self.__categories

    @categories.setter
    def categories(self, categories):

        self.__categories = categories

    @property
    def ownership_info(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.OwnershipInfo`
        """  # noqa: E501
        return self.__ownership_info

    @ownership_info.setter
    def ownership_info(self, ownership_info):

        self.__ownership_info = ownership_info

    @property
    def nutanix_guest_tools(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.NutanixGuestTools`
        """  # noqa: E501
        return self.__nutanix_guest_tools

    @nutanix_guest_tools.setter
    def nutanix_guest_tools(self, nutanix_guest_tools):

        self.__nutanix_guest_tools = nutanix_guest_tools

    @property
    def power_state(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.esxi.config.PowerState`
        """  # noqa: E501
        return self.__power_state

    @power_state.setter
    def power_state(self, power_state):

        self.__power_state = power_state

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Vm, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

