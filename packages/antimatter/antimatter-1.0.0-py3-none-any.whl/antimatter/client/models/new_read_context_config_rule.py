# coding: utf-8

"""
    Antimatter Public API

    Interact with the Antimatter Cloud API

    The version of the OpenAPI document: 1.2.0
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from antimatter.client.models.read_context_rule_facts_inner import ReadContextRuleFactsInner
from antimatter.client.models.read_context_rule_match_expressions_inner import ReadContextRuleMatchExpressionsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NewReadContextConfigRule(BaseModel):
    """
    Information about what must be done to data when it is read from a capsule 
    """ # noqa: E501
    match_expressions: Optional[List[ReadContextRuleMatchExpressionsInner]] = Field(default=None, description="A list of expressions referencing the domainIdentity, readParameters and capsule/span tags. Each expression will be ANDed together, and ANDed with the factAssertions to determine if this rule activates. ", alias="matchExpressions")
    action: StrictStr
    token_scope: Optional[StrictStr] = Field(default=None, description="if the action is Tokenize, what scope to use for the token ", alias="tokenScope")
    token_format: Optional[StrictStr] = Field(default=None, description="if the action is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx and synthetic returns something that looks like the original data type (e.g. John Smith for a name) but is in fact a token ", alias="tokenFormat")
    facts: Optional[List[ReadContextRuleFactsInner]] = Field(default=None, description="assert the existence or nonexistence of facts that reference the domainIdentity, tags and readParameters. These assertions will be ANDed together, and ANDed with the matchExpressions ")
    priority: Annotated[int, Field(strict=True, ge=0)] = Field(description="This rule's priority. Lower priority numbers rules are evaluated first")
    __properties: ClassVar[List[str]] = ["matchExpressions", "action", "tokenScope", "tokenFormat", "facts", "priority"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DenyCapsule', 'DenyRecord', 'Redact', 'Tokenize', 'Allow'):
            raise ValueError("must be one of enum values ('DenyCapsule', 'DenyRecord', 'Redact', 'Tokenize', 'Allow')")
        return value

    @field_validator('token_scope')
    def token_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('unique', 'capsule', 'domain'):
            raise ValueError("must be one of enum values ('unique', 'capsule', 'domain')")
        return value

    @field_validator('token_format')
    def token_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('explicit', 'synthetic'):
            raise ValueError("must be one of enum values ('explicit', 'synthetic')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NewReadContextConfigRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in match_expressions (list)
        _items = []
        if self.match_expressions:
            for _item in self.match_expressions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['matchExpressions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facts (list)
        _items = []
        if self.facts:
            for _item in self.facts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NewReadContextConfigRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matchExpressions": [ReadContextRuleMatchExpressionsInner.from_dict(_item) for _item in obj.get("matchExpressions")] if obj.get("matchExpressions") is not None else None,
            "action": obj.get("action"),
            "tokenScope": obj.get("tokenScope"),
            "tokenFormat": obj.get("tokenFormat"),
            "facts": [ReadContextRuleFactsInner.from_dict(_item) for _item in obj.get("facts")] if obj.get("facts") is not None else None,
            "priority": obj.get("priority")
        })
        return _obj


