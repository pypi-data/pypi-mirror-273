#this is the configuration file of PyMoDAQ
[style]
darkstyle = true
syntax_highlighting = 'github-dark'
language = "English"
country = "UnitedStates"

[qtbackend]
backends = [ "pyqt5", "pyqt6", "pyside2", "pyside6",]
backend = "pyqt5"


[data_saving]
    [data_saving.h5file]
    save_path = "C:\\Data"  #base path where data are automatically saved
    compression_level = 5  # for hdf5 files between 0(min) and 9 (max)

    [data_saving.hsds] #hsds connection option (https://www.hdfgroup.org/solutions/highly-scalable-data-service-hsds/)
    #to save data in pymodaq using hpyd backend towards distant server or cloud (mimicking hdf5 files)
    root_url = "http://hsds.sebastienweber.fr"
    username = "pymodaq_user"
    pwd = "pymodaq"

    [data_saving.data_type]
    dynamic = 'float64' # choose from below. This will force the datatype to be saved to
    dynamics =  ['uint8', 'int8', 'uint16', 'int16', 'uint32', 'int32', 'uint64', 'int64', 'float64']


[general]
debug_level = "INFO" #either "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
debug_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
check_version = true  # automatically check version at startup (or not if False)
message_status_persistence = 1000  # ms

[user]
name = "User name"  # default name used as author in the hdf5 saving files

[viewer]
daq_type = 'DAQ0D' #either "DAQ0D", "DAQ1D", "DAQ2D", "DAQND"
viewer_in_thread = true
timeout = 10000  # default duration in ms to wait for data to be acquirred
allow_settings_edition = false

[network]
    [network.logging]
        [network.logging.user]
        username = "pymodaq_user"
        pwd = "pymodaq"

        [network.logging.sql] #location of the postgresql database server and options where the DAQ_Logger will log data
        ip = "10.47.3.22"
        port = 5432

    [network.tcp-server]
    ip = "10.47.0.39"
    port = 6341

[presets]
default_preset_for_scan = "preset_default"
default_preset_for_logger = "preset_default"
default_preset_for_pid = "beam_steering_mock"

[actuator]
    epsilon_default = 1
    polling_interval_ms = 100  # ms Carefull when using TCP/IP connection as you can saturate the connection with too much polling
    polling_timeout_s = 20  # s
    refresh_timeout_ms = 500  # ms
    timeout = 10000  # default duration in ms to wait for data to be acquirred

[scan]
    scan_in_thread = true
    show_popups = true
    default = "Scan2D"
    Naverage = 1  # minimum is 1
    steps_limit = 1000  # the limit of the number of steps you can set in a given scan
    sort1D = true

    [scan.timeflow]
    wait_time = 0
    wait_time_between = 0
    timeout = 10000  # in millisecond

    [scan.scan1D]
    type = "Linear" # either "Linear", "Adaptive", "Linear back to start", "Random" see pymodaq.utils.scanner.py
    start = 1.0
    stop = 2.0
    step = 0.01
    [scan.scan2D]
    type = "Spiral" # either "Spiral", "Linear", "Adaptive", "Back&Forth", "Random" see pymodaq.utils.scanner.py
        [scan.scan2D.spiral]
        center1 = -5
        center2 = 5
        rmax1 = 10
        rmax2 = 5
        npts = 10
        [scan.scan2D.linear]
        start1 = -5
        start2 = -5
        stop1 = 5
        stop2 = 5
        step1 = 0.5
        step2 = 0.5
    [scan.tabular]
    type = "Linear" #either "Linear", "Adaptive" see pymodaq.utils.scanner.py
    curvilinear = 0.1