import logging
from _typeshed import Incomplete
from typing import Optional, Union
from typing_extensions import Literal

__logger__: logging.getLogger
logger = __logger__

class BinanceWebSocketApiApi:
    manager: Incomplete
    def __init__(self, manager: Incomplete | None = ...) -> None: ...
    def cancel_open_orders(self, process_response: Incomplete | None = ..., return_response: bool = ..., symbol: str = ..., recv_window: int = ..., request_id: str = ..., stream_id: str = ..., stream_label: str = ...) -> bool: ...
    def cancel_order(self, cancel_restrictions: Optional[Literal['ONLY_NEW', 'ONLY_PARTIALLY_FILLED']] = ..., new_client_order_id: str = ..., order_id: int = ..., orig_client_order_id: str = ..., process_response: Incomplete | None = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., symbol: str = ..., stream_label: str = ...) -> bool: ...
    def create_order(self, iceberg_qty: float = ..., new_client_order_id: str = ..., new_order_resp_type: Optional[Literal['ACK', 'RESULT', 'FULL']] = ..., order_type: Optional[Literal['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT', 'TAKE_PROFIT_LIMIT']] = ..., price: float = ..., process_response: Incomplete | None = ..., quantity: float = ..., quote_order_qty: float = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., self_trade_prevention_mode: Optional[Literal['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH', 'NONE']] = ..., side: Optional[Literal['BUY', 'SELL']] = ..., stop_price: float = ..., strategy_id: int = ..., strategy_type: int = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ..., time_in_force: Optional[Literal['GTC', 'IOC', 'FOK']] = ..., test: bool = ..., trailing_delta: int = ...) -> Union[int, bool]: ...
    def create_test_order(self, iceberg_qty: float = ..., new_client_order_id: str = ..., new_order_resp_type: Optional[Literal['ACK', 'RESULT', 'FULL']] = ..., order_type: Optional[Literal['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT', 'TAKE_PROFIT_LIMIT']] = ..., price: float = ..., process_response: Incomplete | None = ..., quantity: float = ..., quote_order_qty: float = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., self_trade_prevention_mode: Optional[Literal['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH', 'NONE']] = ..., side: Optional[Literal['BUY', 'SELL']] = ..., stop_price: float = ..., strategy_id: int = ..., strategy_type: int = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ..., time_in_force: Optional[Literal['GTC', 'IOC', 'FOK']] = ..., trailing_delta: int = ...) -> Union[int, bool]: ...
    def get_account_status(self, process_response: Incomplete | None = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ...) -> bool: ...
    def get_exchange_info(self, permissions: list = ..., process_response: Incomplete | None = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ..., symbols: list = ...) -> bool: ...
    def get_listen_key(self, process_response: Incomplete | None = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ...) -> bool: ...
    def get_open_orders(self, process_response: Incomplete | None = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ...) -> bool: ...
    def get_order(self, order_id: int = ..., orig_client_order_id: str = ..., process_response: Incomplete | None = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ...) -> bool: ...
    def get_order_book(self, process_response: Incomplete | None = ..., limit: int = ..., recv_window: int = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ..., symbol: str = ...) -> bool: ...
    def get_server_time(self, process_response: Incomplete | None = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ...) -> bool: ...
    def ping(self, process_response: Incomplete | None = ..., request_id: str = ..., return_response: bool = ..., stream_id: Incomplete | None = ..., stream_label: str = ...) -> bool: ...
