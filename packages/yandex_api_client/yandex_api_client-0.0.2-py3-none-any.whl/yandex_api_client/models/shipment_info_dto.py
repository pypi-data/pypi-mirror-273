# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.delivery_service_dto import DeliveryServiceDTO
from yandex_api_client.models.shipment_status_type import ShipmentStatusType
from yandex_api_client.models.shipment_type import ShipmentType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ShipmentInfoDTO(BaseModel):
    """
    Список с информацией об отгрузках.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор отгрузки.")
    plan_interval_from: Optional[datetime] = Field(default=None, description="Начало планового интервала отгрузки.", alias="planIntervalFrom")
    plan_interval_to: Optional[datetime] = Field(default=None, description="Конец планового интервала отгрузки.", alias="planIntervalTo")
    shipment_type: Optional[ShipmentType] = Field(default=None, alias="shipmentType")
    external_id: Optional[StrictStr] = Field(default=None, description="Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.", alias="externalId")
    status: Optional[ShipmentStatusType] = None
    status_description: Optional[StrictStr] = Field(default=None, description="Описание статуса отгрузки.", alias="statusDescription")
    delivery_service: Optional[DeliveryServiceDTO] = Field(default=None, alias="deliveryService")
    draft_count: Optional[StrictInt] = Field(default=None, description="Количество заказов, запланированных к отгрузке.", alias="draftCount")
    planned_count: Optional[StrictInt] = Field(default=None, description="Количество отгруженных заказов.", alias="plannedCount")
    fact_count: Optional[StrictInt] = Field(default=None, description="Количество заказов, принятых в сортировочном центре или пункте приема.", alias="factCount")
    __properties: ClassVar[List[str]] = ["id", "planIntervalFrom", "planIntervalTo", "shipmentType", "externalId", "status", "statusDescription", "deliveryService", "draftCount", "plannedCount", "factCount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ShipmentInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_service
        if self.delivery_service:
            _dict['deliveryService'] = self.delivery_service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ShipmentInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "planIntervalFrom": obj.get("planIntervalFrom"),
            "planIntervalTo": obj.get("planIntervalTo"),
            "shipmentType": obj.get("shipmentType"),
            "externalId": obj.get("externalId"),
            "status": obj.get("status"),
            "statusDescription": obj.get("statusDescription"),
            "deliveryService": DeliveryServiceDTO.from_dict(obj.get("deliveryService")) if obj.get("deliveryService") is not None else None,
            "draftCount": obj.get("draftCount"),
            "plannedCount": obj.get("plannedCount"),
            "factCount": obj.get("factCount")
        })
        return _obj


