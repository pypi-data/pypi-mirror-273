# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OutletDeliveryRuleDTO(BaseModel):
    """
    Информация об условиях доставки для данной точки продаж.
    """ # noqa: E501
    min_delivery_days: Optional[StrictInt] = Field(default=None, description="Минимальный срок доставки товаров в точку продаж. Указан в рабочих днях. Минимальное значение: `0` — доставка в день заказа. Максимальное значение: `60`. Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона. Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3. Для доставки в другие регионы: * Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. * Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42. Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`. Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. ", alias="minDeliveryDays")
    max_delivery_days: Optional[StrictInt] = Field(default=None, description="Максимальный срок доставки товаров в точку продаж. Указан в рабочих днях. Минимальное значение: `0` — доставка в день заказа. Максимальное значение: `60`. Допустимые сроки доставки (разница между `minDeliveryDays` и `maxDeliveryDays`) зависят от региона. Для доставки по своему региону разница не должна превышать двух дней. Например, если `minDeliveryDays` равно 1, то для `maxDeliveryDays` допускаются значения от 1 до 3. Для доставки в другие регионы: - Если `minDeliveryDays` до 18 дней, разница не должна превышать четырех дней. Например, если `minDeliveryDays` равно 10, то для `maxDeliveryDays` допускаются значения от 10 до 14. - Если `minDeliveryDays` больше 18 дней, разница должна быть не больше чем в два раза. Например, если `minDeliveryDays` равно 21, то для `maxDeliveryDays` допускаются значения от 21 до 42. Обязательный параметр, если `type=\"DEPOT\"` или `type=\"MIXED\"`. Взаимоисключающий с параметром `unspecifiedDeliveryInterval`. ", alias="maxDeliveryDays")
    delivery_service_id: Optional[StrictInt] = Field(default=None, description="Идентификатор службы доставки товаров в точку продаж. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). ", alias="deliveryServiceId")
    order_before: Optional[Annotated[int, Field(le=24, strict=True, ge=0)]] = Field(default=None, description="Час, до которого покупателю нужно сделать заказ, чтобы он был доставлен в точку продаж в сроки от `minDeliveryDays` до `maxDeliveryDays`. Если покупатель оформит заказ после указанного часа, он будет доставлен в сроки от `minDeliveryDays` + 1 рабочий день до `maxDeliveryDays` + 1 рабочий день. Значение по умолчанию: `24`. ", alias="orderBefore")
    price_free_pickup: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена товара, начиная с которой действует бесплатный самовывоз товара из точки продаж.", alias="priceFreePickup")
    unspecified_delivery_interval: Optional[StrictBool] = Field(default=None, description="Признак доставки товаров в точку продаж на заказ. Признак выставлен, если: * точный срок доставки в точку продаж заранее неизвестен (например, если магазин собирает несколько заказов для отправки в точку или населенный пункт); * все товары изготавливаются или поставляются на заказ. Возможные значения: * `true` — товары доставляются в точку продаж на заказ. Параметр указывается только со значением `true`. Взаимоисключающий с параметрами `minDeliveryDays` и `maxDeliveryDays`. ", alias="unspecifiedDeliveryInterval")
    __properties: ClassVar[List[str]] = ["minDeliveryDays", "maxDeliveryDays", "deliveryServiceId", "orderBefore", "priceFreePickup", "unspecifiedDeliveryInterval"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OutletDeliveryRuleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OutletDeliveryRuleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minDeliveryDays": obj.get("minDeliveryDays"),
            "maxDeliveryDays": obj.get("maxDeliveryDays"),
            "deliveryServiceId": obj.get("deliveryServiceId"),
            "orderBefore": obj.get("orderBefore"),
            "priceFreePickup": obj.get("priceFreePickup"),
            "unspecifiedDeliveryInterval": obj.get("unspecifiedDeliveryInterval")
        })
        return _obj


