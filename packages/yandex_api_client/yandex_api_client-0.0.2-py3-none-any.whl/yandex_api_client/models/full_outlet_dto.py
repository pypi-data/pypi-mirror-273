# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.outlet_address_dto import OutletAddressDTO
from yandex_api_client.models.outlet_delivery_rule_dto import OutletDeliveryRuleDTO
from yandex_api_client.models.outlet_status_type import OutletStatusType
from yandex_api_client.models.outlet_type import OutletType
from yandex_api_client.models.outlet_visibility_type import OutletVisibilityType
from yandex_api_client.models.outlet_working_schedule_dto import OutletWorkingScheduleDTO
from yandex_api_client.models.region_dto import RegionDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FullOutletDTO(BaseModel):
    """
    Информация о точке продаж.
    """ # noqa: E501
    name: StrictStr = Field(description="Название точки продаж. ")
    type: OutletType
    coords: Optional[StrictStr] = Field(default=None, description="Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. ")
    is_main: Optional[StrictBool] = Field(default=None, description="Признак основной точки продаж. Возможные значения: * `false` — неосновная точка продаж. * `true` — основная точка продаж. ", alias="isMain")
    shop_outlet_code: Optional[StrictStr] = Field(default=None, description="Идентификатор точки продаж, присвоенный магазином.", alias="shopOutletCode")
    visibility: Optional[OutletVisibilityType] = None
    address: OutletAddressDTO
    phones: Annotated[List[Annotated[str, Field(min_length=1, strict=True)]], Field(min_length=1)] = Field(description="Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. ")
    working_schedule: OutletWorkingScheduleDTO = Field(alias="workingSchedule")
    delivery_rules: Optional[List[OutletDeliveryRuleDTO]] = Field(default=None, description="Информация об условиях доставки для данной точки продаж. Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. ", alias="deliveryRules")
    storage_period: Optional[StrictInt] = Field(default=None, description="Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.", alias="storagePeriod")
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор точки продаж, присвоенный Яндекс Маркетом.")
    status: Optional[OutletStatusType] = None
    region: Optional[RegionDTO] = None
    shop_outlet_id: Optional[StrictStr] = Field(default=None, description="Идентификатор точки продаж, заданный магазином.", alias="shopOutletId")
    working_time: Optional[StrictStr] = Field(default=None, description="Рабочее время.", alias="workingTime")
    moderation_reason: Optional[StrictStr] = Field(default=None, description="Статус модерации.", alias="moderationReason")
    __properties: ClassVar[List[str]] = ["name", "type", "coords", "isMain", "shopOutletCode", "visibility", "address", "phones", "workingSchedule", "deliveryRules", "storagePeriod", "id", "status", "region", "shopOutletId", "workingTime", "moderationReason"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FullOutletDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of working_schedule
        if self.working_schedule:
            _dict['workingSchedule'] = self.working_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_rules (list)
        _items = []
        if self.delivery_rules:
            for _item in self.delivery_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deliveryRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FullOutletDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "coords": obj.get("coords"),
            "isMain": obj.get("isMain"),
            "shopOutletCode": obj.get("shopOutletCode"),
            "visibility": obj.get("visibility"),
            "address": OutletAddressDTO.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "phones": obj.get("phones"),
            "workingSchedule": OutletWorkingScheduleDTO.from_dict(obj.get("workingSchedule")) if obj.get("workingSchedule") is not None else None,
            "deliveryRules": [OutletDeliveryRuleDTO.from_dict(_item) for _item in obj.get("deliveryRules")] if obj.get("deliveryRules") is not None else None,
            "storagePeriod": obj.get("storagePeriod"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "region": RegionDTO.from_dict(obj.get("region")) if obj.get("region") is not None else None,
            "shopOutletId": obj.get("shopOutletId"),
            "workingTime": obj.get("workingTime"),
            "moderationReason": obj.get("moderationReason")
        })
        return _obj


