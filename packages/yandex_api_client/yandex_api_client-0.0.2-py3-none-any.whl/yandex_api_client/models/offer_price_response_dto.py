# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.offer_price_feed_dto import OfferPriceFeedDTO
from yandex_api_client.models.price_dto import PriceDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OfferPriceResponseDTO(BaseModel):
    """
    Информация об установленной цене на товар.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор предложения из прайс-листа.")
    feed: Optional[OfferPriceFeedDTO] = None
    price: Optional[PriceDTO] = None
    market_sku: Optional[StrictInt] = Field(default=None, description="SKU на Маркете.", alias="marketSku")
    updated_at: Optional[datetime] = Field(default=None, description="Дата и время последнего обновления цены на товар.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "feed", "price", "marketSku", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OfferPriceResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feed
        if self.feed:
            _dict['feed'] = self.feed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OfferPriceResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "feed": OfferPriceFeedDTO.from_dict(obj.get("feed")) if obj.get("feed") is not None else None,
            "price": PriceDTO.from_dict(obj.get("price")) if obj.get("price") is not None else None,
            "marketSku": obj.get("marketSku"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


