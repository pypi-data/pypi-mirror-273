# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from yandex_api_client.models.gps_dto import GpsDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderDeliveryAddressDTO(BaseModel):
    """
    Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="Страна.  Обязательный параметр. ")
    postcode: Optional[StrictStr] = Field(default=None, description="Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). ")
    city: Optional[StrictStr] = Field(default=None, description="Город или населенный пункт.  Обязательный параметр. ")
    district: Optional[StrictStr] = Field(default=None, description="Район.")
    subway: Optional[StrictStr] = Field(default=None, description="Станция метро.")
    street: Optional[StrictStr] = Field(default=None, description="Улица.  Обязательный параметр. ")
    house: Optional[StrictStr] = Field(default=None, description="Дом или владение.  Обязательный параметр. ")
    block: Optional[StrictStr] = Field(default=None, description="Корпус или строение.")
    entrance: Optional[StrictStr] = Field(default=None, description="Подъезд.")
    entryphone: Optional[StrictStr] = Field(default=None, description="Код домофона.")
    floor: Optional[StrictStr] = Field(default=None, description="Этаж.")
    apartment: Optional[StrictStr] = Field(default=None, description="Квартира или офис.")
    phone: Optional[StrictStr] = Field(default=None, description="Телефон получателя заказа.  Обязательный параметр. ")
    recipient: Optional[StrictStr] = Field(default=None, description="Фамилия, имя и отчество получателя заказа.  Обязательный параметр. ")
    gps: Optional[GpsDTO] = None
    __properties: ClassVar[List[str]] = ["country", "postcode", "city", "district", "subway", "street", "house", "block", "entrance", "entryphone", "floor", "apartment", "phone", "recipient", "gps"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderDeliveryAddressDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gps
        if self.gps:
            _dict['gps'] = self.gps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderDeliveryAddressDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "postcode": obj.get("postcode"),
            "city": obj.get("city"),
            "district": obj.get("district"),
            "subway": obj.get("subway"),
            "street": obj.get("street"),
            "house": obj.get("house"),
            "block": obj.get("block"),
            "entrance": obj.get("entrance"),
            "entryphone": obj.get("entryphone"),
            "floor": obj.get("floor"),
            "apartment": obj.get("apartment"),
            "phone": obj.get("phone"),
            "recipient": obj.get("recipient"),
            "gps": GpsDTO.from_dict(obj.get("gps")) if obj.get("gps") is not None else None
        })
        return _obj


