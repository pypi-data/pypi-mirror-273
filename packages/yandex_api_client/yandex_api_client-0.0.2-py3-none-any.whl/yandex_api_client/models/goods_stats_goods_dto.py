# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.goods_stats_warehouse_dto import GoodsStatsWarehouseDTO
from yandex_api_client.models.goods_stats_weight_dimensions_dto import GoodsStatsWeightDimensionsDTO
from yandex_api_client.models.tariff_dto import TariffDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GoodsStatsGoodsDTO(BaseModel):
    """
    Информация о товаре.
    """ # noqa: E501
    shop_sku: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="shopSku")
    market_sku: Optional[StrictInt] = Field(default=None, description="SKU на Маркете.", alias="marketSku")
    name: Optional[StrictStr] = Field(default=None, description="Название товара.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена на товар, выставленная партнером.")
    category_id: Optional[StrictInt] = Field(default=None, description="Идентификатор категории товара на Маркете.", alias="categoryId")
    category_name: Optional[StrictStr] = Field(default=None, description="Название категории товара на Маркете.", alias="categoryName")
    weight_dimensions: Optional[GoodsStatsWeightDimensionsDTO] = Field(default=None, alias="weightDimensions")
    warehouses: Optional[List[GoodsStatsWarehouseDTO]] = Field(default=None, description="Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. ")
    tariffs: Optional[List[TariffDTO]] = Field(default=None, description="Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). ")
    pictures: Optional[List[StrictStr]] = Field(default=None, description="Ссылки (URL) изображений товара в хорошем качестве.")
    __properties: ClassVar[List[str]] = ["shopSku", "marketSku", "name", "price", "categoryId", "categoryName", "weightDimensions", "warehouses", "tariffs", "pictures"]

    @field_validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GoodsStatsGoodsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of weight_dimensions
        if self.weight_dimensions:
            _dict['weightDimensions'] = self.weight_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warehouses (list)
        _items = []
        if self.warehouses:
            for _item in self.warehouses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warehouses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tariffs (list)
        _items = []
        if self.tariffs:
            for _item in self.tariffs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tariffs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GoodsStatsGoodsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shopSku": obj.get("shopSku"),
            "marketSku": obj.get("marketSku"),
            "name": obj.get("name"),
            "price": obj.get("price"),
            "categoryId": obj.get("categoryId"),
            "categoryName": obj.get("categoryName"),
            "weightDimensions": GoodsStatsWeightDimensionsDTO.from_dict(obj.get("weightDimensions")) if obj.get("weightDimensions") is not None else None,
            "warehouses": [GoodsStatsWarehouseDTO.from_dict(_item) for _item in obj.get("warehouses")] if obj.get("warehouses") is not None else None,
            "tariffs": [TariffDTO.from_dict(_item) for _item in obj.get("tariffs")] if obj.get("tariffs") is not None else None,
            "pictures": obj.get("pictures")
        })
        return _obj


