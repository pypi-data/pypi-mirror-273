# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.feedback_comment_author_dto import FeedbackCommentAuthorDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FeedbackCommentDTO(BaseModel):
    """
    Комментарий к отзыву на магазин.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор ответа.")
    parent_id: Optional[StrictInt] = Field(default=None, description="Идентификатор родительского ответа.", alias="parentId")
    body: Optional[StrictStr] = Field(default=None, description="Текст ответа.")
    created_at: Optional[datetime] = Field(default=None, description="Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. ", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. ", alias="updatedAt")
    author: Optional[FeedbackCommentAuthorDTO] = None
    children: Optional[List[FeedbackCommentDTO]] = Field(default=None, description="Дочерние ответы.")
    __properties: ClassVar[List[str]] = ["id", "parentId", "body", "createdAt", "updatedAt", "author", "children"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FeedbackCommentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FeedbackCommentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parentId": obj.get("parentId"),
            "body": obj.get("body"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "author": FeedbackCommentAuthorDTO.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "children": [FeedbackCommentDTO.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
FeedbackCommentDTO.model_rebuild(raise_errors=False)

