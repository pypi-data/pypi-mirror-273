# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.day_of_week_type import DayOfWeekType
from yandex_api_client.models.offer_availability_status_type import OfferAvailabilityStatusType
from yandex_api_client.models.offer_processing_state_dto import OfferProcessingStateDTO
from yandex_api_client.models.offer_weight_dimensions_dto import OfferWeightDimensionsDTO
from yandex_api_client.models.time_period_dto import TimePeriodDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateMappingsOfferDTO(BaseModel):
    """
    Информация о товарах в каталоге.
    """ # noqa: E501
    name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ")
    shop_sku: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="shopSku")
    category: Optional[StrictStr] = Field(default=None, description="Категория, к которой магазин относит свой товар. Она помогает точнее определить для товара категорию в каталоге Маркета.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**. ")
    vendor: Optional[StrictStr] = Field(default=None, description="Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.")
    vendor_code: Optional[StrictStr] = Field(default=None, description="Артикул товара от производителя.", alias="vendorCode")
    description: Optional[Annotated[str, Field(strict=True, max_length=6000)]] = Field(default=None, description="Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ")
    id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    feed_id: Optional[StrictInt] = Field(default=None, description="Идентификатор фида.", alias="feedId")
    barcodes: Optional[List[StrictStr]] = Field(default=None, description="Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ")
    urls: Optional[List[StrictStr]] = Field(default=None, description="URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. ")
    pictures: Optional[List[StrictStr]] = Field(default=None, description="Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 10 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. ")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. ")
    manufacturer_countries: Optional[List[StrictStr]] = Field(default=None, description="Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. ", alias="manufacturerCountries")
    min_shipment: Optional[StrictInt] = Field(default=None, description="Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. ", alias="minShipment")
    transport_unit_size: Optional[StrictInt] = Field(default=None, description="Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. ", alias="transportUnitSize")
    quantum_of_supply: Optional[StrictInt] = Field(default=None, description="Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. ", alias="quantumOfSupply")
    delivery_duration_days: Optional[StrictInt] = Field(default=None, description="Срок, за который продавец поставляет товары на склад, в днях.", alias="deliveryDurationDays")
    box_count: Optional[StrictInt] = Field(default=None, description="Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. ", alias="boxCount")
    customs_commodity_codes: Optional[List[StrictStr]] = Field(default=None, description="Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. ", alias="customsCommodityCodes")
    weight_dimensions: Optional[OfferWeightDimensionsDTO] = Field(default=None, alias="weightDimensions")
    supply_schedule_days: Optional[List[DayOfWeekType]] = Field(default=None, description="Дни недели, в которые продавец поставляет товары на склад.", alias="supplyScheduleDays")
    shelf_life_days: Optional[StrictInt] = Field(default=None, description="{% note alert %}  Параметр устарел и не рекомендуется к использованию. Вместо него используйте параметр `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. ", alias="shelfLifeDays")
    life_time_days: Optional[StrictInt] = Field(default=None, description="{% note alert %}  Параметр устарел и не рекомендуется к использованию. Вместо него используйте параметр `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. ", alias="lifeTimeDays")
    guarantee_period_days: Optional[StrictInt] = Field(default=None, description="Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. ", alias="guaranteePeriodDays")
    processing_state: Optional[OfferProcessingStateDTO] = Field(default=None, alias="processingState")
    availability: Optional[OfferAvailabilityStatusType] = None
    shelf_life: Optional[TimePeriodDTO] = Field(default=None, alias="shelfLife")
    life_time: Optional[TimePeriodDTO] = Field(default=None, alias="lifeTime")
    guarantee_period: Optional[TimePeriodDTO] = Field(default=None, alias="guaranteePeriod")
    certificate: Optional[StrictStr] = Field(default=None, description="Номер документа на товар.  Перед указанием номера документ нужно загрузить в личном кабинете магазина. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) ")
    __properties: ClassVar[List[str]] = ["name", "shopSku", "category", "vendor", "vendorCode", "description", "id", "feedId", "barcodes", "urls", "pictures", "manufacturer", "manufacturerCountries", "minShipment", "transportUnitSize", "quantumOfSupply", "deliveryDurationDays", "boxCount", "customsCommodityCodes", "weightDimensions", "supplyScheduleDays", "shelfLifeDays", "lifeTimeDays", "guaranteePeriodDays", "processingState", "availability", "shelfLife", "lifeTime", "guaranteePeriod", "certificate"]

    @field_validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateMappingsOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of weight_dimensions
        if self.weight_dimensions:
            _dict['weightDimensions'] = self.weight_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_state
        if self.processing_state:
            _dict['processingState'] = self.processing_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shelf_life
        if self.shelf_life:
            _dict['shelfLife'] = self.shelf_life.to_dict()
        # override the default output from pydantic by calling `to_dict()` of life_time
        if self.life_time:
            _dict['lifeTime'] = self.life_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee_period
        if self.guarantee_period:
            _dict['guaranteePeriod'] = self.guarantee_period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateMappingsOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "shopSku": obj.get("shopSku"),
            "category": obj.get("category"),
            "vendor": obj.get("vendor"),
            "vendorCode": obj.get("vendorCode"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "feedId": obj.get("feedId"),
            "barcodes": obj.get("barcodes"),
            "urls": obj.get("urls"),
            "pictures": obj.get("pictures"),
            "manufacturer": obj.get("manufacturer"),
            "manufacturerCountries": obj.get("manufacturerCountries"),
            "minShipment": obj.get("minShipment"),
            "transportUnitSize": obj.get("transportUnitSize"),
            "quantumOfSupply": obj.get("quantumOfSupply"),
            "deliveryDurationDays": obj.get("deliveryDurationDays"),
            "boxCount": obj.get("boxCount"),
            "customsCommodityCodes": obj.get("customsCommodityCodes"),
            "weightDimensions": OfferWeightDimensionsDTO.from_dict(obj.get("weightDimensions")) if obj.get("weightDimensions") is not None else None,
            "supplyScheduleDays": obj.get("supplyScheduleDays"),
            "shelfLifeDays": obj.get("shelfLifeDays"),
            "lifeTimeDays": obj.get("lifeTimeDays"),
            "guaranteePeriodDays": obj.get("guaranteePeriodDays"),
            "processingState": OfferProcessingStateDTO.from_dict(obj.get("processingState")) if obj.get("processingState") is not None else None,
            "availability": obj.get("availability"),
            "shelfLife": TimePeriodDTO.from_dict(obj.get("shelfLife")) if obj.get("shelfLife") is not None else None,
            "lifeTime": TimePeriodDTO.from_dict(obj.get("lifeTime")) if obj.get("lifeTime") is not None else None,
            "guaranteePeriod": TimePeriodDTO.from_dict(obj.get("guaranteePeriod")) if obj.get("guaranteePeriod") is not None else None,
            "certificate": obj.get("certificate")
        })
        return _obj


