# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ModelOfferDTO(BaseModel):
    """
    Информация о предложении.
    """ # noqa: E501
    discount: Optional[StrictInt] = Field(default=None, description="Скидка на предложение, в %.")
    name: Optional[StrictStr] = Field(default=None, description="Наименование предложения.")
    pos: Optional[StrictInt] = Field(default=None, description="Позиция предложения в выдаче Маркета на карточке модели.")
    pre_discount_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения без скидки магазина.", alias="preDiscountPrice")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.")
    region_id: Optional[StrictInt] = Field(default=None, description="Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них. ", alias="regionId")
    shipping_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость доставки товара в регион.  Если значение параметра — `0`, доставка осуществляется бесплатно. Если значение параметра — `-1`, магазин не осуществляет доставку этого товара (самовывоз). Если стоимость доставки неизвестна, параметр не выводится. ", alias="shippingCost")
    shop_name: Optional[StrictStr] = Field(default=None, description="Название магазина (в том виде, в котором отображается на Маркете).", alias="shopName")
    shop_rating: Optional[StrictInt] = Field(default=None, description="Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`. ", alias="shopRating")
    in_stock: Optional[StrictInt] = Field(default=None, description="{% note alert %}  Параметр устарел и не рекомендуется к использованию.  {% endnote %} ", alias="inStock")
    __properties: ClassVar[List[str]] = ["discount", "name", "pos", "preDiscountPrice", "price", "regionId", "shippingCost", "shopName", "shopRating", "inStock"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ModelOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ModelOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discount": obj.get("discount"),
            "name": obj.get("name"),
            "pos": obj.get("pos"),
            "preDiscountPrice": obj.get("preDiscountPrice"),
            "price": obj.get("price"),
            "regionId": obj.get("regionId"),
            "shippingCost": obj.get("shippingCost"),
            "shopName": obj.get("shopName"),
            "shopRating": obj.get("shopRating"),
            "inStock": obj.get("inStock")
        })
        return _obj


