# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.currency_type import CurrencyType
from yandex_api_client.models.order_buyer_dto import OrderBuyerDTO
from yandex_api_client.models.order_delivery_dto import OrderDeliveryDTO
from yandex_api_client.models.order_item_dto import OrderItemDTO
from yandex_api_client.models.order_item_subsidy_dto import OrderItemSubsidyDTO
from yandex_api_client.models.order_payment_method_type import OrderPaymentMethodType
from yandex_api_client.models.order_payment_type import OrderPaymentType
from yandex_api_client.models.order_status_type import OrderStatusType
from yandex_api_client.models.order_substatus_type import OrderSubstatusType
from yandex_api_client.models.order_tax_system_type import OrderTaxSystemType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderDTO(BaseModel):
    """
    Заказ.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор заказа.")
    status: Optional[OrderStatusType] = None
    substatus: Optional[OrderSubstatusType] = None
    creation_date: Optional[StrictStr] = Field(default=None, alias="creationDate")
    currency: Optional[CurrencyType] = None
    items_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Общая сумма заказа в валюте заказа без учета стоимости доставки и вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidyTotal`).  Для отделения целой части от дробной используется точка. ", alias="itemsTotal")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Чтобы узнать соответствующее значение, сложите значения `itemsTotal` и `deliveryTotal`.  {% endnote %}  Общая сумма заказа в валюте заказа с учетом стоимости доставки, но без учета вознаграждения партнеру за скидки по промокодам, купонам, кешбэку и акциям (параметр `subsidyTotal`).  Для отделения целой части от дробной используется точка. ")
    delivery_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость доставки в валюте заказа.  Для отделения целой части от дробной используется точка. ", alias="deliveryTotal")
    subsidy_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Чтобы узнать соответствующее значение, сложите значения всех субсидий в `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте, указанной в параметре `currency`.  Для отделения целой части от дробной используется точка. ", alias="subsidyTotal")
    total_with_subsidy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Чтобы узнать соответствующее значение, сложите значения `itemsTotal`, `deliveryTotal` и всех субсидий в `subsidies`.  {% endnote %}  Сумма стоимости всех товаров в заказе и вознаграждения за них в валюте магазина (сумма параметров `total` и `subsidyTotal`). ", alias="totalWithSubsidy")
    buyer_items_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.", alias="buyerItemsTotal")
    buyer_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.", alias="buyerTotal")
    buyer_items_total_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость всех товаров в заказе в валюте покупателя до применения скидок и без учета стоимости доставки.", alias="buyerItemsTotalBeforeDiscount")
    buyer_total_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки.", alias="buyerTotalBeforeDiscount")
    payment_type: Optional[OrderPaymentType] = Field(default=None, alias="paymentType")
    payment_method: Optional[OrderPaymentMethodType] = Field(default=None, alias="paymentMethod")
    fake: Optional[StrictBool] = Field(default=None, description="Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ")
    items: Optional[List[OrderItemDTO]] = Field(default=None, description="Список товаров в заказе.")
    subsidies: Optional[List[OrderItemSubsidyDTO]] = Field(default=None, description="Список субсидий по типам.")
    delivery: Optional[OrderDeliveryDTO] = None
    buyer: Optional[OrderBuyerDTO] = None
    notes: Optional[StrictStr] = Field(default=None, description="Комментарий к заказу.")
    tax_system: Optional[OrderTaxSystemType] = Field(default=None, alias="taxSystem")
    cancel_requested: Optional[StrictBool] = Field(default=None, description="**Только для модели DBS**  Запрошена ли отмена. ", alias="cancelRequested")
    expiry_date: Optional[StrictStr] = Field(default=None, alias="expiryDate")
    __properties: ClassVar[List[str]] = ["id", "status", "substatus", "creationDate", "currency", "itemsTotal", "total", "deliveryTotal", "subsidyTotal", "totalWithSubsidy", "buyerItemsTotal", "buyerTotal", "buyerItemsTotalBeforeDiscount", "buyerTotalBeforeDiscount", "paymentType", "paymentMethod", "fake", "items", "subsidies", "delivery", "buyer", "notes", "taxSystem", "cancelRequested", "expiryDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subsidies (list)
        _items = []
        if self.subsidies:
            for _item in self.subsidies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subsidies'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery
        if self.delivery:
            _dict['delivery'] = self.delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['buyer'] = self.buyer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "substatus": obj.get("substatus"),
            "creationDate": obj.get("creationDate"),
            "currency": obj.get("currency"),
            "itemsTotal": obj.get("itemsTotal"),
            "total": obj.get("total"),
            "deliveryTotal": obj.get("deliveryTotal"),
            "subsidyTotal": obj.get("subsidyTotal"),
            "totalWithSubsidy": obj.get("totalWithSubsidy"),
            "buyerItemsTotal": obj.get("buyerItemsTotal"),
            "buyerTotal": obj.get("buyerTotal"),
            "buyerItemsTotalBeforeDiscount": obj.get("buyerItemsTotalBeforeDiscount"),
            "buyerTotalBeforeDiscount": obj.get("buyerTotalBeforeDiscount"),
            "paymentType": obj.get("paymentType"),
            "paymentMethod": obj.get("paymentMethod"),
            "fake": obj.get("fake"),
            "items": [OrderItemDTO.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "subsidies": [OrderItemSubsidyDTO.from_dict(_item) for _item in obj.get("subsidies")] if obj.get("subsidies") is not None else None,
            "delivery": OrderDeliveryDTO.from_dict(obj.get("delivery")) if obj.get("delivery") is not None else None,
            "buyer": OrderBuyerDTO.from_dict(obj.get("buyer")) if obj.get("buyer") is not None else None,
            "notes": obj.get("notes"),
            "taxSystem": obj.get("taxSystem"),
            "cancelRequested": obj.get("cancelRequested"),
            "expiryDate": obj.get("expiryDate")
        })
        return _obj


