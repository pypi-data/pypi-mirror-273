# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.order_status_type import OrderStatusType
from yandex_api_client.models.order_substatus_type import OrderSubstatusType
from yandex_api_client.models.order_update_status_type import OrderUpdateStatusType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateOrderStatusDTO(BaseModel):
    """
    Список заказов.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор заказа.")
    status: Optional[OrderStatusType] = None
    substatus: Optional[OrderSubstatusType] = None
    update_status: Optional[OrderUpdateStatusType] = Field(default=None, alias="updateStatus")
    error_details: Optional[StrictStr] = Field(default=None, description="Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр `updateStatus` принимает значение `ERROR`. ", alias="errorDetails")
    __properties: ClassVar[List[str]] = ["id", "status", "substatus", "updateStatus", "errorDetails"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateOrderStatusDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateOrderStatusDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "substatus": obj.get("substatus"),
            "updateStatus": obj.get("updateStatus"),
            "errorDetails": obj.get("errorDetails")
        })
        return _obj


