# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class OrderPromoType(str, Enum):
    """
    Тип скидки:  * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет. * `BLUE_FLASH` — флеш-акция. * `MARKET_COUPON` — скидка по промокоду от Маркета. * `MARKET_PROMOCODE` — скидка по промокоду магазина. * `MARKET_DEAL` — скидка в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером. * `MARKET_COIN` — скидка по купонам. * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок. * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета. 
    """

    """
    allowed enum values
    """
    DIRECT_DISCOUNT = 'DIRECT_DISCOUNT'
    BLUE_SET = 'BLUE_SET'
    BLUE_FLASH = 'BLUE_FLASH'
    GENERIC_BUNDLE = 'GENERIC_BUNDLE'
    MARKET_COUPON = 'MARKET_COUPON'
    MARKET_PROMOCODE = 'MARKET_PROMOCODE'
    MARKET_DEAL = 'MARKET_DEAL'
    MARKET_BLUE = 'MARKET_BLUE'
    MARKET_PRIME = 'MARKET_PRIME'
    YANDEX_PLUS = 'YANDEX_PLUS'
    BERU_PLUS = 'BERU_PLUS'
    MARKET_COIN = 'MARKET_COIN'
    YANDEX_EMPLOYEE = 'YANDEX_EMPLOYEE'
    LIMITED_FREE_DELIVERY_PROMO = 'LIMITED_FREE_DELIVERY_PROMO'
    FREE_DELIVERY_THRESHOLD = 'FREE_DELIVERY_THRESHOLD'
    MULTICART_DISCOUNT = 'MULTICART_DISCOUNT'
    PRICE_DROP_AS_YOU_SHOP = 'PRICE_DROP_AS_YOU_SHOP'
    FREE_DELIVERY_FOR_LDI = 'FREE_DELIVERY_FOR_LDI'
    FREE_DELIVERY_FOR_LSC = 'FREE_DELIVERY_FOR_LSC'
    SECRET_SALE = 'SECRET_SALE'
    FREE_PICKUP = 'FREE_PICKUP'
    CHEAPEST_AS_GIFT = 'CHEAPEST_AS_GIFT'
    CASHBACK = 'CASHBACK'
    SUPPLIER_MULTICART_DISCOUNT = 'SUPPLIER_MULTICART_DISCOUNT'
    SPREAD_DISCOUNT_COUNT = 'SPREAD_DISCOUNT_COUNT'
    SPREAD_DISCOUNT_RECEIPT = 'SPREAD_DISCOUNT_RECEIPT'
    ANNOUNCEMENT_PROMO = 'ANNOUNCEMENT_PROMO'
    DISCOUNT_BY_PAYMENT_TYPE = 'DISCOUNT_BY_PAYMENT_TYPE'
    PERCENT_DISCOUNT = 'PERCENT_DISCOUNT'
    DCO_EXTRA_DISCOUNT = 'DCO_EXTRA_DISCOUNT'
    EMPTY_PROMO = 'EMPTY_PROMO'
    BLOCKING_PROMO = 'BLOCKING_PROMO'
    UNKNOWN = 'UNKNOWN'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderPromoType from a JSON string"""
        return cls(json.loads(json_str))


