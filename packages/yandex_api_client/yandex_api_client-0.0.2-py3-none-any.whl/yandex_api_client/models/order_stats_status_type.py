# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class OrderStatsStatusType(str, Enum):
    """
    Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки;  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки;  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки;  * `DELIVERY` — заказ передан службе доставки;  * `DELIVERED` — заказ доставлен;  * `PARTIALLY_DELIVERED` — заказ частично доставлен;  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем;  * `PICKUP` — заказ доставлен в пункт выдачи;      * Значение по умолчанию: `PICKUP_SERVICE_RECEIVED`;      * `PICKUP_USER_RECEIVED` – покупатель получил заказ.  * `PROCESSING` — заказ в обработке;  * `RETURNED` — заказ полностью возвращен покупателем;  * `LOST` — заказ утерян;  * `UNKNOWN` — неизвестный статус заказа. 
    """

    """
    allowed enum values
    """
    CANCELLED_BEFORE_PROCESSING = 'CANCELLED_BEFORE_PROCESSING'
    CANCELLED_IN_DELIVERY = 'CANCELLED_IN_DELIVERY'
    CANCELLED_IN_PROCESSING = 'CANCELLED_IN_PROCESSING'
    DELIVERY = 'DELIVERY'
    DELIVERED = 'DELIVERED'
    PARTIALLY_DELIVERED = 'PARTIALLY_DELIVERED'
    PARTIALLY_RETURNED = 'PARTIALLY_RETURNED'
    PENDING = 'PENDING'
    PICKUP = 'PICKUP'
    PROCESSING = 'PROCESSING'
    RESERVED = 'RESERVED'
    RETURNED = 'RETURNED'
    UNKNOWN = 'UNKNOWN'
    UNPAID = 'UNPAID'
    LOST = 'LOST'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderStatsStatusType from a JSON string"""
        return cls(json.loads(json_str))


