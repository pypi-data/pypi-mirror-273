# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class OrderPaymentMethodType(str, Enum):
    """
    Способ оплаты заказа.  Возможные значения, если выбрана оплата при оформлении заказа (`\"paymentType\": \"PREPAID\"`):  * `YANDEX` — банковской картой.  * `APPLE_PAY` — Apple Pay.  * `GOOGLE_PAY` — Google Pay.  * `CREDIT` — в кредит.  * `TINKOFF_CREDIT` — в кредит в Тинькофф Банке.  * `TINKOFF_INSTALLMENTS` — рассрочка в Тинькофф Банке.  * `EXTERNAL_CERTIFICATE` — подарочным сертификатом (например, из приложения «Сбербанк Онлайн»).  * `SBP` — через систему быстрых платежей.  * `B2B_ACCOUNT_PREPAYMENT` — заказ оплачивает организация.   Возможные значения, если выбрана оплата при получении заказа (`\"paymentType\": \"POSTPAID\"`):  * `CARD_ON_DELIVERY` — банковской картой.  * `CASH_ON_DELIVERY` — наличными.  * `B2B_ACCOUNT_POSTPAYMENT` — заказ оплачивает организация после доставки.  Значение по умолчанию: `CASH_ON_DELIVERY`. 
    """

    """
    allowed enum values
    """
    SHOP_PREPAID = 'SHOP_PREPAID'
    BANK_CARD = 'BANK_CARD'
    YANDEX_MONEY = 'YANDEX_MONEY'
    CASH_ON_DELIVERY = 'CASH_ON_DELIVERY'
    CARD_ON_DELIVERY = 'CARD_ON_DELIVERY'
    YANDEX = 'YANDEX'
    APPLE_PAY = 'APPLE_PAY'
    EXTERNAL_CERTIFICATE = 'EXTERNAL_CERTIFICATE'
    CREDIT = 'CREDIT'
    INSTALLMENT = 'INSTALLMENT'
    GOOGLE_PAY = 'GOOGLE_PAY'
    TINKOFF_CREDIT = 'TINKOFF_CREDIT'
    SBP = 'SBP'
    TINKOFF_INSTALLMENTS = 'TINKOFF_INSTALLMENTS'
    B2_B_ACCOUNT_PREPAYMENT = 'B2B_ACCOUNT_PREPAYMENT'
    B2_B_ACCOUNT_POSTPAYMENT = 'B2B_ACCOUNT_POSTPAYMENT'
    UNKNOWN = 'UNKNOWN'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderPaymentMethodType from a JSON string"""
        return cls(json.loads(json_str))


