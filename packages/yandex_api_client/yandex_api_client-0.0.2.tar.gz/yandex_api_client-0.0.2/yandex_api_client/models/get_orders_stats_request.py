# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from yandex_api_client.models.order_stats_status_type import OrderStatsStatusType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetOrdersStatsRequest(BaseModel):
    """
    Запрос информации по заказам.
    """ # noqa: E501
    date_from: Optional[date] = Field(default=None, description="Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. ", alias="dateFrom")
    date_to: Optional[date] = Field(default=None, description="Конечная дата, когда заказ был сформирован. Формат даты: `ГГГГ‑ММ‑ДД`. Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. ", alias="dateTo")
    update_from: Optional[date] = Field(default=None, description="Начальная дата периода, за который были изменения статуса заказа. Формат даты: `ГГГГ‑ММ‑ДД`. Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. ", alias="updateFrom")
    update_to: Optional[date] = Field(default=None, description="Конечная дата периода, за который были изменения статуса заказа. Формат даты: `ГГГГ‑ММ‑ДД`. Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. ", alias="updateTo")
    orders: Optional[List[StrictInt]] = Field(default=None, description="Список идентификаторов заказов.")
    statuses: Optional[List[OrderStatsStatusType]] = Field(default=None, description="Список статусов заказов.")
    has_cis: Optional[StrictBool] = Field(default=None, description="Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации из системы «Честный ЗНАК»: `true` — да. `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. ", alias="hasCis")
    __properties: ClassVar[List[str]] = ["dateFrom", "dateTo", "updateFrom", "updateTo", "orders", "statuses", "hasCis"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetOrdersStatsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetOrdersStatsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateFrom": obj.get("dateFrom"),
            "dateTo": obj.get("dateTo"),
            "updateFrom": obj.get("updateFrom"),
            "updateTo": obj.get("updateTo"),
            "orders": obj.get("orders"),
            "statuses": obj.get("statuses"),
            "hasCis": obj.get("hasCis")
        })
        return _obj


