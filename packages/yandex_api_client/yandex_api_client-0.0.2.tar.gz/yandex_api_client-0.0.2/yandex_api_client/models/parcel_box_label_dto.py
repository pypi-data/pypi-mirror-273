# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ParcelBoxLabelDTO(BaseModel):
    """
    Информация о ярлыке для коробки.
    """ # noqa: E501
    url: StrictStr = Field(description="Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). ")
    supplier_name: StrictStr = Field(description="Юридическое название магазина.", alias="supplierName")
    delivery_service_name: StrictStr = Field(description="Юридическое название службы доставки.", alias="deliveryServiceName")
    order_id: StrictInt = Field(description="Идентификатор заказа в системе Маркета.", alias="orderId")
    order_num: StrictStr = Field(description="Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. ", alias="orderNum")
    recipient_name: StrictStr = Field(description="Фамилия и инициалы получателя заказа.", alias="recipientName")
    box_id: StrictInt = Field(description="Идентификатор коробки.", alias="boxId")
    fulfilment_id: StrictStr = Field(description="Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. ", alias="fulfilmentId")
    place: StrictStr = Field(description="Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. ")
    weight: StrictStr = Field(description="Устаревший параметр.  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. ")
    delivery_service_id: StrictStr = Field(description="Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).", alias="deliveryServiceId")
    delivery_address: Optional[StrictStr] = Field(default=None, description="Адрес получателя.", alias="deliveryAddress")
    shipment_date: Optional[StrictStr] = Field(default=None, description="Дата отгрузки в формате `dd.MM.yyyy`.", alias="shipmentDate")
    __properties: ClassVar[List[str]] = ["url", "supplierName", "deliveryServiceName", "orderId", "orderNum", "recipientName", "boxId", "fulfilmentId", "place", "weight", "deliveryServiceId", "deliveryAddress", "shipmentDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ParcelBoxLabelDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ParcelBoxLabelDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "supplierName": obj.get("supplierName"),
            "deliveryServiceName": obj.get("deliveryServiceName"),
            "orderId": obj.get("orderId"),
            "orderNum": obj.get("orderNum"),
            "recipientName": obj.get("recipientName"),
            "boxId": obj.get("boxId"),
            "fulfilmentId": obj.get("fulfilmentId"),
            "place": obj.get("place"),
            "weight": obj.get("weight"),
            "deliveryServiceId": obj.get("deliveryServiceId"),
            "deliveryAddress": obj.get("deliveryAddress"),
            "shipmentDate": obj.get("shipmentDate")
        })
        return _obj


