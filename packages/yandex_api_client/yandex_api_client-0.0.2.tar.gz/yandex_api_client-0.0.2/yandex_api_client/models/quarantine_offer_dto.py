# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.base_price_dto import BasePriceDTO
from yandex_api_client.models.price_quarantine_verdict_dto import PriceQuarantineVerdictDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class QuarantineOfferDTO(BaseModel):
    """
    Товар в карантине.
    """ # noqa: E501
    offer_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="offerId")
    current_price: Optional[BasePriceDTO] = Field(default=None, alias="currentPrice")
    last_valid_price: Optional[BasePriceDTO] = Field(default=None, alias="lastValidPrice")
    verdicts: Optional[List[PriceQuarantineVerdictDTO]] = Field(default=None, description="Причины попадания товара в карантин.")
    __properties: ClassVar[List[str]] = ["offerId", "currentPrice", "lastValidPrice", "verdicts"]

    @field_validator('offer_id')
    def offer_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of QuarantineOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_price
        if self.current_price:
            _dict['currentPrice'] = self.current_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_valid_price
        if self.last_valid_price:
            _dict['lastValidPrice'] = self.last_valid_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in verdicts (list)
        _items = []
        if self.verdicts:
            for _item in self.verdicts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['verdicts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of QuarantineOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offerId": obj.get("offerId"),
            "currentPrice": BasePriceDTO.from_dict(obj.get("currentPrice")) if obj.get("currentPrice") is not None else None,
            "lastValidPrice": BasePriceDTO.from_dict(obj.get("lastValidPrice")) if obj.get("lastValidPrice") is not None else None,
            "verdicts": [PriceQuarantineVerdictDTO.from_dict(_item) for _item in obj.get("verdicts")] if obj.get("verdicts") is not None else None
        })
        return _obj


