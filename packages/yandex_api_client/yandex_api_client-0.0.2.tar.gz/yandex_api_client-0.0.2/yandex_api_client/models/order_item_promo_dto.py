# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.order_promo_type import OrderPromoType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderItemPromoDTO(BaseModel):
    """
    Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    """ # noqa: E501
    type: OrderPromoType
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Размер пользовательской скидки в валюте покупателя. ")
    subsidy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа, для отделения целой части от дробной используется точка. ")
    shop_promo_id: Optional[StrictStr] = Field(default=None, description="Идентификатор акции поставщика. ", alias="shopPromoId")
    market_promo_id: Optional[StrictStr] = Field(default=None, description="Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. ", alias="marketPromoId")
    __properties: ClassVar[List[str]] = ["type", "discount", "subsidy", "shopPromoId", "marketPromoId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderItemPromoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderItemPromoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "discount": obj.get("discount"),
            "subsidy": obj.get("subsidy"),
            "shopPromoId": obj.get("shopPromoId"),
            "marketPromoId": obj.get("marketPromoId")
        })
        return _obj


