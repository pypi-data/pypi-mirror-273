# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.campaign_settings_local_region_dto import CampaignSettingsLocalRegionDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CampaignSettingsDTO(BaseModel):
    """
    Настройки магазина.
    """ # noqa: E501
    country_region: Optional[StrictInt] = Field(default=None, description="Идентификатор региона, в котором находится магазин.", alias="countryRegion")
    shop_name: Optional[StrictStr] = Field(default=None, description="Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. ", alias="shopName")
    show_in_context: Optional[StrictBool] = Field(default=None, description="Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. ", alias="showInContext")
    show_in_premium: Optional[StrictBool] = Field(default=None, description="Признак показа предложений магазина в рекламном блоке над результатами поиска (Спецразмещение). Возможные значения: * `false` — предложения не показываются в блоке Спецразмещения. * `true` — предложения показываются в блоке Спецразмещения. ", alias="showInPremium")
    use_open_stat: Optional[StrictBool] = Field(default=None, description="Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. ", alias="useOpenStat")
    local_region: Optional[CampaignSettingsLocalRegionDTO] = Field(default=None, alias="localRegion")
    __properties: ClassVar[List[str]] = ["countryRegion", "shopName", "showInContext", "showInPremium", "useOpenStat", "localRegion"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CampaignSettingsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_region
        if self.local_region:
            _dict['localRegion'] = self.local_region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CampaignSettingsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryRegion": obj.get("countryRegion"),
            "shopName": obj.get("shopName"),
            "showInContext": obj.get("showInContext"),
            "showInPremium": obj.get("showInPremium"),
            "useOpenStat": obj.get("useOpenStat"),
            "localRegion": CampaignSettingsLocalRegionDTO.from_dict(obj.get("localRegion")) if obj.get("localRegion") is not None else None
        })
        return _obj


