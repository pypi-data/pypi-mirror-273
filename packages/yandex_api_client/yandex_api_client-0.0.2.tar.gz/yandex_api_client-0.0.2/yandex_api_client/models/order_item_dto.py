# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.order_item_detail_dto import OrderItemDetailDTO
from yandex_api_client.models.order_item_instance_dto import OrderItemInstanceDTO
from yandex_api_client.models.order_item_instance_type import OrderItemInstanceType
from yandex_api_client.models.order_item_promo_dto import OrderItemPromoDTO
from yandex_api_client.models.order_item_subsidy_dto import OrderItemSubsidyDTO
from yandex_api_client.models.order_vat_type import OrderVatType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderItemDTO(BaseModel):
    """
    Список товаров в заказе.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. ")
    offer_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="offerId")
    feed_category_id: Optional[StrictStr] = Field(default=None, description="Идентификатор категории, указанный в каталоге.  {% note alert %}  Параметр устарел и не рекомендуется к использованию.  {% endnote %} ", alias="feedCategoryId")
    offer_name: Optional[StrictStr] = Field(default=None, description="Название товара.", alias="offerName")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена товара в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidy`).  Для отделения целой части от дробной используется точка. ")
    buyer_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена товара в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.  Для отделения целой части от дробной используется точка. ", alias="buyerPrice")
    buyer_price_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость товара в валюте покупателя до применения скидок.  Для отделения целой части от дробной используется точка. ", alias="buyerPriceBeforeDiscount")
    price_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Стоимость товара в валюте магазина до применения скидок.  Для отделения целой части от дробной используется точка. ", alias="priceBeforeDiscount")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара.")
    vat: Optional[OrderVatType] = None
    shop_sku: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="shopSku")
    subsidy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа, для отделения целой части от дробной используется точка. ")
    partner_warehouse_id: Optional[StrictStr] = Field(default=None, description="Идентификатор склада в системе партнера, на который сформирован заказ.  {% note alert %}  Параметр устарел, временно поддерживается, но не доступен для ввода и редактирования.  {% endnote %} ", alias="partnerWarehouseId")
    promos: Optional[List[OrderItemPromoDTO]] = Field(default=None, description="Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.")
    instances: Optional[List[OrderItemInstanceDTO]] = Field(default=None, description="Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. ")
    details: Optional[List[OrderItemDetailDTO]] = Field(default=None, description="Информация об удалении товара из заказа. ")
    subsidies: Optional[List[OrderItemSubsidyDTO]] = Field(default=None, description="Список субсидий по типам.")
    required_instance_types: Optional[List[OrderItemInstanceType]] = Field(default=None, description="Список необходимых маркировок товара.", alias="requiredInstanceTypes")
    __properties: ClassVar[List[str]] = ["id", "offerId", "feedCategoryId", "offerName", "price", "buyerPrice", "buyerPriceBeforeDiscount", "priceBeforeDiscount", "count", "vat", "shopSku", "subsidy", "partnerWarehouseId", "promos", "instances", "details", "subsidies", "requiredInstanceTypes"]

    @field_validator('offer_id')
    def offer_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    @field_validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in promos (list)
        _items = []
        if self.promos:
            for _item in self.promos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['promos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subsidies (list)
        _items = []
        if self.subsidies:
            for _item in self.subsidies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subsidies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "offerId": obj.get("offerId"),
            "feedCategoryId": obj.get("feedCategoryId"),
            "offerName": obj.get("offerName"),
            "price": obj.get("price"),
            "buyerPrice": obj.get("buyerPrice"),
            "buyerPriceBeforeDiscount": obj.get("buyerPriceBeforeDiscount"),
            "priceBeforeDiscount": obj.get("priceBeforeDiscount"),
            "count": obj.get("count"),
            "vat": obj.get("vat"),
            "shopSku": obj.get("shopSku"),
            "subsidy": obj.get("subsidy"),
            "partnerWarehouseId": obj.get("partnerWarehouseId"),
            "promos": [OrderItemPromoDTO.from_dict(_item) for _item in obj.get("promos")] if obj.get("promos") is not None else None,
            "instances": [OrderItemInstanceDTO.from_dict(_item) for _item in obj.get("instances")] if obj.get("instances") is not None else None,
            "details": [OrderItemDetailDTO.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "subsidies": [OrderItemSubsidyDTO.from_dict(_item) for _item in obj.get("subsidies")] if obj.get("subsidies") is not None else None,
            "requiredInstanceTypes": obj.get("requiredInstanceTypes")
        })
        return _obj


