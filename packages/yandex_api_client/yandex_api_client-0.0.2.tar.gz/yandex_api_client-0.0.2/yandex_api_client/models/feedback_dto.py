# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.feedback_author_dto import FeedbackAuthorDTO
from yandex_api_client.models.feedback_comment_dto import FeedbackCommentDTO
from yandex_api_client.models.feedback_grades_dto import FeedbackGradesDTO
from yandex_api_client.models.feedback_order_dto import FeedbackOrderDTO
from yandex_api_client.models.feedback_shop_dto import FeedbackShopDTO
from yandex_api_client.models.feedback_state_type import FeedbackStateType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FeedbackDTO(BaseModel):
    """
    Отзыв пользователя Яндекс.Маркета об указанном магазине.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор отзыва.")
    created_at: Optional[datetime] = Field(default=None, description="Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. ", alias="createdAt")
    text: Optional[StrictStr] = Field(default=None, description="Комментарий автора отзыва.")
    state: Optional[FeedbackStateType] = None
    author: Optional[FeedbackAuthorDTO] = None
    pro: Optional[StrictStr] = Field(default=None, description="Достоинства магазина, описанные в отзыве.")
    contra: Optional[StrictStr] = Field(default=None, description="Недостатки магазина, описанные в отзыве.")
    comments: Optional[List[FeedbackCommentDTO]] = Field(default=None, description="Переписка автора отзыва с магазином.")
    shop: Optional[FeedbackShopDTO] = None
    resolved: Optional[StrictBool] = Field(default=None, description="Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. ")
    verified: Optional[StrictBool] = Field(default=None, description="Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет.  {% note alert %}  Параметр устарел и не рекомендуется к использованию.  {% endnote %} ")
    recommend: Optional[StrictBool] = Field(default=None, description="Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. ")
    grades: Optional[FeedbackGradesDTO] = None
    order: Optional[FeedbackOrderDTO] = None
    __properties: ClassVar[List[str]] = ["id", "createdAt", "text", "state", "author", "pro", "contra", "comments", "shop", "resolved", "verified", "recommend", "grades", "order"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FeedbackDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item in self.comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of shop
        if self.shop:
            _dict['shop'] = self.shop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grades
        if self.grades:
            _dict['grades'] = self.grades.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FeedbackDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "text": obj.get("text"),
            "state": obj.get("state"),
            "author": FeedbackAuthorDTO.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "pro": obj.get("pro"),
            "contra": obj.get("contra"),
            "comments": [FeedbackCommentDTO.from_dict(_item) for _item in obj.get("comments")] if obj.get("comments") is not None else None,
            "shop": FeedbackShopDTO.from_dict(obj.get("shop")) if obj.get("shop") is not None else None,
            "resolved": obj.get("resolved"),
            "verified": obj.get("verified"),
            "recommend": obj.get("recommend"),
            "grades": FeedbackGradesDTO.from_dict(obj.get("grades")) if obj.get("grades") is not None else None,
            "order": FeedbackOrderDTO.from_dict(obj.get("order")) if obj.get("order") is not None else None
        })
        return _obj


