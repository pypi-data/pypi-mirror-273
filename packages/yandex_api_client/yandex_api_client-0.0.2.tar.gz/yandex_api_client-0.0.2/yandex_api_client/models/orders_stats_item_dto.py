# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.orders_stats_details_dto import OrdersStatsDetailsDTO
from yandex_api_client.models.orders_stats_price_dto import OrdersStatsPriceDTO
from yandex_api_client.models.orders_stats_warehouse_dto import OrdersStatsWarehouseDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrdersStatsItemDTO(BaseModel):
    """
    Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 
    """ # noqa: E501
    offer_name: Optional[StrictStr] = Field(default=None, description="Название товара.", alias="offerName")
    market_sku: Optional[StrictInt] = Field(default=None, description="SKU на Маркете.", alias="marketSku")
    shop_sku: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 80 знаков. В нее могут входить английские и русские буквы, цифры и символы `. , / \\ ( ) [ ] - = _`  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="shopSku")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. ")
    prices: Optional[List[OrdersStatsPriceDTO]] = Field(default=None, description="Цена или скидки на товар.")
    warehouse: Optional[OrdersStatsWarehouseDTO] = None
    details: Optional[List[OrdersStatsDetailsDTO]] = Field(default=None, description="Информация об удалении товара из заказа.")
    cis_list: Optional[List[StrictStr]] = Field(default=None, description="Список кодов идентификации товара в системе «Честный ЗНАК».", alias="cisList")
    initial_count: Optional[StrictInt] = Field(default=None, description="Первоначальное количество единиц товара.", alias="initialCount")
    bid_fee: Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]] = Field(default=None, description="Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. ", alias="bidFee")
    cofinance_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. ", alias="cofinanceThreshold")
    cofinance_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. ", alias="cofinanceValue")
    __properties: ClassVar[List[str]] = ["offerName", "marketSku", "shopSku", "count", "prices", "warehouse", "details", "cisList", "initialCount", "bidFee", "cofinanceThreshold", "cofinanceValue"]

    @field_validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zа-яА-ЯA-ZёËëЁ.,\\\/()\[\]\-=_]{1,80}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrdersStatsItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item in self.prices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrdersStatsItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offerName": obj.get("offerName"),
            "marketSku": obj.get("marketSku"),
            "shopSku": obj.get("shopSku"),
            "count": obj.get("count"),
            "prices": [OrdersStatsPriceDTO.from_dict(_item) for _item in obj.get("prices")] if obj.get("prices") is not None else None,
            "warehouse": OrdersStatsWarehouseDTO.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "details": [OrdersStatsDetailsDTO.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "cisList": obj.get("cisList"),
            "initialCount": obj.get("initialCount"),
            "bidFee": obj.get("bidFee"),
            "cofinanceThreshold": obj.get("cofinanceThreshold"),
            "cofinanceValue": obj.get("cofinanceValue")
        })
        return _obj


