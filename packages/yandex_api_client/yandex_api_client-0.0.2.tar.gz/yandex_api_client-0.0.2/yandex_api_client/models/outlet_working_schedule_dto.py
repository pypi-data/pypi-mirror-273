# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from typing_extensions import Annotated
from yandex_api_client.models.outlet_working_schedule_item_dto import OutletWorkingScheduleItemDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OutletWorkingScheduleDTO(BaseModel):
    """
    Список режимов работы точки продаж. 
    """ # noqa: E501
    work_in_holiday: Optional[StrictBool] = Field(default=None, description="Признак, работает ли точка продаж в дни государственных праздников. Возможные значения: * `false` — точка продаж не работает в дни государственных праздников. * `true` — точка продаж работает в дни государственных праздников. ", alias="workInHoliday")
    schedule_items: Annotated[List[OutletWorkingScheduleItemDTO], Field(min_length=1)] = Field(description="Список расписаний работы точки продаж. ", alias="scheduleItems")
    __properties: ClassVar[List[str]] = ["workInHoliday", "scheduleItems"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OutletWorkingScheduleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_items (list)
        _items = []
        if self.schedule_items:
            for _item in self.schedule_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scheduleItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OutletWorkingScheduleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workInHoliday": obj.get("workInHoliday"),
            "scheduleItems": [OutletWorkingScheduleItemDTO.from_dict(_item) for _item in obj.get("scheduleItems")] if obj.get("scheduleItems") is not None else None
        })
        return _obj


