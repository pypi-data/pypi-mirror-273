# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.return_decision_reason_type import ReturnDecisionReasonType
from yandex_api_client.models.return_decision_subreason_type import ReturnDecisionSubreasonType
from yandex_api_client.models.return_decision_type import ReturnDecisionType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ReturnDecisionDTO(BaseModel):
    """
    Решения по возвратам.
    """ # noqa: E501
    return_item_id: Optional[StrictInt] = Field(default=None, description="Идентификатор товара в возврате.", alias="returnItemId")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара.")
    comment: Optional[StrictStr] = Field(default=None, description="Комментарий.")
    reason_type: Optional[ReturnDecisionReasonType] = Field(default=None, alias="reasonType")
    subreason_type: Optional[ReturnDecisionSubreasonType] = Field(default=None, alias="subreasonType")
    decision_type: Optional[ReturnDecisionType] = Field(default=None, alias="decisionType")
    refund_amount: Optional[StrictInt] = Field(default=None, description="Сумма возврата.", alias="refundAmount")
    partner_compensation: Optional[StrictInt] = Field(default=None, description="Компенсация за обратную доставку.", alias="partnerCompensation")
    images: Optional[List[StrictStr]] = Field(default=None, description="Список хеш-кодов фотографий товара от покупателя.")
    __properties: ClassVar[List[str]] = ["returnItemId", "count", "comment", "reasonType", "subreasonType", "decisionType", "refundAmount", "partnerCompensation", "images"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ReturnDecisionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ReturnDecisionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "returnItemId": obj.get("returnItemId"),
            "count": obj.get("count"),
            "comment": obj.get("comment"),
            "reasonType": obj.get("reasonType"),
            "subreasonType": obj.get("subreasonType"),
            "decisionType": obj.get("decisionType"),
            "refundAmount": obj.get("refundAmount"),
            "partnerCompensation": obj.get("partnerCompensation"),
            "images": obj.get("images")
        })
        return _obj


