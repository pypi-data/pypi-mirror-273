# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from yandex_api_client.models.currency_type import CurrencyType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OfferDTO(BaseModel):
    """
    Предложение.
    """ # noqa: E501
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. ")
    feed_id: Optional[StrictInt] = Field(default=None, description="Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. ", alias="feedId")
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. ")
    shop_category_id: Optional[StrictStr] = Field(default=None, description="Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. ", alias="shopCategoryId")
    market_category_id: Optional[StrictInt] = Field(default=None, description="Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. ", alias="marketCategoryId")
    pre_discount_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения без скидки.", alias="preDiscountPrice")
    discount: Optional[StrictInt] = Field(default=None, description="Скидка на предложение, в %.")
    cut_price: Optional[StrictBool] = Field(default=None, description="Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. ", alias="cutPrice")
    url: Optional[StrictStr] = Field(default=None, description="URL-адрес предложения на сайте магазина.")
    model_id: StrictInt = Field(description="Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} ", alias="modelId")
    name: Optional[StrictStr] = Field(default=None, description="Наименование предложения.")
    currency: Optional[CurrencyType] = None
    bid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ставка на клик. deprecated.")
    cbid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ставка на клик. deprecated.")
    fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Процент комиссии на товар при продаже по CPA. deprecated.")
    blocked: Optional[StrictBool] = Field(default=None, description="Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. ")
    __properties: ClassVar[List[str]] = ["price", "feedId", "id", "shopCategoryId", "marketCategoryId", "preDiscountPrice", "discount", "cutPrice", "url", "modelId", "name", "currency", "bid", "cbid", "fee", "blocked"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "price": obj.get("price"),
            "feedId": obj.get("feedId"),
            "id": obj.get("id"),
            "shopCategoryId": obj.get("shopCategoryId"),
            "marketCategoryId": obj.get("marketCategoryId"),
            "preDiscountPrice": obj.get("preDiscountPrice"),
            "discount": obj.get("discount"),
            "cutPrice": obj.get("cutPrice"),
            "url": obj.get("url"),
            "modelId": obj.get("modelId"),
            "name": obj.get("name"),
            "currency": obj.get("currency"),
            "bid": obj.get("bid"),
            "cbid": obj.get("cbid"),
            "fee": obj.get("fee"),
            "blocked": obj.get("blocked")
        })
        return _obj


