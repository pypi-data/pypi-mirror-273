"use strict";(self.webpackChunkjupyterlab_collaborative_chat=self.webpackChunkjupyterlab_collaborative_chat||[]).push([[288],{1288:(e,t,a)=>{a.r(t),a.d(t,{default:()=>$,docFactories:()=>D});var s=a(101),n=a(1652),i=a(9626),o=a(5923),r=a(8702),h=a(6260),d=a(4236),c=a(2825),l=a(265),g=a(1527),m=a(2774),u=a(4602),p=a(7262),y=a(2697);class f extends y.YDocument{constructor(e){super(e),this.version="1.0.0",this._usersObserver=e=>{const t=new Array;e.keysChanged.forEach((a=>{const s=e.changes.keys.get(a);if(s)switch(s.action){case"add":t.push({key:a,newValue:this._users.get(a),type:"add"});break;case"delete":t.push({key:a,oldValue:s.oldValue,type:"remove"});break;case"update":t.push({key:a,oldValue:s.oldValue,newValue:this._users.get(a),type:"change"})}})),this._changed.emit({userChange:t})},this._messagesObserver=e=>{const t=e.delta;this._changed.emit({messageChanges:t})},this._users=this.ydoc.getMap("users"),this._users.observe(this._usersObserver),this._messages=this.ydoc.getArray("messages"),this._messages.observe(this._messagesObserver)}static create(e){return new f(e)}get users(){return p.JSONExt.deepCopy(this._users.toJSON())}get messages(){return p.JSONExt.deepCopy(this._messages.toJSON())}getUser(e){if(e)return this._users.get(e)}setUser(e){this.transact((()=>{this._users.set(e.username,e)}))}getMessage(e){return this._messages.get(e)}addMessage(e){this.transact((()=>{this._messages.push([e])}))}updateMessage(e,t){this.transact((()=>{this._messages.delete(e),this._messages.insert(e,[t])}))}getMessageIndex(e){return this._messages.toArray().findIndex((t=>t.id===e))}deleteMessage(e){this.transact((()=>{this._messages.delete(e)}))}}class _ extends s.ChatModel{constructor(e){super(e),this.collaborative=!0,this._onchange=(e,t)=>{if(t.messageChanges){const e=t.messageChanges;let a=0;e.forEach((e=>{if(e.retain)a+=e.retain;else if(e.insert){const t=e.insert.map((e=>{const t={...e};return t.sender=this.sharedModel.getUser(e.sender)||e.sender,t}));this.messagesInserted(a,t),a+=t.length}else e.delete&&this.messagesDeleted(a,e.delete)}))}},this.defaultKernelName="",this.defaultKernelLanguage="",this._dirty=!1,this._readOnly=!1,this._disposed=new u.Signal(this),this._contentChanged=new u.Signal(this),this._stateChanged=new u.Signal(this),this._user=e.user||{username:"user undefined"};const{widgetConfig:t,sharedModel:a}=e;this._sharedModel=a||f.create(),this.sharedModel.changed.connect(this._onchange,this),this.config=t.config,t.configChanged.connect(((e,t)=>{this.config=t}))}get user(){return this._user}get sharedModel(){return this._sharedModel}get contentChanged(){return this._contentChanged}get stateChanged(){return this._stateChanged}get dirty(){return this._dirty}set dirty(e){this._dirty=e}get readOnly(){return this._readOnly}set readOnly(e){this._readOnly=e}get disposed(){return this._disposed}dispose(){this.isDisposed||(super.dispose(),this._sharedModel.dispose(),this._disposed.emit(),u.Signal.clearData(this))}toString(){return JSON.stringify({},null,2)}fromString(e){}toJSON(){return JSON.parse(this.toString())}fromJSON(e){}addMessage(e){const t={type:"msg",id:p.UUID.uuid4(),body:e.body,time:Date.now()/1e3,sender:this._user.username,raw_time:!0};this.sharedModel.getUser(this._user.username)!==this._user&&this.sharedModel.setUser(this._user),this.sharedModel.addMessage(t)}updateMessage(e,t){const a=this.sharedModel.getMessageIndex(e);let s=this.sharedModel.getMessage(a);if(s)s.body=t.body,s.edited=!0;else{let a;a="string"==typeof t.sender?t.sender:t.sender.username,s={type:"msg",id:e||p.UUID.uuid4(),body:t.body,time:t.time||Date.now()/1e3,sender:a,edited:!0}}this.sharedModel.updateMessage(a,s)}deleteMessage(e){const t=this.sharedModel.getMessageIndex(e),a=this.sharedModel.getMessage(t);a?(a.body="",a.deleted=!0,this.sharedModel.updateMessage(t,a)):console.error("The message to delete does not exist")}}var C=a(3345),b=a.n(C);const v={name:"chat",displayName:"Chat",mimeTypes:["text/json","application/json"],extensions:[".chat"],fileFormat:"text",contentType:"chat",icon:s.chatIcon},w=new p.Token("jupyter-collaborative-chat:IWidgetConfig"),M="collaborative-chat:create",x="collaborative-chat:open",I="collaborative-chat:moveToSide",S=new p.Token("jupyter-collaborative-chat:IChatPanel");class T extends m.DocumentWidget{constructor(e){super(e),this.addClass("jp-collab-chat_main-panel")}dispose(){this.context.dispose(),this.content.dispose(),super.dispose()}get model(){return this.content.model}}class N extends g.SidePanel{constructor(e){super(e),this.updateChatNames=async()=>{const e=v.extensions[0];this._drive.get(".").then((t=>{const a=t.content.filter((t=>"file"===t.type&&t.name.endsWith(e))).map((t=>r.PathExt.basename(t.name,e)));this._chatNamesChanged.emit(a)})).catch((e=>console.error("Error getting the chat files from drive",e)))},this._chatSelected=e=>{const t=e.target.value;if("-"===t)return;const a=this.widgets.findIndex((e=>e.name===t));-1===a?this._commands.execute(x,{filepath:`${t}${v.extensions[0]}`,inSidePanel:!0}):this.widgets[a].isVisible||this.content.expand(a),e.target.selectedIndex=0},this._chatNamesChanged=new u.Signal(this),this._config={},this.addClass("jp-collab-chat-sidepanel"),this._commands=e.commands,this._drive=e.drive,this._rmRegistry=e.rmRegistry,this._themeManager=e.themeManager;const t=new g.CommandToolbarButton({commands:this._commands,id:M,args:{inSidePanel:!0},icon:g.addIcon});t.addClass("jp-collab-chat-add"),this.toolbar.addItem("createChat",t),this._openChat=g.ReactWidget.create(b().createElement(E,{chatNamesChanged:this._chatNamesChanged,handleChange:this._chatSelected.bind(this)})),this._openChat.addClass("jp-collab-chat-open"),this.toolbar.addItem("openChat",this._openChat),this.content.expansionToggled.connect(this._onExpansionToggled,this)}get config(){return this._config}set config(e){this._config={...this._config,...e},this.widgets.forEach((t=>{t.model.config=e}))}addChat(e,t){const a=this.content;for(let e=0;e<this.widgets.length;e++)a.collapse(e);const n=new s.ChatWidget({model:e,rmRegistry:this._rmRegistry,themeManager:this._themeManager});this.addWidget(new R({name:t,widget:n,commands:this._commands}))}onAfterShow(e){var t;null===(t=this._openChat.renderPromise)||void 0===t||t.then((()=>this.updateChatNames()))}_onExpansionToggled(e,t){if(this.widgets[t].isVisible)for(let a=0;a<this.widgets.length;a++)a!==t&&e.collapse(a)}}class R extends g.PanelWithToolbar{constructor(e){super(e),this.addClass("jp-collab-chat-section"),this._name=e.name,this.title.label=this._name,this.title.caption=this._name,this.toolbar.addClass("jp-collab-chat-toolbar");const t=new g.ToolbarButton({icon:g.launchIcon,iconLabel:"Move the chat to the main area",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),e.commands.execute(x,{filepath:`${this._name}${v.extensions[0]}`}),this.dispose()}}),a=new g.ToolbarButton({icon:g.closeIcon,iconLabel:"Close the chat",className:"jp-mod-styled",onClick:()=>{this.model.dispose(),this.dispose()}});this.toolbar.addItem("collaborativeChat-main",t),this.toolbar.addItem("collaborativeChat-close",a),this.addWidget(e.widget),e.widget.node.style.height="100%"}get name(){return this._name}get model(){return this.widgets[0].model}}function E({chatNamesChanged:e,handleChange:t}){const[a,s]=(0,C.useState)([]);return e.connect(((e,t)=>{s(t)})),b().createElement(g.HTMLSelect,{onChange:t},b().createElement("option",{value:"-"},"Open a chat"),a.map((e=>b().createElement("option",{value:e},e))))}class j{constructor(e){this.configChanged=new u.Signal(this),this.config=e,this.configChanged.connect(((e,t)=>{this.config={...this.config,...t}}))}}class O extends m.ABCWidgetFactory{constructor(e){super(e),this._themeManager=e.themeManager,this._rmRegistry=e.rmRegistry}createNewWidget(e){return e.chatModel=e.model,e.rmRegistry=this._rmRegistry,e.themeManager=this._themeManager,new T({context:e,content:new s.ChatWidget(e)})}}class W{constructor(e){this.collaborative=!0,this._disposed=!1,this._user=e.user,this._widgetConfig=e.widgetConfig}get name(){return"chat"}get contentType(){return"chat"}get fileFormat(){return"text"}get isDisposed(){return this._disposed}dispose(){this._disposed=!0}preferredLanguage(e){return""}createNew(e){return new _({...e,user:this._user,widgetConfig:this._widgetConfig})}}const k="Chat",P="jupyterlab-collaborative-chat:factories",D={id:P,description:"A document factories for collaborative chat",autoStart:!0,requires:[d.IRenderMimeRegistry],optional:[n.ICollaborativeDrive,i.ILayoutRestorer,c.ISettingRegistry,o.IThemeManager,o.IToolbarWidgetRegistry,l.ITranslator],provides:w,activate:(e,t,a,s,n,i,r,h)=>{const d=null!=h?h:l.nullTranslator;let c,g=!1;function m(e){g=e.get("sendWithShiftEnter").composite,u.configChanged.emit({sendWithShiftEnter:g})}n&&(r&&(c=(0,o.createToolbarFactory)(r,n,k,P,d)),Promise.all([e.restored,n.load(P)]).then((([,e])=>{m(e),e.changed.connect(m)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const u=new j({sendWithShiftEnter:g}),p=new o.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(v),a){const e=()=>f.create();a.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,a=new W({user:t,widgetConfig:u});e.docRegistry.addModelFactory(a)})).catch((e=>console.error("The collaborative chat model factory is not initialized",e)));const y=new O({name:k,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:i,rmRegistry:t,toolbarFactory:c,translator:d});return y.widgetCreated.connect(((e,t)=>{t.context.pathChanged.connect((()=>{p.save(t)})),p.add(t)})),e.docRegistry.addWidgetFactory(y),s&&s.restore(p,{command:"docmanager:open",args:e=>({path:e.context.path,factory:k}),name:e=>e.context.path,when:e.serviceManager.ready}),u}},F={id:"jupyterlab-collaborative-chat:commands",description:"The commands to create or open a chat",autoStart:!0,requires:[n.ICollaborativeDrive,w],optional:[S,o.ICommandPalette,h.ILauncher],activate:(e,t,a,n,i,h)=>{const{commands:d}=e;d.addCommand(M,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:s.chatIcon,execute:async e=>{var a,s;const n=null!==(a=e.inSidePanel)&&void 0!==a&&a;let i=null!==(s=e.name)&&void 0!==s?s:null,r="";if(i||(i=(await o.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===i)return;i&&(r=i.endsWith(v.extensions[0])?i:`${i}${v.extensions[0]}`);let h=!0;if(r?await t.get(r,{content:!1}).catch((()=>{h=!1})):h=!1,!h){let e=await t.newUntitled({type:"file",ext:v.extensions[0]});if(r&&(e=await t.rename(e.path,r)),!e)return(0,o.showErrorMessage)("Error creating a chat","An error occured while creating the chat"),"";r=e.path}if(d.hasCommand(x))return d.execute(x,{filepath:r,inSidePanel:n});d.execute("docmanager:open",{path:`RTC:${r}`,factory:k})}}),i&&i.addItem({category:"Chat",command:M,args:{isPalette:!0}}),h&&h.add({command:M,category:"Chat",rank:1}),e.serviceManager.ready.then((()=>{const s=e.serviceManager.user.identity;d.addCommand(x,{label:"Open a chat",execute:async i=>{var h,c;const l=null!==(h=i.inSidePanel)&&void 0!==h&&h;let g=null!==(c=i.filepath)&&void 0!==c?c:null;if(null===g&&(g=(await o.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!g)return;let m=!0;if(await t.get(g,{content:!1}).catch((()=>{m=!1})),m)if(l&&n){e.shell.activateById(n.id);const i=await t.get(g),o=t.sharedModelFactory.createNew({path:i.path,format:i.format,contentType:v.contentType,collaborative:!0}),h=new _({user:s,sharedModel:o,widgetConfig:a});n.addChat(h,r.PathExt.basename(i.name,v.extensions[0]))}else d.execute("docmanager:open",{path:`RTC:${g}`,factory:k});else(0,o.showErrorMessage)("Error opening chat",`'${g}' is not a valid path`)}}),i&&i.addItem({category:"Chat",command:x})})).catch((e=>console.error("The command to open a chat is not initialized\n",e)))}},J={id:"jupyterlab-collaborative-chat:chat-panel",description:"A chat extension for Jupyter",autoStart:!0,provides:S,requires:[n.ICollaborativeDrive,d.IRenderMimeRegistry],optional:[i.ILayoutRestorer,o.IThemeManager],activate:(e,t,a,n,i)=>{const{commands:o}=e,r=new N({commands:o,drive:t,rmRegistry:a,themeManager:i});r.id="JupyterCollaborationChat:sidepanel",r.title.icon=s.chatIcon,r.title.caption="Jupyter Chat",e.shell.add(r,"left",{rank:2e3}),n&&n.add(r,"jupyter-chat");const h=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;h.includes(e)&&r.updateChatNames()}})),o.addCommand(I,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:g.launchIcon,isEnabled:()=>o.hasCommand(x),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof T&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${I}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();o.execute(x,{filepath:a,inSidePanel:!0}),t.dispose()}}),r}},$=[F,D,J]}}]);