# /* ****************************************************************** **
# **   OpenSRANE - Open Software for Risk Assessment of Natech Events   **
# **                                                                    **
# **                                                                    **
# **                                                                    **
# ** (C) Copyright 2023, Mentioned Regents in 'COPYRIGHT' file.         **
# **                                                                    **
# ** All Rights Reserved.                                               **
# **                                                                    **
# ** Commercial use of this program without express permission of the   **
# ** owner (The Regents), is                                            **
# ** strictly prohibited.  See file 'COPYRIGHT'  in main directory      **
# ** for information on usage and redistribution,  and for a            **
# ** DISCLAIMER OF ALL WARRANTIES.                                      **
# **                                                                    **
# ** Developed by:                                                      **
# **   Bijan SayyafZadeh (OpenSRANE@Gmail.com)                          **
# **   MehDi Sharifi                                                    **
# **   Abdolreza S. Moghadam                                            **
# **   Eslam Kashi                                                      **
# **                                                                    **
# ** ****************************************************************** */

'''
 Written: Bijan Sayyafzadeh
 Created: 2022
 
 Revision: -
 By & Date: -
'''


import opensrane as _opr
import random as _rnd
from copy import deepcopy as _deepcopy

class _NodesGroupsVulnerability():
    
    
                  
    def Analyze():
        '''
        This Function Calculate the physical events effect on the undamaged units according the physical events that happens 
        for elments that has been damaged in the last step
        Then
        if the element damaged, the corresponding outflow will be assigned to the cuurent element
        '''
    
        #------------------------ First Part: Read Defined Objects -------------------------------------------#

        #Get All Materials Objects
        AllMaterials=_opr.Substance.ObjManager.Objlst
        

        #Get All defined Fragilities Dictionary (That probits Functions are also inside them)
        FragTagObjs=_opr.Fragilities.ObjManager.TagObjDict
        #print(f'Defined Fragility Tags={[tag for tag,obj in FragTagObjs.items()]}')
        

        #Get All Plant Units
        AllUnits=_opr.PlantUnits.ObjManager.Objlst
        #print(f'Ob jectgs Tags={[i.tag for i in AllUnits]} and Corresponding Fragilites={[i.FragilityTagNumbers for i in AllUnits]}')


        #get all NodesGroups Objects
        AllNodesGroups=_opr.NodesGroups.ObjManager.Objlst

        
        #get the last damage level
        last_damage_level=[unit.DamageLevel for unit in AllUnits if unit.DamageLevel!=None]
        if last_damage_level==[]: return None #Means that no Plant unit damaged under External Excitation
        last_damage_level=max(last_damage_level)        
        
        #---------------------------------- Second Part: Analyze -------------------------------------------#
        
        ZeroResults='Start Analysis:\n'
       
        #For Each NodeGroup implement the calculations
        for NodesGroup in AllNodesGroups:
            
            #Get Pressure and Radiation and toxic Probit Objects
            pressure_probit_obj=FragTagObjs[NodesGroup.pressure_probit_tag] if NodesGroup.pressure_probit_tag!=None else None
            radiation_probit_obj=FragTagObjs[NodesGroup.radiation_probit_tag] if NodesGroup.radiation_probit_tag!=None else None            
            
            #Change the single defined tag to a list with one tag
            if type(NodesGroup.Toxic_probit_tag)==int: NodesGroup.Toxic_probit_tag=[NodesGroup.Toxic_probit_tag]
            if NodesGroup.Toxic_probit_tag!=None: 
                toxic_probit_objs=[FragTagObjs[Probtag] for Probtag in NodesGroup.Toxic_probit_tag]
            else:
                toxic_probit_objs=None
        
        
            #Define 3 important functions that gives the maximum dose of overpressure and summation of radiation and summation of toxic at entered location
            def MaxOverpressure(x,y,z):
                
                #Calculate the maximum overpressure of the all the units on the (x,y,z) point
                MaxP=0
                #to Record Data to store them in object for further requeirments
                DamageSource=None
                DamageSourceTag=None
                DamageSourceDose=None
                DamageSourceType=None
                
                #For Each Damaged Plant Unit 
                for Damagedunit in [DamagedUnit for DamagedUnit in AllUnits if DamagedUnit.isdamaged==True]:
                    
                    #if DamagedUnit didn't have any physical effect then continue and no need for further calculations
                    if Damagedunit.PhysicalEffectObject==None: continue
                    
                    OP=Damagedunit.PhysicalEffectObject.OverPressure_at_Point(x,y,z)
                    
                    #if OverPressure value was none or 0 no need to continure
                    if OP==None or OP<=0: continue
                    
                    if MaxP<OP: 
                        MaxP=OP
                        
                        #Record Data to store them in object for further requeirments
                        DamageSource=Damagedunit.__class__.__name__
                        DamageSourceTag=Damagedunit.tag
                        DamageSourceDose=MaxP
                        DamageSourceType='Overpressure'                        
                    
                return MaxP, [DamageSource,DamageSourceTag,DamageSourceDose,DamageSourceType]

                
            def SumOfRadiation(x,y,z):
                
                #Calculate the Summation of radiations of the all the units on the (x,y,z) point
                MaxR=0
                #to Record Data to store them in object for further requeirments
                DamageSource=[]
                DamageSourceTag=[]
                DamageSourceDose=[]
                DamageSourceType=[]
                
                #For Each Damaged Plant Unit 
                for Damagedunit in [DamagedUnit for DamagedUnit in AllUnits if DamagedUnit.isdamaged==True]:
                    
                    #if DamagedUnit didn't have any physical effect then continue and no need for further calculations
                    if Damagedunit.PhysicalEffectObject==None: continue
                    
                    Ra=Damagedunit.PhysicalEffectObject.Thermal_Radiation_at_Point(x,y,z)
                    
                    #if Radiation value was none or 0 no need to continure
                    if Ra==None or Ra<=0: continue
                    
                    MaxR=MaxR+Ra
                    
                    #Record Data to store them in object for further requeirments
                    DamageSource.append(Damagedunit.__class__.__name__)
                    DamageSourceTag.append(Damagedunit.tag)
                    DamageSourceDose=MaxR
                    DamageSourceType='Radiation' 
                    
                return MaxR, [DamageSource,DamageSourceTag,DamageSourceDose,DamageSourceType]

                
            def SumOfToxic(x,y,z):
                
                #Doses is a dictionaty that for each probit tag of the groupnode have value of dose corresponding materials that are in its materials list
                # means that Dose={NodesGroup Probit Tag: Dose value at point x,y,z}

                Doses={}
                #to Record Data to store them in object for further requeirments
                DamageSource={}
                DamageSourceTag={}
                DamageSourceDose={}
                DamageSourceType={}

                #if no Toxic material tags defined by the user no
                if NodesGroup.Toxic_probit_tag==None: return {0:0}, [DamageSource,DamageSourceTag,DamageSourceDose,DamageSourceType]

                #set initial dose values for each toxic probit equal zero
                Doses={Probtag:0 for Probtag in NodesGroup.Toxic_probit_tag}
                DamageSource={Probtag:[] for Probtag in NodesGroup.Toxic_probit_tag}
                DamageSourceTag={Probtag:[] for Probtag in NodesGroup.Toxic_probit_tag}
                DamageSourceDose={Probtag:None for Probtag in NodesGroup.Toxic_probit_tag}
                DamageSourceType={Probtag:None for Probtag in NodesGroup.Toxic_probit_tag}
                
                #for each damaged unit it is checked if there is no explotion or fire and there should be dispersion of the gas
                for Damagedunit in [DamagedUnit for DamagedUnit in AllUnits if DamagedUnit.isdamaged==True]:
                    
                    #in Case there is no dispersion so there is no toxic
                    if Damagedunit.DispersionSpreadModelObject==None: continue
                    
                    #if there is Physical effect But it is not safe (Means we have Fire or Explosion) there is no toxic
                    if Damagedunit.PhysicalEffectObject!=None:
                        if Damagedunit.PhysicalEffectObject.Title!='SAFE':continue
                        
                    #in other cases that we have physical object equal none or we have safe physical effect object then we should calculate dose
                    #Calculate doses for each probitTag
                    for Probtag in NodesGroup.Toxic_probit_tag:
                        ProbObj=FragTagObjs[Probtag]
                        
                        #check if current plant unit material is in the list of the ProbitObject materials list
                        if Damagedunit.SubstanceTag not in ProbObj.ToxicMaterialslist: continue
                        
                        #Calculate the toxicity Dose in the point and add it to the Doses dictionary
                        GasConc=Damagedunit.DispersionSpreadModelObject.GasConcentration(x,y,z)
                        if GasConc!=None and GasConc!=0:
                            Doses[Probtag]=Doses[Probtag]+GasConc
                            
                            #Record Data to store them in object for further requeirments
                            DamageSource[Probtag].append(Damagedunit.__class__.__name__)
                            DamageSourceTag[Probtag].append(Damagedunit.tag)
                            DamageSourceDose[Probtag]=Doses[Probtag]
                            DamageSourceType[Probtag]='Toxic'                            
                
                return Doses, [DamageSource,DamageSourceTag,DamageSourceDose,DamageSourceType]
                
                
                
            
            #Check results for each node in nodesGroup
            for x,y,z in zip(NodesGroup.xGlobalList,NodesGroup.yGlobalList,NodesGroup.zGlobalList):
                isDead=False
                PressureDose=None
                RadiationDose=None
                Doses=None
                
                #Randomly decide to check witch one be the first (Overpressure or Radiation or Toxic)
                rnds=[1,2,3]
                _rnd.shuffle(rnds)
                
                for i in rnds:
                
                    #Case 1 is for OverPressure
                    if i==1: 
                        #Calculate the maximum pressure in the point
                        if pressure_probit_obj!=None and isDead==False:
                            
                            PressureDose, infosO=MaxOverpressure(x,y,z)
                            if PressureDose!=0:
                                ProbOfDeath=pressure_probit_obj.GetProbability(PressureDose)
                                
                                Rnd=_rnd.random() #Generate a random variable between 0 and 1
                                
                                if Rnd<=ProbOfDeath:#Means that the unit is damaged by the Physical effect of the damUnit
                                    isDead=True
                                    
                                    #Record Data to store them in object for further requeirments
                                    NodesGroup.DamageSource.append(infosO[0])
                                    NodesGroup.DamageSourceTag.append(infosO[1])
                                    NodesGroup.DamageSourceDose.append(infosO[2])
                                    NodesGroup.DamageSourceType.append(infosO[3])  
                                    
                    #Case 1 is for Radiation
                    if i==2:
                        #Calculate the summation of the Radiation in the point
                        if radiation_probit_obj!=None and isDead==False:
                            
                            RadiationDose, infosR=SumOfRadiation(x,y,z)
                            if RadiationDose!=0:
                                ProbOfDeath=radiation_probit_obj.GetProbability(RadiationDose)
                                
                                Rnd=_rnd.random() #Generate a random variable between 0 and 1
                                
                                if Rnd<=ProbOfDeath:#Means that the unit is damaged by the Physical effect of the damUnit
                                    isDead=True   

                                    #Record Data to store them in object for further requeirments
                                    NodesGroup.DamageSource.append(infosR[0])
                                    NodesGroup.DamageSourceTag.append(infosR[1])
                                    NodesGroup.DamageSourceDose.append(infosR[2])
                                    NodesGroup.DamageSourceType.append(infosR[3])                                     

                    #Case 3 is for Toxic
                    if i==3:
                        #Calculate maximum dose
                        if toxic_probit_objs!=None and isDead==False:
                        
                            DosesDict, infos=SumOfToxic(x,y,z)
                            
                            if DosesDict!={}:
                                #Because of list of ToxicObjects we have to use loop
                                for ProbObj in toxic_probit_objs:
                                    
                                    Dose=DosesDict[ProbObj.tag]
                                    ProbOfDeath=ProbObj.GetProbability(Dose)
                                
                                    Rnd=_rnd.random() #Generate a random variable between 0 and 1
                                    if Rnd<=ProbOfDeath:#Means that the unit is damaged by the Physical effect of the damUnit
                                        isDead=True

                                        #Record Data to store them in object for further requeirments
                                        NodesGroup.DamageSource.append(infos[0][ProbObj.tag])
                                        NodesGroup.DamageSourceTag.append(infos[1][ProbObj.tag])
                                        NodesGroup.DamageSourceDose.append(infos[2][ProbObj.tag])
                                        NodesGroup.DamageSourceType.append(infos[3][ProbObj.tag])                                         

                                        break

                #Record Doses Values and Their Multiplication by Probit
                RadDose=SumOfRadiation(x,y,z)[0]
                OVPDose=MaxOverpressure(x,y,z)[0]
                TOXDose=SumOfToxic(x,y,z)[0]

                NodesGroup.Radiation_Intensity.append(RadDose)   
                NodesGroup.OverPressure_Intensity.append(OVPDose)
                NodesGroup.Toxic_Intensity.append(TOXDose)
                
                NodesGroup.Radiation_Probit.append(radiation_probit_obj.GetProbability(RadDose))
                NodesGroup.OverPressure_Probit.append(pressure_probit_obj.GetProbability(OVPDose))        

                #Append the damaged result to the provide list
                NodesGroup.isDamagedList.append(isDead)
                
                #Record data if there is no 
                if isDead==False:
                    #Record Data to store them in object for further requeirments
                    NodesGroup.DamageSource.append(None)
                    NodesGroup.DamageSourceTag.append(None)
                    NodesGroup.DamageSourceDose.append(None)
                    NodesGroup.DamageSourceType.append(None) 
        
        return 