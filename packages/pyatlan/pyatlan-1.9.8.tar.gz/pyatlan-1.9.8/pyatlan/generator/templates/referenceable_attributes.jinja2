
    class Attributes(AtlanObject):
        {%- for attribute_def in entity_def.attribute_defs %}
        {%- set type = attribute_def.typeName | get_type %}
        {%- set default_value = "''" if attribute_def.name == "qualifiedName" else "None" %}
        {{attribute_def.name | to_snake_case }}: Optional[{{type}}]= Field({{ default_value }}, description='' , alias='{{attribute_def.name}}')
        {%- endfor %}
        {%- for attribute_def in entity_def.relationship_attribute_defs %}
        {%- set type = attribute_def.typeName | get_type %}
        {{attribute_def.name | to_snake_case }}: {% if attribute_def.isOptional %}Optional[{% endif %}{{type}}{% if attribute_def.isOptional %}]{% endif %} = Field({% if attribute_def.isOptional %}None,{% endif %} description='',  alias='{{attribute_def.name}}') # relationship
        {%- endfor %}

        def validate_required(self):
            pass

    TYPE_NAME: ClassVar[KeywordTextField] = InternalKeywordTextField(
        "typeName", "__typeName.keyword", "__typeName", "__typeName"
    )
    """Type of the asset. For example Table, Column, and so on."""

    GUID: ClassVar[KeywordField] = InternalKeywordField("guid", "__guid", "__guid")
    """Globally unique identifier (GUID) of any object in Atlan."""

    CREATED_BY: ClassVar[KeywordField] = InternalKeywordField(
        "createdBy", "__createdBy", "__createdBy"
    )
    """Atlan user who created this asset."""

    UPDATED_BY: ClassVar[KeywordField] = InternalKeywordField(
        "updatedBy", "__modifiedBy", "__modifiedBy"
    )
    """Atlan user who last updated the asset."""

    STATUS: ClassVar[KeywordField] = InternalKeywordField(
        "status", "__state", "__state"
    )
    """Asset status in Atlan (active vs deleted)."""

    ATLAN_TAGS: ClassVar[KeywordTextField] = InternalKeywordTextField(
        "classificationNames",
        "__traitNames",
        "__classificationsText",
        "__classificationNames",
    )
    """
    All directly-assigned Atlan tags that exist on an asset, searchable by internal hashed-string ID of the Atlan tag.
    """

    PROPAGATED_ATLAN_TAGS: ClassVar[KeywordTextField] = InternalKeywordTextField(
        "classificationNames",
        "__propagatedTraitNames",
        "__classificationsText",
        "__propagatedClassificationNames",
    )
    """All propagated Atlan tags that exist on an asset, searchable by internal hashed-string ID of the Atlan tag."""

    ASSIGNED_TERMS: ClassVar[KeywordTextField] = InternalKeywordTextField(
        "meanings", "__meanings", "__meaningsText", "__meanings"
    )
    """All terms attached to an asset, searchable by the term's qualifiedName."""

    SUPER_TYPE_NAMES: ClassVar[KeywordTextField] = InternalKeywordTextField(
        "typeName", "__superTypeNames.keyword", "__superTypeNames", "__superTypeNames"
    )
    """All super types of an asset."""

    CREATE_TIME: ClassVar[NumericField] = InternalNumericField(
        "createTime", "__timestamp", "__timestamp"
    )
    """Time (in milliseconds) when the asset was created."""

    UPDATE_TIME: ClassVar[NumericField] = InternalNumericField(
        "updateTime", "__modificationTimestamp", "__modificationTimestamp"
    )
    """Time (in milliseconds) when the asset was last updated."""

    QUALIFIED_NAME: ClassVar[KeywordTextField] = KeywordTextField(
        "qualifiedName", "qualifiedName", "qualifiedName.text"
    )
    """Unique fully-qualified name of the asset in Atlan."""

    type_name: str = Field("Referenceable", description='Name of the type definition that defines this instance.\n'
    )
    _metadata_proxy: CustomMetadataProxy = PrivateAttr()
    attributes: {{entity_def.name}}.Attributes = Field(
        default_factory = lambda : {{entity_def.name}}.Attributes(),
        description='Map of attributes in the instance and their values. The specific keys of this map will vary '
                    'by type, so are described in the sub-types of this schema.\n',
    )
    business_attributes: Optional[dict[str, Any]] = Field(
        None,
        description='Map of custom metadata attributes and values defined on the entity.\n',
        alias='businessAttributes'
    )
    created_by: Optional[str] = Field(
        None,
        description='Username of the user who created the object.\n',
        example='jsmith',
    )
    create_time: Optional[int] = Field(
        None,
        description='Time (epoch) at which this object was created, in milliseconds.\n',
        example=1648852296555,
    )
    delete_handler: Optional[str] = Field(
        None,
        description="Details on the handler used for deletion of the asset.",
        example="Hard",
    )
    guid: str = Field(
        "",
        description='Unique identifier of the entity instance.\n',
        example='917ffec9-fa84-4c59-8e6c-c7b114d04be3',
    )
    is_incomplete: Optional[bool] = Field(True, description='', example=True)
    labels: Optional[list[str]] = Field(None, description='Internal use only.')
    relationship_attributes: Optional[dict[str, Any]] = Field(
        None,
        description='Map of relationships for the entity. The specific keys of this map will vary by type, '
                    'so are described in the sub-types of this schema.\n',
    )
    status: Optional[EntityStatus] = Field(
        None,
        description="Status of the entity",
        example=EntityStatus.ACTIVE
    )
    updated_by: Optional[str] = Field(
        None,
        description='Username of the user who last assets_updated the object.\n',
        example='jsmith',
    )
    update_time: Optional[int] = Field(
        None,
        description='Time (epoch) at which this object was last assets_updated, in milliseconds.\n',
        example=1649172284333,
    )
    version: Optional[int] = Field(
        None, description='Version of this object.\n', example=2
    )
    atlan_tags: Optional[list[AtlanTag]] = Field(
        None, description="Atlan tags", alias="classifications"
    )
    classification_names: Optional[list[str]] = Field(
        None, description="The names of the classifications that exist on the asset."
    )
    display_text: Optional[str] = Field(
        None,
        description="Human-readable name of the entity..\n",
    )
    entity_status: Optional[str] = Field(
        None,
        description="Status of the entity (if this is a related entity).\n",
    )
    relationship_guid: Optional[str] = Field(
        None,
        description="Unique identifier of the relationship (when this is a related entity).\n",
    )
    relationship_status: Optional[str] = Field(
        None,
        description="Status of the relationship (when this is a related entity).\n",
    )
    relationship_type: Optional[str] = Field(
        None,
        description="Status of the relationship (when this is a related entity).\n",
    )
    meaning_names: Optional[list[str]] = Field(
        None, description="Names of assigned_terms that have been linked to this asset."
    )
    meanings: Optional[list[Meaning]] = Field(
        None, description="", alias="meanings"
    )
    custom_attributes: Optional[dict[str, Any]] = Field(None, description="", alias="customAttributes")
    scrubbed: Optional[bool] = Field(
        None, description="", alias="fields removed from results"
    )
    pending_tasks: Optional[list[str]] = Field(None)

    unique_attributes: Optional[dict[str, Any]] = Field(None)

    append_relationship_attributes: Optional[dict[str, Any]] = Field(
        None,
        alias="appendRelationshipAttributes",
        description="Map of append relationship attributes.",
    )
    remove_relationship_attributes: Optional[dict[str, Any]] = Field(
        None,
        alias="removeRelationshipAttributes",
        description="Map of remove relationship attributes.",
    )
    semantic: Optional[SaveSemantic] = Field(
        exclude=True,
        description=(
            "Semantic for how this relationship should be saved, "
            "if used in an asset request on which `.save()` is called."
        ),
    )
