# coding: utf-8


"""
IGNORE:
    Nutanix Licensing Versioned APIs

    licensing desc placeholder  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_licensing_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_licensing_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseCategoryEnum import LicenseCategoryEnum  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.LicenseTypeEnum import LicenseTypeEnum  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.ScopeEnum import ScopeEnum  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.SubCategoryEnum import SubCategoryEnum  # noqa: F401,E501
from ntnx_licensing_py_client.models.licensing.v4.config.TypeEnum import TypeEnum  # noqa: F401,E501

class Feature(ExternalizableAbstractModel):

    """Response object containing feature details like name, description, license type and category mapping and others

    :param name: (:attr:`name`) Name of feature like dp_recovery, dp_backup_tiering
    :type name: 
    :param type: (:attr:`type`) 
    :type type: 
    :param value: (:attr:`value`) Value of feature, it could be true, false or integer
    :type value: 
    :param license_type: (:attr:`license_type`) 
    :type license_type: 
    :param license_category: (:attr:`license_category`) 
    :type license_category: 
    :param license_sub_category: (:attr:`license_sub_category`) 
    :type license_sub_category: 
    :param scope: (:attr:`scope`) 
    :type scope: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'type': 'licensing.v4.config.TypeEnum',
        'value': 'str',
        'license_type': 'licensing.v4.config.LicenseTypeEnum',
        'license_category': 'licensing.v4.config.LicenseCategoryEnum',
        'license_sub_category': 'licensing.v4.config.SubCategoryEnum',
        'scope': 'licensing.v4.config.ScopeEnum',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'value': 'value',
        'license_type': 'licenseType',
        'license_category': 'licenseCategory',
        'license_sub_category': 'licenseSubCategory',
        'scope': 'scope',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, type=None, value=None, license_type=None, license_category=None, license_sub_category=None, scope=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__type = None
        self.__value = None
        self.__license_type = None
        self.__license_category = None
        self.__license_sub_category = None
        self.__scope = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if type is not None:
            self.__type = type
        if value is not None:
            self.__value = value
        if license_type is not None:
            self.__license_type = license_type
        if license_category is not None:
            self.__license_category = license_category
        if license_sub_category is not None:
            self.__license_sub_category = license_sub_category
        if scope is not None:
            self.__scope = scope

    def _initialize_object_type(self):
        return 'licensing.v4.config.Feature'

    def _initialize_object_version(self):
        return 'v4.r0.a1'


    @property
    def name(self):
        """
        Name of feature like dp_recovery, dp_backup_tiering

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self.__name = name

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.TypeEnum`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def value(self):
        """
        Value of feature, it could be true, false or integer

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__value

    @value.setter
    def value(self, value):
        if value is not None and len(value) > 50:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `50`")  # noqa: E501

        self.__value = value

    @property
    def license_type(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.LicenseTypeEnum`
        """  # noqa: E501
        return self.__license_type

    @license_type.setter
    def license_type(self, license_type):

        self.__license_type = license_type

    @property
    def license_category(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.LicenseCategoryEnum`
        """  # noqa: E501
        return self.__license_category

    @license_category.setter
    def license_category(self, license_category):

        self.__license_category = license_category

    @property
    def license_sub_category(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.SubCategoryEnum`
        """  # noqa: E501
        return self.__license_sub_category

    @license_sub_category.setter
    def license_sub_category(self, license_sub_category):

        self.__license_sub_category = license_sub_category

    @property
    def scope(self):
        """
        

        :type:
            :class:`~ntnx_licensing_py_client.models.licensing.v4.config.ScopeEnum`
        """  # noqa: E501
        return self.__scope

    @scope.setter
    def scope(self, scope):

        self.__scope = scope

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Feature, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

