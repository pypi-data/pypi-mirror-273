"use strict";(self.webpackChunkjupyterlab_ws_chat=self.webpackChunkjupyterlab_ws_chat||[]).push([[698],{2698:(e,t,n)=>{n.r(t),n.d(t,{default:()=>g});var i=n(101),s=n(9626),o=n(5923),r=n(4236),a=n(2825),c=n(8702),l=n(7861),d=n(7262);class h extends i.ChatModel{constructor(e={}){var t;super(e),this._socket=null,this._sendResolverQueue=new Map,this._connectionInitialized=new d.PromiseDelegate,this.serverSettings=null!==(t=e.serverSettings)&&void 0!==t?t:l.ServerConnection.makeSettings()}async initialize(){this._initialize(),await this._connectionInitialized.promise}addMessage(e){return e.id=d.UUID.uuid4(),new Promise((t=>{var n;null===(n=this._socket)||void 0===n||n.send(JSON.stringify(e)),this._sendResolverQueue.set(e.id,t)}))}async getHistory(){let e={messages:[]};try{e=await async function(e="",t={}){const n=l.ServerConnection.makeSettings(),i=c.URLExt.join(n.baseUrl,"api/chat",e);let s;try{s=await l.ServerConnection.makeRequest(i,t,n)}catch(e){throw new l.ServerConnection.NetworkError(e)}let o=await s.text();if(o.length>0)try{o=JSON.parse(o)}catch(e){console.log("Not a JSON response body.",s)}if(!s.ok)throw new l.ServerConnection.ResponseError(s,o.message||o);return o}("history",{method:"GET"})}catch(e){return Promise.reject(e)}return e}dispose(){super.dispose();const e=this._socket;e&&(this._socket=null,e.onopen=()=>{},e.onerror=()=>{},e.onmessage=()=>{},e.onclose=()=>{},e.close())}messageAdded(e){var t;"msg"===e.type?(("string"!=typeof e.sender?e.sender.id:e.sender)===this.id&&(null===(t=this._sendResolverQueue.get(e.id))||void 0===t||t(!0)),super.messageAdded(e)):"connection"===e.type&&(this.id=e.client_id,this._connectionInitialized.resolve(!0))}_onClose(e){if(this._connectionInitialized.reject(new Error("Chat UI websocket disconnected")),console.error("Chat UI websocket disconnected"),1006===e.code){const e=1;console.info(`Will try to reconnect in ${e} s.`),setTimeout((async()=>await this.initialize()),1e3*e)}}_initialize(){if(this.isDisposed)return;console.log("Creating a new websocket connection for chat...");const{token:e,WebSocket:t,wsUrl:n}=this.serverSettings,i=c.URLExt.join(n,"api/chat")+(e?`?token=${encodeURIComponent(e)}`:""),s=this._socket=new t(i);s.onclose=e=>this._onClose(e),s.onerror=e=>console.error(e),s.onmessage=e=>e.data&&this.messageAdded(JSON.parse(e.data))}}const u="jupyterlab-ws-chat:chat",g={id:u,description:"A chat extension for Jupyterlab",autoStart:!0,optional:[s.ILayoutRestorer,a.ISettingRegistry,o.IThemeManager],requires:[r.IRenderMimeRegistry],activate:async(e,t,n,s,o)=>{const r=new h;let a=!1;function c(e){a=e.get("sendWithShiftEnter").composite,r.config={sendWithShiftEnter:a}}Promise.all([e.restored,null==s?void 0:s.load(u)]).then((([,e])=>{e?(c(e),e.changed.connect(c)):console.warn("The SettingsRegistry is not loaded for the chat extension")})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}));let l=null;try{await r.initialize(),l=(0,i.buildChatSidebar)(r,o,t)}catch(e){l=(0,i.buildErrorWidget)(o)}e.shell.add(l,"left",{rank:2e3}),n&&n.add(l,"jupyter-chat"),console.log("Chat extension initialized")}}}}]);