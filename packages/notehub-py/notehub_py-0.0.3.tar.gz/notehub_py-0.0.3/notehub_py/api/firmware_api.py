# coding: utf-8

"""
    Notehub API

    The OpenAPI definition for the Notehub.io API. 

    The version of the OpenAPI document: 1.0.0
    Contact: engineering@blues.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictStr
from typing import List, Optional
from notehub_py.models.firmware_info import FirmwareInfo

from notehub_py.api_client import ApiClient, RequestSerialized
from notehub_py.api_response import ApiResponse
from notehub_py.rest import RESTResponseType


class FirmwareApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_firmware_info(
        self,
        project_uid: StrictStr,
        product_uid: Optional[StrictStr] = None,
        firmware_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        filename: Optional[StrictStr] = None,
        md5: Optional[StrictStr] = None,
        unpublished: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[FirmwareInfo]:
        """get_firmware_info

        Get Available Firmware Information

        :param project_uid: (required)
        :type project_uid: str
        :param product_uid:
        :type product_uid: str
        :param firmware_type:
        :type firmware_type: str
        :param version:
        :type version: str
        :param target:
        :type target: str
        :param filename:
        :type filename: str
        :param md5:
        :type md5: str
        :param unpublished:
        :type unpublished: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_firmware_info_serialize(
            project_uid=project_uid,
            product_uid=product_uid,
            firmware_type=firmware_type,
            version=version,
            target=target,
            filename=filename,
            md5=md5,
            unpublished=unpublished,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FirmwareInfo]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_firmware_info_with_http_info(
        self,
        project_uid: StrictStr,
        product_uid: Optional[StrictStr] = None,
        firmware_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        filename: Optional[StrictStr] = None,
        md5: Optional[StrictStr] = None,
        unpublished: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[FirmwareInfo]]:
        """get_firmware_info

        Get Available Firmware Information

        :param project_uid: (required)
        :type project_uid: str
        :param product_uid:
        :type product_uid: str
        :param firmware_type:
        :type firmware_type: str
        :param version:
        :type version: str
        :param target:
        :type target: str
        :param filename:
        :type filename: str
        :param md5:
        :type md5: str
        :param unpublished:
        :type unpublished: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_firmware_info_serialize(
            project_uid=project_uid,
            product_uid=product_uid,
            firmware_type=firmware_type,
            version=version,
            target=target,
            filename=filename,
            md5=md5,
            unpublished=unpublished,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FirmwareInfo]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_firmware_info_without_preload_content(
        self,
        project_uid: StrictStr,
        product_uid: Optional[StrictStr] = None,
        firmware_type: Optional[StrictStr] = None,
        version: Optional[StrictStr] = None,
        target: Optional[StrictStr] = None,
        filename: Optional[StrictStr] = None,
        md5: Optional[StrictStr] = None,
        unpublished: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_firmware_info

        Get Available Firmware Information

        :param project_uid: (required)
        :type project_uid: str
        :param product_uid:
        :type product_uid: str
        :param firmware_type:
        :type firmware_type: str
        :param version:
        :type version: str
        :param target:
        :type target: str
        :param filename:
        :type filename: str
        :param md5:
        :type md5: str
        :param unpublished:
        :type unpublished: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_firmware_info_serialize(
            project_uid=project_uid,
            product_uid=product_uid,
            firmware_type=firmware_type,
            version=version,
            target=target,
            filename=filename,
            md5=md5,
            unpublished=unpublished,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FirmwareInfo]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_firmware_info_serialize(
        self,
        project_uid,
        product_uid,
        firmware_type,
        version,
        target,
        filename,
        md5,
        unpublished,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_uid is not None:
            _path_params['projectUID'] = project_uid
        # process the query parameters
        if product_uid is not None:
            
            _query_params.append(('productUID', product_uid))
            
        if firmware_type is not None:
            
            _query_params.append(('firmwareType', firmware_type))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        if target is not None:
            
            _query_params.append(('target', target))
            
        if filename is not None:
            
            _query_params.append(('filename', filename))
            
        if md5 is not None:
            
            _query_params.append(('md5', md5))
            
        if unpublished is not None:
            
            _query_params.append(('unpublished', unpublished))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/projects/{projectUID}/firmware',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


