Metadata-Version: 2.1
Name: touchpy
Version: 0.0.3
Summary: Tools to make working with TouchDesigner and Python easier.
Author-email: Keith Lostracco <keith@intentdev.io>, Idzard Kwadijk <idzard@intentdev.io>
License: # PolyForm Noncommercial License 1.0.0
        
        <https://polyformproject.org/licenses/noncommercial/1.0.0>
        
        ## Acceptance
        
        In order to get any license under these terms, you must agree
        to them as both strict obligations and conditions to all
        your licenses.
        
        ## Copyright License
        
        The licensor grants you a copyright license for the
        software to do everything you might do with the software
        that would otherwise infringe the licensor's copyright
        in it for any permitted purpose.  However, you may
        only distribute the software according to [Distribution
        License](#distribution-license) and make changes or new works
        based on the software according to [Changes and New Works
        License](#changes-and-new-works-license).
        
        ## Distribution License
        
        The licensor grants you an additional copyright license
        to distribute copies of the software.  Your license
        to distribute covers distributing the software with
        changes and new works permitted by [Changes and New Works
        License](#changes-and-new-works-license).
        
        ## Notices
        
        You must ensure that anyone who gets a copy of any part of
        the software from you also gets a copy of these terms or the
        URL for them above, as well as copies of any plain-text lines
        beginning with `Required Notice:` that the licensor provided
        with the software.  For example:
        
        > Required Notice: Intent Productions, Inc. (http://intentdev.io)
        
        ## Changes and New Works License
        
        The licensor grants you an additional copyright license to
        make changes and new works based on the software for any
        permitted purpose.
        
        ## Patent License
        
        The licensor grants you a patent license for the software that
        covers patent claims the licensor can license, or becomes able
        to license, that you would infringe by using the software.
        
        ## Noncommercial Purposes
        
        Any noncommercial purpose is a permitted purpose.
        
        ## Personal Uses
        
        Personal use for research, experiment, and testing for
        the benefit of public knowledge, personal study, private
        entertainment, hobby projects, amateur pursuits, or religious
        observance, without any anticipated commercial application,
        is use for a permitted purpose.
        
        ## Noncommercial Organizations
        
        Use by any charitable organization, educational institution,
        public research organization, public safety or health
        organization, environmental protection organization,
        or government institution is use for a permitted purpose
        regardless of the source of funding or obligations resulting
        from the funding.
        
        ## Fair Use
        
        You may have "fair use" rights for the software under the
        law. These terms do not limit them.
        
        ## No Other Rights
        
        These terms do not allow you to sublicense or transfer any of
        your licenses to anyone else, or prevent the licensor from
        granting licenses to anyone else.  These terms do not imply
        any other licenses.
        
        ## Patent Defense
        
        If you make any written claim that the software infringes or
        contributes to infringement of any patent, your patent license
        for the software granted under these terms ends immediately. If
        your company makes such a claim, your patent license ends
        immediately for work on behalf of your company.
        
        ## Violations
        
        The first time you are notified in writing that you have
        violated any of these terms, or done anything with the software
        not covered by your licenses, your licenses can nonetheless
        continue if you come into full compliance with these terms,
        and take practical steps to correct past violations, within
        32 days of receiving notice.  Otherwise, all your licenses
        end immediately.
        
        ## No Liability
        
        ***As far as the law allows, the software comes as is, without
        any warranty or condition, and the licensor will not be liable
        to you for any damages arising out of these terms or the use
        or nature of the software, under any kind of legal claim.***
        
        ## Definitions
        
        The **licensor** is the individual or entity offering these
        terms, and the **software** is the software the licensor makes
        available under these terms.
        
        **You** refers to the individual or entity agreeing to these
        terms.
        
        **Your company** is any legal entity, sole proprietorship,
        or other kind of organization that you work for, plus all
        organizations that have control over, are under the control of,
        or are under common control with that organization.  **Control**
        means ownership of substantially all the assets of an entity,
        or the power to direct its management and policies by vote,
        contract, or otherwise.  Control can be direct or indirect.
        
        **Your licenses** are all the licenses granted to you for the
        software under these terms.
        
        **Use** means anything you do with the software requiring one
        of your licenses.
        
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: <3.13,>=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

# TouchPy
Toolkit providing various interconnectivity tools between TouchDesigner and Python.


### Windows Install procedure

#### Without Environment File

#### Dependencies
- Python 3.11
- NumPy 1.26 
	- `pip install numpy` (no install needed if installing PyTorch)
- PyTorch 2.2.1+cu118 (optional only needed if using outTopLink.as_tensor() or inTopLink.from_tensor())
	- `pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118`
- Keyboard (optional)
	- pip install keyboard

#### With Environment File

##### 1. Mamba (optional)
It’s recommended to install Mamba instead of (Ana)conda. If you have Conda installed, remove it first. 
Mamba is a C++ rewrite of (Python based) conda, can download packages in parallel, and is therefore much faster. The mamba commands are exactly the same as for conda, just replace “conda” with “mamba”.

Download and run this Mamba installer:<br>
https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe<br>
During install, enable both options "Create start menu shortcuts" and "Add Miniforge3 to my PATH environment variable" 


##### 2. Setup touchpy environment


- start the mamba prompt by searching for “Miniforge prompt” in Windows Startup menu
- in the mamba prompt, cd to this source directory then enter this command to create a new env called touchpy: 

```
mamba env create -f environment.yml
```
or
```
conda env create -f environment.yml
```

(this can take a few minutes to download and install all packages)


#### 3. Binaries
No installation for TouchPy itself is required at this time. The file touchpy.cp311-win_amd64.pyd must be located either in the working directory or in the system PATH. TouchEngine.dll and cudart64_110.dll must be located beside touchpy.cp311-win_amd64.pyd. The simplest way to use TouchPy is to open a command prompt in the directory that contains both the Python file to execute and the TouchPy module.

## Example Usage

```
import touchpy as tp
import torch
import numpy as np

class MyClass:
	def __init__(self):
		self.running = True

	@staticmethod
	def on_frame(comp, this):
		tensor = comp.out_tops[0].as_tensor()
		tensor = tensor * 2
		comp.in_tops[0].from_tensor(tensor)

		arr = comp.out_chops['anOutChopName'].as_numpy()
		arr += 42
		comp.in_chops[0].from_numpy(arr)

		text = comp.out_dats[0].as_string()
		datTable = tp.DatTable()
		datTable.from_list([['a', 'b', 'c'], ['d', 'e', 'f'], [1, 2, 3]], cast=True)

		color_par = comp.par['Acolorparname']
		color_par.set(.2, .4, .8, 1.) 

		comp.start_next_frame():
		# do work on non-comp members for the next frame here
	
	def run_comp(self, path):
		comp = tp.Comp(path)
		comp.set_on_frame_callback(self.on_frame, self)
		comp.start()


myClass = MyClass()
myClass.run_comp("MyComponent.tox")

```

- See example_run_comp.py for more examples

## Notes
- use `Get-Content logs/touchpy-log.txt -Tail 20 -Wait` to print logs to terminal in real-time

## Comp class
A TouchDesigner component loaded in a TouchEngine instance.

### Methods
- `load_tox(path)`: Loads a .tox file at the specified path.
- `loaded() -> bool`: Returns a boolean indicating whether or not the component is loaded.
- `update(start_next_frame = False)`: Called in a loop repeatedly to update the component.
- `start_next_frame()`: If the `start_next_frame` argument in `update()` is False, this needs to be called after getting and setting all component members.
- `start(update_starts_next_frame=False)`: Starts a loop that calls `update()` repeatedly.
- `stop()`: Stops the loop that calls `update()`.
- `set_on_frame_callback()`: Sets a callback function to be called every frame by the `update()` function when data is ready to be retrieved.
### Members
- `in_tops`: InTopLinks container of InTopLink instances.
- `out_tops`: OutTopLinks container of OutTopLink instances.
- `in_chops`: InChopLinks container of InChopLink instances.
- `out_chops`: OutChopLinks container of OutChopLink instances.
- `in_dats`: InDatLinks container of InDatLink instances.
- `out_dats`: OutDatLinks container of OutDatLink instances.
- `par`: ParLinkCollection of ParLink instances.

## Links class (OutTopLinks, InTopLinks, OutChopLinks, InChopLinks, OutDatLinks, InDatLinks classes)
A container of links.

### Methods
- `num_links()`: Returns the number of links in the container.
- `link_names()`: Returns a list of the names of the links in the container.
### Members
- `[index]`: Returns the link instance at the given index.
- `[name]`: Returns the link instance with the given name.

## ParLinkCollection class
A collection of parameter links.

### Properties
- `count`: The number of parameter links in the collection.
- `names`: A list of names of all available parameter links.

### Subscript Operator
- `[name]`: Gets a parameter link by name.

## OutTopLink class
An output top link.

### Methods
- `cuda_memory()`: Returns a CudaMemory instance.
- `as_dlpack()`: Returns a Dlpack capsule.
- `as_tensor()`: Returns a PyTorch tensor.

## InTopLink class
An input top link.

### Methods
- `copy_cuda_memory(cudamemory)`: Copies the data from a CudaMemory instance.
- `from_dlpack(capsule)`: Sets the data from a Dlpack capsule (overloads for 1, 2, 3, 4 component arrays).
- `from_tensor(tensor)`: Sets the data from a PyTorch tensor (overloads for 1, 2, 3, 4 component arrays).

## OutChopLink class
An output chop link.

### Methods
- `chan_names()`: Returns a list of the channel names.
- `as_numpy()`: Returns a numpy array (will automatically copy the data if needed).
- `as_numpy_ref()`: Returns a numpy array reference (will not copy the data, unless explicitly copied).

## InChopLink class
An input chop link.

### Methods
- `from_numpy(array, names=[])`: Sets the data from a numpy array (2d), with optional channel names (must be exactly the same length as the size of the first dimension of the array).

## DatTable class
A table in a DAT link

### Methods
- `num_rows()`: Returns the number of rows in the table
- `num_cols()`: Returns the number of columns in the table
- `row(index)`: Returns a single row as a list of strings
- `col(index)`: Returns a single column as a list of strings
- `cell(row_index, col_index)`: Returns a cell as a string
- `as_list()`: returns a list of lists each of which is a row in the table
- `from_list(list, cast=False)`: set table data from a list of lists (will use first list in parent list for number of columns)

## OutDatLink class
An output dat link.

### Methods
- `as_string()`: Returns the data as a string.
- `as_table()`: Returns the data as a DatTable instance.
- `getTypeDescription()`: Returns the type description of the data (string or DatTable).

## InDatLink class
An input dat link.

### Methods
- `from_string(string)`: Sets the data as text from a string (DAT will be contain text).
- `from_table(table)`: Sets the data as a table from a DatTable instance.
- `from_list(list)`: Sets the data as a table from a list of lists.

## ParLink class
A parameter link.

### Properties
- `val`: Gets or sets the value of the parameter.

### Methods
- `set(val)`: Sets the value of the parameter. Various overloads for multi-component parameters.
- `get()`: Gets the value of the parameter.

## ParLinkValue types
- Int
- Float
- String
- Color
- Float2
- Float3
- Float4
- Int2
- Int3
- Int4
- Bool

## CUDADataType enum class
An enum class representing CUDA data types.

### Members
- Float32
- Int32
- UInt8

## CudaMemoryShape class
A class representing the shape of a CUDA memory.

### Properties
- `width`
- `height`
- `num_components`
- `component_size`
- `data_type` (CUDADataType)
- `strides` (array of 3 ints)

## CudaMemory class
A class representing CUDA memory.

### Properties
- `ptr`: Gets or sets the pointer to the data.
- `size`: Gets or sets the size of the data.
- `shape`: Gets or sets the shape of the data.

## ComponentMask enum class
An enum class representing component masks for tensors.

### Values
- R
- G
- B
- A
- RGB
- RGBA

## TODO / roadmap
- More functionality for In and Out links to get and set data.
	- get single channel from a chopLink
	- set single channel in a chopLink
	- get single row from a datLink
	- set single row in a datLink
	- etc...
- Implement caching mechanism combined with a lazy loading pattern for ChopLinks and DatLinks.
- Create a singleton class for renderer/VkInstance.
- create option to run update loop in thread in order to run jupyter notebooks/interactive sessions
- Add device, time mode and other arguments to Comp constructor
- Expose frame rate and other timing information to Python.
- Set and get time-based FloatBuffers (chops).
- Display and monitor OutTopLink, tensors, etc. in a viewer window.
- Implement various Python tools and operators for sharing memory with TouchDesigner.
	- Python sharedMemIn/Out for CHOPs (SharedMemFromChop, SharedMemToChop)
	- Python SharedMemFromDat, SharedMemToDat
	- TD cplusplusDAT plugins: sharedMemOutDAT, sharedMemInDAT
	- Python (and internal) SharedMemBlob (for arbitrary data types)
	- TD sharedMemIn/out blob (DAT?) (for C++ and Python, blobs)
		- shared blobs will be publicly exposed but will mostly be used internally for calling, functions and
		setting arbitrary datatypes either in TD or from TD - in custom operators or for Python on extensions. 
- Implement TD FromTensorTOP and TD AsTensorTOP.



