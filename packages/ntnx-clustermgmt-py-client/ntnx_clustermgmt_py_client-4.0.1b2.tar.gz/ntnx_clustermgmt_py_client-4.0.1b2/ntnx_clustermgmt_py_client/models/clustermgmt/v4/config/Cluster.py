# coding: utf-8


"""
IGNORE:
    Nutanix Clustermgmt Versioned APIs

    Manage Hosts, Clusters and other Infrastructure.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterConfigReference import ClusterConfigReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterNetworkReference import ClusterNetworkReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeReference import NodeReference  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.UpgradeStatus import UpgradeStatus  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_clustermgmt_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class Cluster(ExternalizableAbstractModel):

    """

    :param name: (:attr:`name`) Cluster name. This is part of payload for both cluster create & update operations.
    :type name: 
    :param nodes: (:attr:`nodes`) 
    :type nodes: 
    :param config: (:attr:`config`) 
    :type config: 
    :param network: (:attr:`network`) 
    :type network: 
    :param upgrade_status: (:attr:`upgrade_status`) 
    :type upgrade_status: 
    :param vm_count: (:attr:`vm_count`) Number of VMs.
    :type vm_count: 
    :param inefficient_vm_count: (:attr:`inefficient_vm_count`) Number of inefficient VMs.
    :type inefficient_vm_count: 
    :param container_name: (:attr:`container_name`) The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.
    :type container_name: 
    :param run_prechecks_only: (:attr:`run_prechecks_only`) Flag determines whether only prechecks must be run and create cluster operation be skipped.This is an optional param for cluster create operation only.
    :type run_prechecks_only: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'nodes': 'clustermgmt.v4.config.NodeReference',
        'config': 'clustermgmt.v4.config.ClusterConfigReference',
        'network': 'clustermgmt.v4.config.ClusterNetworkReference',
        'upgrade_status': 'clustermgmt.v4.config.UpgradeStatus',
        'vm_count': 'int',
        'inefficient_vm_count': 'int',
        'container_name': 'str',
        'run_prechecks_only': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'nodes': 'nodes',
        'config': 'config',
        'network': 'network',
        'upgrade_status': 'upgradeStatus',
        'vm_count': 'vmCount',
        'inefficient_vm_count': 'inefficientVmCount',
        'container_name': 'containerName',
        'run_prechecks_only': 'runPrechecksOnly',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, nodes=None, config=None, network=None, upgrade_status=None, vm_count=None, inefficient_vm_count=None, container_name=None, run_prechecks_only=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__nodes = None
        self.__config = None
        self.__network = None
        self.__upgrade_status = None
        self.__vm_count = None
        self.__inefficient_vm_count = None
        self.__container_name = None
        self.__run_prechecks_only = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if nodes is not None:
            self.__nodes = nodes
        if config is not None:
            self.__config = config
        if network is not None:
            self.__network = network
        if upgrade_status is not None:
            self.__upgrade_status = upgrade_status
        if vm_count is not None:
            self.__vm_count = vm_count
        if inefficient_vm_count is not None:
            self.__inefficient_vm_count = inefficient_vm_count
        if container_name is not None:
            self.__container_name = container_name
        if run_prechecks_only is not None:
            self.__run_prechecks_only = run_prechecks_only

    def _initialize_object_type(self):
        return 'clustermgmt.v4.config.Cluster'

    def _initialize_object_version(self):
        return 'v4.r0.b2'


    @property
    def name(self):
        """
        Cluster name. This is part of payload for both cluster create & update operations.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 75:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `75`")  # noqa: E501

        self.__name = name

    @property
    def nodes(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.NodeReference`
        """  # noqa: E501
        return self.__nodes

    @nodes.setter
    def nodes(self, nodes):

        self.__nodes = nodes

    @property
    def config(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterConfigReference`
        """  # noqa: E501
        return self.__config

    @config.setter
    def config(self, config):

        self.__config = config

    @property
    def network(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.ClusterNetworkReference`
        """  # noqa: E501
        return self.__network

    @network.setter
    def network(self, network):

        self.__network = network

    @property
    def upgrade_status(self):
        """
        

        :type:
            :class:`~ntnx_clustermgmt_py_client.models.clustermgmt.v4.config.UpgradeStatus`
        """  # noqa: E501
        return self.__upgrade_status

    @upgrade_status.setter
    def upgrade_status(self, upgrade_status):

        self.__upgrade_status = upgrade_status

    @property
    def vm_count(self):
        """
        Number of VMs.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__vm_count

    @vm_count.setter
    def vm_count(self, vm_count):

        self.__vm_count = vm_count

    @property
    def inefficient_vm_count(self):
        """
        Number of inefficient VMs.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__inefficient_vm_count

    @inefficient_vm_count.setter
    def inefficient_vm_count(self, inefficient_vm_count):

        self.__inefficient_vm_count = inefficient_vm_count

    @property
    def container_name(self):
        """
        The name of the default container created as part of cluster creation. This is part of payload for cluster create operation only.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__container_name

    @container_name.setter
    def container_name(self, container_name):

        self.__container_name = container_name

    @property
    def run_prechecks_only(self):
        """
        Flag determines whether only prechecks must be run and create cluster operation be skipped.This is an optional param for cluster create operation only.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__run_prechecks_only

    @run_prechecks_only.setter
    def run_prechecks_only(self, run_prechecks_only):

        self.__run_prechecks_only = run_prechecks_only

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

