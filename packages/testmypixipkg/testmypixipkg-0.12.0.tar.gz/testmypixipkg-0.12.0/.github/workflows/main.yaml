name: CI-CD

# only run on pushes to main or pull requests
on:
  push:
    # push to any branch *
    branches: [main]
  pull_request:
    branches: [main, development]

jobs:
  Unit-Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
        environments: [dev]
        # os: [ubuntu-latest, macos-latest, macos-14, windows-latest]
        # python-version: ["3.12", "3.11", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.7.0
        with:
          environments: ${{ matrix.environments}}
          pixi-version: v0.22.0
          cache: true
          locked: false

      - name: Run pytest
        run: |
          pixi run which python
          pixi run test

      - name: Upload coverage report artifact to be used by Codecov
        # only upload if matrix.os is ubuntu-latest and matrix.python-version is 3.12
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage-report

  Continuous-Deployment:
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    # needs: [Unit-Tests]

    # if pulling to main, deploy to PyPI
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
        environments: [publish]

    # Set up operating system
    runs-on: ${{ matrix.os }}

    # Concurrency is for preventing multiple runs of the same workflow
    concurrency: release

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    # Define job steps
    steps:
      - name: Check-out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          root_options: "-v --config releaserc.toml"

  Publish-To-PyPi:
    needs: Continuous-Deployment
    if: needs.Continuous-Deployment.outputs.released == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
        environments: [publish]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.7.0
        with:
          environments: ${{ matrix.environments}}
          pixi-version: v0.22.0
          cache: true
          locked: false

      - name: Publish to PyPI
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_API_TOKEN }}
          HATCH_INDEX_REPO: https://upload.pypi.org/legacy/
        run: |
          pixi run publish-pypi

  Test-PyPi-Installation:
    needs: Publish-To-PyPi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]
        environments: [publish]

    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using PyPI
        run: |
          pip install testmypixipkg

  Publish-To-Test-PyPi:
    needs: Continuous-Deployment

    if: needs.Continuous-Deployment.outputs.released == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]
        environments: [publish]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.7.0
        with:
          environments: ${{ matrix.environments}}
          pixi-version: v0.22.0
          cache: true
          locked: false

      - name: Publish to TestPyPI
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pixi run publish-test

  Test-TestPypi-Installation:
    needs: Publish-To-Test-PyPi
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]
        environments: [publish]

    steps:
      - name: Checkout the code with tag ${{ needs.Continuous-Deployment.outputs.tag }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Continuous-Deployment.outputs.tag }}

      - name: setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install using TestPyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ testmypixipkg
