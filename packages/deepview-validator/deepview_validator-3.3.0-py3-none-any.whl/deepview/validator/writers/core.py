# Copyright 2022 by Au-Zone Technologies.  All Rights Reserved.
#
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential.
#
# This source code is provided solely for runtime interpretation by Python.
# Modifying or copying any source code is explicitly forbidden.

from __future__ import annotations
from typing import TYPE_CHECKING, Tuple
if TYPE_CHECKING:
    from deepview.validator.evaluators import Parameters
    from deepview.validator.metrics import MetricSummary

import os

class Writer:
    """
    Contains methods that transforms the validation summary object 
    into a formatted string table.
    """
    def __init__(self):
        self._header = None
        self._summary = None
        self._timigns = None

    def format_detection_summary(
            self, 
            summary: MetricSummary, 
            parameters: Parameters) -> Tuple[str, str, str]:
        """
        Formats the detection summary object into a string table.
        
        Parameters
        ----------
            summary: Summary
                This is the summary metrics generated by validation.

            parameters: Parameters
                This contains information regarding the model and
                validation parameters.

        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation table showing the metrics.

            timings: str
                The formatted timings of the model.
        """
        header = \
            """            Detection Validation Summary
            """
        timings = summary.timings
        
        table_summary = \
        f"""            ____________________________________________________
            | Model: {str(summary.model).ljust(42)}|
            | Dataset: {str(summary.dataset).ljust(40)}|
            |__________________________________________________|
            | Ground Truths | True Positives | False Negatives |
            |---------------|----------------|-----------------|
            |{str(summary.ground_truths).center(15)}|{str(summary.true_positives).center(16)}|{str(summary.false_negatives).center(17)}|
            |_______________|________________|_________________|
            |    Classification FP    |    Localization FP     |
            |-------------------------|------------------------|
            |{str(summary.classification_false_positives).center(25)}|{str(summary.localization_false_positives).center(24)}|
            |_________________________|________________________|
            |               | Overall Accuracy  |{str(round(summary.overall_accuracy*100, 2)).center(14)}|
            |               | mACC@0.5          |{str(round(summary.macc.get('0.50')*100, 2)).center(14)}|
            | Accuracy (%)  | mACC@0.75         |{str(round(summary.macc.get('0.75')*100, 2)).center(14)}|
            |               | mACC@0.5-0.95     |{str(round(summary.macc.get('0.50:0.95')*100, 2)).center(14)}|
            |_______________|___________________|______________|
            |               | Overall Precision |{str(round(summary.overall_precision*100, 2)).center(14)}|
            |               | mAP@0.5           |{str(round(summary.map.get('0.50')*100, 2)).center(14)}|
            | Precision (%) | mAP@0.75          |{str(round(summary.map.get('0.75')*100, 2)).center(14)}|
            |               | mAP@0.5-0.95      |{str(round(summary.map.get('0.50:0.95')*100, 2)).center(14)}|
            |_______________|___________________|______________|
            |               | Overall Recall    |{str(round(summary.overall_recall*100, 2)).center(14)}|
            |               | mAR@0.5           |{str(round(summary.mar.get('0.50')*100, 2)).center(14)}|
            | Recall (%)    | mAR@0.75          |{str(round(summary.mar.get('0.75')*100, 2)).center(14)}|
            |               | mAR@0.5-0.95      |{str(round(summary.mar.get('0.50:0.95')*100, 2)).center(14)}|
            |_______________|___________________|______________|
            |               | 0.5               |{str(round(summary.localization_fp_error.get('0.50')*100, 2)).center(14)}|
            | Localization  | 0.75              |{str(round(summary.localization_fp_error.get('0.75')*100, 2)).center(14)}|
            | FP Error (%)  | 0.5-0.95          |{str(round(summary.localization_fp_error.get('0.50:0.95')*100, 2)).center(14)}|
            |_______________|___________________|______________|
            |               | 0.5               |{str(round(summary.classification_fp_error.get('0.50')*100, 2)).center(14)}|
            | Classification| 0.75              |{str(round(summary.classification_fp_error.get('0.75')*100, 2)).center(14)}|
            | FP Error (%)  | 0.5-0.95          |{str(round(summary.classification_fp_error.get('0.50:0.95')*100, 2)).center(14)}|
            |_______________|___________________|______________|
        """

        if summary.append_centers:
            table_summary += \
        f"""    |               | x-center          |{str(round(summary.mae_centers.get('x-center-mae'),4)).center(14)}|
            |     Mean      | y-center          |{str(round(summary.mae_centers.get('y-center-mae'),4)).center(14)}|
            |   Absolute    | z-center          |{str(round(summary.mae_centers.get('z-center-mae'),4)).center(14)}|
            |    Error      | center distances  |{str(round(summary.mae_centers.get('distance-mae'),4)).center(14)}|
            |_______________|___________________|______________|
        """

        if summary.model != "Training Model":
            table_summary += self.format_parameters(parameters)

        if timings is not None:
            timings = self.format_timings(timings)
        return header, table_summary, timings

    def format_segmentation_summary(
            self, 
            summary: MetricSummary, 
            parameters: Parameters) -> Tuple[str, str, str]:
        """
        Formats the dictionary segmentation summary into a string table.
        
        Parameters
        ----------
            summary: Summary
                This is the summary metrics generated by validation.

            parameters: Parameters
                This contains information regarding the model and
                validation parameters.
                
        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation showing the metrics.

            timings: str
                The formatted timings of the model.
        """
        header = \
            """            Segmentation Validation Summary
            """
        timings = summary.timings

        table_summary = \
        f"""            ______________________________________________________
            | Model: {summary.model.ljust(44)}|
            | Engine: {parameters.engine.ljust(43)}|
            | Dataset: {summary.dataset.ljust(42)}|
            | Ground Truths: {str(summary.ground_truths).ljust(36)}|
            | Predictions: {str(summary.predictions).ljust(38)}|
            | Union: {str(summary.union).ljust(44)}|
            |____________________________________________________|
            |     True Predictions    |    False Predictions     |  
            |-------------------------|--------------------------|
            |{str(summary.true_predictions).center(25)}|{str(summary.false_predictions).center(26)}|
            |_________________________|__________________________|
            |  Overall Accuracy  (%)  |{str(round(summary.overall_accuracy*100, 2)).center(26)}| 
            |  Overall Precision (%)  |{str(round(summary.overall_precision*100, 2)).center(26)}| 
            |  Overall Recall    (%)  |{str(round(summary.overall_recall*100, 2)).center(26)}|
            |_________________________|__________________________|
            |  Average Accuracy  (%)  |{str(round(summary.average_accuracy*100, 2)).center(26)}| 
            |  Average Precision (%)  |{str(round(summary.average_precision*100, 2)).center(26)}|
            |  Average Recall    (%)  |{str(round(summary.average_recall*100, 2)).center(26)}|
            |_________________________|__________________________|
        """

        if os.path.splitext(summary.model)[1].lower() != "" or \
            summary.model == "Training Model":
            timings = self.format_timings(timings)
        return header, table_summary, timings

    def format_pose_summary(
            self, 
            summary: MetricSummary, 
            parameters: Parameters) -> Tuple[str, str, str]:
        """
        Formats the dictionary pose summary into a string table.
       
        Parameters
        ----------
            summary: Summary
                This is the summary metrics generated by validation.

            parameters: Parameters
                This contains information regarding the model and
                validation parameters.
                
        Returns
        -------
            header: str
                The validation header message.

            summary: str
                The formatted validation showing the metrics.

            timings: str
                The formatted timings of the model.
        """
        header = \
            """            Pose Validation Summary
            """
        timings = summary.timings

        table_summary = self.format_pose_table(summary, parameters)

        if (os.path.splitext(summary.model)[1].lower() != "" or \
            summary.model == "Training Model") and timings is not None:
            timings = self.format_timings(timings)
        return header, table_summary, timings
    
    @staticmethod
    def format_pose_table(
        summary: MetricSummary, parameters: Parameters) -> str:
        """
        Parameters
        ----------
            summary: Summary
                This is the summary metrics generated by validation.

            parameters: Parameters
                This contains information regarding the model and
                validation parameters.

        Returns
        -------
            table_summary: str
                This is the formatted table showing the pose metrics to 
                allow flexibility for any number of unique angle types from
                either euler, quaternion, or any other forms of pose
                representations.
        """

        if len(summary.angles_mae) == 3:
            table_summary = \
        f"""            ______________________________________________________
            | Model: {summary.model.ljust(44)}|
            | Engine: {parameters.engine.ljust(43)}|
            | Dataset: {summary.dataset.ljust(42)}|
            |____________________________________________________|
            |               | Roll  |{str(round(summary.angles_mae[0],2)).center(28)}|
            |     Mean      |_______|____________________________|
            |   Absolute    | Pitch |{str(round(summary.angles_mae[1], 2)).center(28)}|
            |     Error     |_______|____________________________|
            |               | Yaw   |{str(round(summary.angles_mae[2], 2)).center(28)}|
            |_______________|_______|____________________________|
        """
        
        elif len(summary.angles_mae) == 4:
            table_summary = \
        f"""            ______________________________________________________
            | Model: {summary.model.ljust(44)}|
            | Engine: {parameters.engine.ljust(43)}|
            | Dataset: {summary.dataset.ljust(42)}|
            |____________________________________________________|
            |               | real  |{str(round(summary.angles_mae[0],2)).center(28)}|
            |               |_______|____________________________|
            |     Mean      |   i   |{str(round(summary.angles_mae[1], 2)).center(28)}|
            |   Absolute    |_______|____________________________|
            |     Error     |   j   |{str(round(summary.angles_mae[2], 2)).center(28)}|
            |               |_______|____________________________|
            |               |   k   |{str(round(summary.angles_mae[3], 2)).center(28)}|
            |_______________|_______|____________________________|
        """
        else:
            table_summary = \
        f"""            ______________________________________________________
            | Model: {summary.model.ljust(44)}|
            | Engine: {parameters.engine.ljust(43)}|
            | Dataset: {summary.dataset.ljust(42)}|
            |____________________________________________________|
            |                Mean Absolute Error                 |
            |____________________________________________________|
        """ 
            for i in range(len(summary.angles_mae)):
                table_summary += \
        f"""
            | angle_{i} |{str(round(summary.angles_mae[i], 2)).center(40)}|
            |___________|_________________________________________________|
        """
        return table_summary
            
    @staticmethod
    def format_timings(timings: dict) -> str:
        """
        Formats the dictionary timings summary into a string table.

        Parameters
        ----------
            timings: dict
                This contains the timing information.        

        Returns
        -------
            timings: str
                The formatted timings in a table in milliseconds.

                .. code-block:: python

                    {
                    'min_inference_time': minimum time to produce bounding boxes,
                    'max_inference_time': maximum time to produce bounding boxes,
                    'min_input_time': minimum time to load an image,
                    'max_input_time': maximum time to load an image,
                    'min_decoding_time': minimum time to process model
                                        predictions,
                    'max_decoding_time': maximum time to process model
                                        predictions,
                    'avg_decoding': average time to process model predictions,
                    'avg_input': average time to load an image,
                    'avg_inference': average time to produce bounding boxes,
                    }
        """

        if isinstance(timings.get('min_input_time'), float):
            for key, time in timings.items():
                timings[key] = str(round(time, 2))

            timings = \
    f"""        ____________________________________________________________
        | Input Time (ms) | Inference Time (ms) | Decode Time (ms) |
        |-----------------|---------------------|------------------|
        | min: {timings.get('min_input_time').ljust(11)}| min: {timings.get('min_inference_time').ljust(15)}| min: {timings.get('min_decoding_time').ljust(12)}|
        | max: {timings.get('max_input_time').ljust(11)}| max: {timings.get('max_inference_time').ljust(15)}| max: {timings.get('max_decoding_time').ljust(12)}|
        | avg: {timings.get('avg_input').ljust(11)}| avg: {timings.get('avg_inference').ljust(15)}| avg: {timings.get('avg_decoding').ljust(12)}|
        |_________________|_____________________|__________________|
    """
        return timings

    @staticmethod
    def format_parameters(parameters: Parameters) -> str:
        """
        Formats the parameters object into a string table.
        
        Parameters
        ----------
            parameters: Parameters
                This contains the parameters that was used
                for running and validating the model.

        Returns
        -------
            parameters: str
                The formatted parameters as a string table.
        """
        return \
        f"""    ____________________________________________________
            |     validation iou threshold: {str(parameters.validation_iou).ljust(19)}|
            |     detection iou threshold: {str(parameters.detection_iou).ljust(20)}|
            |     validation score threshold: {str(parameters.validation_score).ljust(17)}|
            |     detection score threshold: {str(parameters.detection_score).ljust(18)}|
            |     nms: {str(parameters.nms).ljust(40)}|
            |     normalization: {str(parameters.normalization).ljust(30)}|
            |     engine: {str(parameters.engine).ljust(37)}|
            |     maximum detections: {str(parameters.max_detections).ljust(25)}|
            |     warmup: {str(parameters.warmup).ljust(37)}|
            |     label offset: {str(parameters.label_offset).ljust(31)}|
            |     metric: {str(parameters.metric).ljust(37)}|
            |     box clamp dimensions: {str(parameters.clamp_boxes).ljust(23)}|
            |     ignore box dimensions: {str(parameters.ignore_boxes).ljust(22)}|
            |__________________________________________________|
        """