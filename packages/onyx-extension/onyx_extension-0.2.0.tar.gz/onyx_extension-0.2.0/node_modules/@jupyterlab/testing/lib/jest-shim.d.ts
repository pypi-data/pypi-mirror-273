declare const createContextualFragment: (html: string) => Element;
declare class ResizeObserverMock {
    constructor(_callback: any);
    observe(_target: any, _options?: any): void;
    unobserve(_target: any): void;
    disconnect(): void;
}
declare class DataTransferItemMock implements DataTransferItem {
    protected format: string;
    protected value: string;
    constructor(format: string, value: string);
    get kind(): string;
    get type(): string;
    getAsString(callback: (v: string) => undefined): undefined;
    getAsFile(): any;
    webkitGetAsEntry(): any;
}
declare class DataTransferMock implements DataTransfer {
    dropEffect: DataTransfer['dropEffect'];
    effectAllowed: DataTransfer['dropEffect'];
    files: DataTransfer['files'];
    get items(): DataTransfer['items'];
    readonly types: DataTransfer['types'];
    getData(format: string): string;
    setData(format: string, data: string): void;
    clearData(): void;
    setDragImage(imgElement: Element, xOffset: number, yOffset: number): void;
    private _data;
}
declare class ClipboardEventMock extends Event implements ClipboardEvent {
    constructor(type: 'copy' | 'cut' | 'paste', options: {
        clipboardData: DataTransfer;
    });
    clipboardData: DataTransfer;
}
