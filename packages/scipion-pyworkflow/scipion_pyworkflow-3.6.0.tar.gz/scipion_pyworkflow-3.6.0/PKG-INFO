Metadata-Version: 2.1
Name: scipion-pyworkflow
Version: 3.6.0
Summary: Simple workflow platform used in scientific applications, initially developed within the Scipion framework for image processing in Electron Microscopy.
Home-page: https://github.com/scipion-em/scipion-pyworkflow
Author: J.M. De la Rosa Trevin, Roberto Marabini, Grigory Sharov, Josue Gomez Blanco, Pablo Conesa, Yunior Fonseca Reyna
Author-email: delarosatrevin@scilifelab.se, roberto@cnb.csic.es, gsharov@mrc-lmb.cam.ac.uk, josue.gomez-blanco@mcgill.ca, pconesa@cnb.csic.es, fonsecareyna@cnb.csic.es
Project-URL: Bug Reports, https://github.com/scipion-em/scipion-pyworkflow/issues
Project-URL: Source, https://github.com/scipion-em/scipion-pyworkflow/
Keywords: workflows science electron-microscopy cryo-em structural-biology image-processing scipion
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering
License-File: LICENSE.txt
Requires-Dist: bibtexparser<=1.2.0
Requires-Dist: psutil<=5.9.1
Requires-Dist: configparser<=5.2.0
Requires-Dist: matplotlib==3.3.4; python_version == "3.6"
Requires-Dist: matplotlib==3.5.2; python_version >= "3.7"
Requires-Dist: numpy<=1.23.0
Requires-Dist: pillow==8.4.0; python_version == "3.6"
Requires-Dist: pillow==9.2.0; python_version >= "3.7"
Requires-Dist: requests<=2.28.1
Requires-Dist: tkcolorpicker
Requires-Dist: distro<=1.8

.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg
  :width: 200
  :alt: Contributor Covenant
  :target: https://www.contributor-covenant.org/version/2/0/code_of_conduct/ 


pyworkflow
==========

**pyworkflow** is a simple workflow platform used in scientific applications. It has been initially developed
within the Scipion framework for image processing in Electron Microscopy.
 
**pyworkflow** allows you to define a working *Domain* by defining the following group of classes:

  * Objects: input/outputs that will be generated by different programs
  * Protocols: special type of Objects that have defined input parameters and will produce some output
  * Viewers: Entities that provide graphical analysis of results.
  * Wizards: Small GUIs that can be develop to help users to select given parameter values.

Development
-----------

To install **pyworkflow** for development purposes, one can do:

.. code-block:: bash

    # Create a clean virtual environment
    conda create -n scipion python=3.8
    conda activate
    git clone https://github.com/scipion-em/scipion-pyworkflow.git
    cd scipion-pyworkflow
    pip install -e .

Running tests
-------------

.. code-block:: bash

    conda activate scipion
    cd scipion-pyworkflow
    export SCIPION_DOMAIN="pyworkflowtests/tests/mock_domain"
    python -m unittest discover

    # Simple project GUI can be shown after running tests:
    python pyworkflow/apps/pw_project.py TestProtocolOutputs

All test projects are located in ~/ScipionUserData/Tests/

API documentation
-----------------

https://scipion-em.github.io/docs/release-3.0.0/api/pyworkflow/pyworkflow.html
