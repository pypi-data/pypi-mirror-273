[tool.poetry]
name = "ddpaw"
version = "0.1.1"
description = "Extract APM metrics from DataDog"
authors = ["benbenbang <ben.chen@vestiairecollective.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
datadog-api-client = "~2.23"
pydantic-settings = "~2.2"
click = "~8.1"
seaborn = { version = "~0.13", optional = true }
scipy = { version = "~1.13", optional = true }

[tool.poetry.extras]
all = ["seaborn", "scipy"]
plot = ["seaborn"]
fast = ["scipy"]

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ipython = "^8.23.0"
ruff = "^0.3.5"


[tool.poetry.group.build.dependencies]
twine = "^5.0.0"

[tool.poetry.scripts]
ddpaw = "ddpaw.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
# exclude = ["ALL"]
# select = ["PL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = '--basetemp=/tmp/pytest'
# switch on `-s` for deep debuging
# addopts = '-s --basetemp=/tmp/pytest'

filterwarnings = [
    "ignore:.*AsyncMockMixin.*:RuntimeWarning",
    "ignore:.*pkg_resources.*:DeprecationWarning",
    "ignore:.*content.*:DeprecationWarning",
]

testpaths = [
    "tests/",
]

markers = [
    "unittests: run unittests",
    "integrationtests: run integrationtests",
]

[tool.mypy]
ignore_missing_imports=true
warn_unreachable=true

[tool.black]
line-length = 120
exclude = '''
/(
  | {{ cookiecutter.* }}
  | hooks
  | .venv
  | .cache
)/
'''

[tool.coverage.run]
omit = [
    "tests/*",
    "**/__init__.py",
]
source = ["."]
parallel = true

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    '\.\.\.',
]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\bProtocol):",
    "@(abc.)?abstractmethod",
    '\.\.\.',
]
