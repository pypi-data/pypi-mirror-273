# coding: utf-8


"""
IGNORE:
    Nutanix Lifecycle Versioned APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.FrameworkVersionInfo import FrameworkVersionInfo  # noqa: F401,E501
from ntnx_lifecycle_py_client.models.lifecycle.v4.resources.InProgressOpInfo import InProgressOpInfo  # noqa: F401,E501

class StatusInfo(object):

    """Detailed information about the current LCM framework status.

    :param framework_version: (:attr:`framework_version`) 
    :type framework_version: 
    :param in_progress_operation: (:attr:`in_progress_operation`) 
    :type in_progress_operation: 
    :param is_cancel_intent_set: (:attr:`is_cancel_intent_set`) Boolean that indicates if cancel intent for LCM update is set or not. (**Default** False)
    :type is_cancel_intent_set: 
    :param upload_task_uuid: (:attr:`upload_task_uuid`) Upload task UUID.
    :type upload_task_uuid: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'framework_version': 'lifecycle.v4.resources.FrameworkVersionInfo',
        'in_progress_operation': 'lifecycle.v4.resources.InProgressOpInfo',
        'is_cancel_intent_set': 'bool',
        'upload_task_uuid': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'framework_version': 'frameworkVersion',
        'in_progress_operation': 'inProgressOperation',
        'is_cancel_intent_set': 'isCancelIntentSet',
        'upload_task_uuid': 'uploadTaskUuid',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, framework_version=None, in_progress_operation=None, is_cancel_intent_set=False, upload_task_uuid=None, *args, **kwargs):  # noqa: E501
        self.__framework_version = None
        self.__in_progress_operation = None
        self.__is_cancel_intent_set = None
        self.__upload_task_uuid = None
        self.discriminator = None
        if framework_version is not None:
            self.__framework_version = framework_version
        if in_progress_operation is not None:
            self.__in_progress_operation = in_progress_operation
        if is_cancel_intent_set is not None:
            self.__is_cancel_intent_set = is_cancel_intent_set
        if upload_task_uuid is not None:
            self.__upload_task_uuid = upload_task_uuid
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lifecycle.v4.resources.StatusInfo'

    def _initialize_object_version(self):
        return 'v4.r0.b1'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif hasattr(self, "attribute_map") and "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fv": self._initialize_object_version()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif hasattr(self, "attribute_map") and "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif hasattr(self, "attribute_map") and "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def framework_version(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.FrameworkVersionInfo`
        """  # noqa: E501
        return self.__framework_version

    @framework_version.setter
    def framework_version(self, framework_version):

        self.__framework_version = framework_version

    @property
    def in_progress_operation(self):
        """
        

        :type:
            :class:`~ntnx_lifecycle_py_client.models.lifecycle.v4.resources.InProgressOpInfo`
        """  # noqa: E501
        return self.__in_progress_operation

    @in_progress_operation.setter
    def in_progress_operation(self, in_progress_operation):

        self.__in_progress_operation = in_progress_operation

    @property
    def is_cancel_intent_set(self):
        """
        Boolean that indicates if cancel intent for LCM update is set or not.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__is_cancel_intent_set

    @is_cancel_intent_set.setter
    def is_cancel_intent_set(self, is_cancel_intent_set):

        self.__is_cancel_intent_set = is_cancel_intent_set

    @property
    def upload_task_uuid(self):
        """
        Upload task UUID.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__upload_task_uuid

    @upload_task_uuid.setter
    def upload_task_uuid(self, upload_task_uuid):
        if upload_task_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', upload_task_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `upload_task_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__upload_task_uuid = upload_task_uuid

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(StatusInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

