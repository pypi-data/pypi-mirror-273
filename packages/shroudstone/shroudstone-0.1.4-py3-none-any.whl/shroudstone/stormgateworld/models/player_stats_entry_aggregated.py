# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from shroudstone.stormgateworld.models.player_stats_entry_num_breakdown import PlayerStatsEntryNumBreakdown
from typing import Optional, Set
from typing_extensions import Self

class PlayerStatsEntryAggregated(BaseModel):
    """
    PlayerStatsEntryAggregated
    """ # noqa: E501
    matches: StrictInt
    matches_per_day: PlayerStatsEntryNumBreakdown
    wins: StrictInt
    losses: StrictInt
    ties: StrictInt
    win_rate: Optional[Union[StrictFloat, StrictInt]] = None
    mmr: PlayerStatsEntryNumBreakdown
    points: PlayerStatsEntryNumBreakdown
    match_length: PlayerStatsEntryNumBreakdown
    __properties: ClassVar[List[str]] = ["matches", "matches_per_day", "wins", "losses", "ties", "win_rate", "mmr", "points", "match_length"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerStatsEntryAggregated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of matches_per_day
        if self.matches_per_day:
            _dict['matches_per_day'] = self.matches_per_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mmr
        if self.mmr:
            _dict['mmr'] = self.mmr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of match_length
        if self.match_length:
            _dict['match_length'] = self.match_length.to_dict()
        # set to None if win_rate (nullable) is None
        # and model_fields_set contains the field
        if self.win_rate is None and "win_rate" in self.model_fields_set:
            _dict['win_rate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerStatsEntryAggregated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matches": obj.get("matches"),
            "matches_per_day": PlayerStatsEntryNumBreakdown.from_dict(obj["matches_per_day"]) if obj.get("matches_per_day") is not None else None,
            "wins": obj.get("wins"),
            "losses": obj.get("losses"),
            "ties": obj.get("ties"),
            "win_rate": obj.get("win_rate"),
            "mmr": PlayerStatsEntryNumBreakdown.from_dict(obj["mmr"]) if obj.get("mmr") is not None else None,
            "points": PlayerStatsEntryNumBreakdown.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "match_length": PlayerStatsEntryNumBreakdown.from_dict(obj["match_length"]) if obj.get("match_length") is not None else None
        })
        return _obj


