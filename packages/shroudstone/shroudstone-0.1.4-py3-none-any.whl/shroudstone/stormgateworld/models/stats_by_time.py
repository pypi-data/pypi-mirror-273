# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from shroudstone.stormgateworld.models.league import League
from shroudstone.stormgateworld.models.stats_by_time_entry import StatsByTimeEntry
from shroudstone.stormgateworld.models.stats_by_time_match_length import StatsByTimeMatchLength
from typing import Optional, Set
from typing_extensions import Self

class StatsByTime(BaseModel):
    """
    StatsByTime
    """ # noqa: E501
    cached_at: datetime
    updated_at: datetime
    period: StrictStr
    count: Annotated[int, Field(strict=True, ge=0)]
    league: Optional[League] = None
    races: List[StatsByTimeEntry]
    match_length: StatsByTimeMatchLength
    __properties: ClassVar[List[str]] = ["cached_at", "updated_at", "period", "count", "league", "races", "match_length"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatsByTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in races (list)
        _items = []
        if self.races:
            for _item in self.races:
                if _item:
                    _items.append(_item.to_dict())
            _dict['races'] = _items
        # override the default output from pydantic by calling `to_dict()` of match_length
        if self.match_length:
            _dict['match_length'] = self.match_length.to_dict()
        # set to None if league (nullable) is None
        # and model_fields_set contains the field
        if self.league is None and "league" in self.model_fields_set:
            _dict['league'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatsByTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cached_at": obj.get("cached_at"),
            "updated_at": obj.get("updated_at"),
            "period": obj.get("period"),
            "count": obj.get("count"),
            "league": obj.get("league"),
            "races": [StatsByTimeEntry.from_dict(_item) for _item in obj["races"]] if obj.get("races") is not None else None,
            "match_length": StatsByTimeMatchLength.from_dict(obj["match_length"]) if obj.get("match_length") is not None else None
        })
        return _obj


