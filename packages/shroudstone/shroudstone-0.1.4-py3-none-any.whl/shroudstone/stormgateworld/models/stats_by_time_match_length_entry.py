# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StatsByTimeMatchLengthEntry(BaseModel):
    """
    StatsByTimeMatchLengthEntry
    """ # noqa: E501
    var_date: Optional[date] = Field(default=None, alias="date")
    average: Optional[StrictInt] = None
    median: Optional[StrictInt] = None
    p70: Optional[StrictInt] = None
    p90: Optional[StrictInt] = None
    p95: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["date", "average", "median", "p70", "p90", "p95"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatsByTimeMatchLengthEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if average (nullable) is None
        # and model_fields_set contains the field
        if self.average is None and "average" in self.model_fields_set:
            _dict['average'] = None

        # set to None if median (nullable) is None
        # and model_fields_set contains the field
        if self.median is None and "median" in self.model_fields_set:
            _dict['median'] = None

        # set to None if p70 (nullable) is None
        # and model_fields_set contains the field
        if self.p70 is None and "p70" in self.model_fields_set:
            _dict['p70'] = None

        # set to None if p90 (nullable) is None
        # and model_fields_set contains the field
        if self.p90 is None and "p90" in self.model_fields_set:
            _dict['p90'] = None

        # set to None if p95 (nullable) is None
        # and model_fields_set contains the field
        if self.p95 is None and "p95" in self.model_fields_set:
            _dict['p95'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatsByTimeMatchLengthEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "average": obj.get("average"),
            "median": obj.get("median"),
            "p70": obj.get("p70"),
            "p90": obj.get("p90"),
            "p95": obj.get("p95")
        })
        return _obj


