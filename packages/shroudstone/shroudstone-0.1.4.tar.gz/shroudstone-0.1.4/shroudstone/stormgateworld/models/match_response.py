# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from shroudstone.stormgateworld.models.leaderboard import Leaderboard
from shroudstone.stormgateworld.models.match_participant_response import MatchParticipantResponse
from shroudstone.stormgateworld.models.match_state import MatchState
from typing import Optional, Set
from typing_extensions import Self

class MatchResponse(BaseModel):
    """
    MatchResponse
    """ # noqa: E501
    cached_at: datetime
    match_id: StrictStr
    state: Optional[MatchState] = None
    leaderboard: Leaderboard
    server: StrictStr
    players: List[MatchParticipantResponse]
    created_at: datetime
    ended_at: Optional[datetime] = None
    duration: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["cached_at", "match_id", "state", "leaderboard", "server", "players", "created_at", "ended_at", "duration"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item in self.players:
                if _item:
                    _items.append(_item.to_dict())
            _dict['players'] = _items
        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.ended_at is None and "ended_at" in self.model_fields_set:
            _dict['ended_at'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cached_at": obj.get("cached_at"),
            "match_id": obj.get("match_id"),
            "state": obj.get("state"),
            "leaderboard": obj.get("leaderboard"),
            "server": obj.get("server"),
            "players": [MatchParticipantResponse.from_dict(_item) for _item in obj["players"]] if obj.get("players") is not None else None,
            "created_at": obj.get("created_at"),
            "ended_at": obj.get("ended_at"),
            "duration": obj.get("duration")
        })
        return _obj


