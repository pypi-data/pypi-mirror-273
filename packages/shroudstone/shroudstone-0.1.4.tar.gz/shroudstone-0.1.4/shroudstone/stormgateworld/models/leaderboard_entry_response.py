# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from shroudstone.stormgateworld.models.leaderboard import Leaderboard
from shroudstone.stormgateworld.models.league import League
from shroudstone.stormgateworld.models.race import Race
from typing import Optional, Set
from typing_extensions import Self

class LeaderboardEntryResponse(BaseModel):
    """
    LeaderboardEntryResponse
    """ # noqa: E501
    leaderboard_entry_id: StrictStr
    leaderboard: Leaderboard
    player_id: Optional[StrictStr] = None
    anonymous: StrictBool
    nickname: Optional[StrictStr] = None
    nickname_discriminator: Optional[StrictStr] = None
    avatar_url: Optional[StrictStr] = None
    rank: Optional[StrictInt] = None
    race: Race
    league: Optional[League] = None
    tier: Optional[StrictInt] = None
    mmr: Union[StrictFloat, StrictInt]
    max_confirmed_mmr: Optional[Union[StrictFloat, StrictInt]] = None
    points: Optional[Union[StrictFloat, StrictInt]] = None
    wins: StrictInt
    losses: StrictInt
    ties: Optional[StrictInt] = None
    matches: StrictInt
    win_rate: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["leaderboard_entry_id", "leaderboard", "player_id", "anonymous", "nickname", "nickname_discriminator", "avatar_url", "rank", "race", "league", "tier", "mmr", "max_confirmed_mmr", "points", "wins", "losses", "ties", "matches", "win_rate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardEntryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['player_id'] = None

        # set to None if nickname (nullable) is None
        # and model_fields_set contains the field
        if self.nickname is None and "nickname" in self.model_fields_set:
            _dict['nickname'] = None

        # set to None if nickname_discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.nickname_discriminator is None and "nickname_discriminator" in self.model_fields_set:
            _dict['nickname_discriminator'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatar_url'] = None

        # set to None if rank (nullable) is None
        # and model_fields_set contains the field
        if self.rank is None and "rank" in self.model_fields_set:
            _dict['rank'] = None

        # set to None if league (nullable) is None
        # and model_fields_set contains the field
        if self.league is None and "league" in self.model_fields_set:
            _dict['league'] = None

        # set to None if tier (nullable) is None
        # and model_fields_set contains the field
        if self.tier is None and "tier" in self.model_fields_set:
            _dict['tier'] = None

        # set to None if max_confirmed_mmr (nullable) is None
        # and model_fields_set contains the field
        if self.max_confirmed_mmr is None and "max_confirmed_mmr" in self.model_fields_set:
            _dict['max_confirmed_mmr'] = None

        # set to None if points (nullable) is None
        # and model_fields_set contains the field
        if self.points is None and "points" in self.model_fields_set:
            _dict['points'] = None

        # set to None if ties (nullable) is None
        # and model_fields_set contains the field
        if self.ties is None and "ties" in self.model_fields_set:
            _dict['ties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardEntryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "leaderboard_entry_id": obj.get("leaderboard_entry_id"),
            "leaderboard": obj.get("leaderboard"),
            "player_id": obj.get("player_id"),
            "anonymous": obj.get("anonymous"),
            "nickname": obj.get("nickname"),
            "nickname_discriminator": obj.get("nickname_discriminator"),
            "avatar_url": obj.get("avatar_url"),
            "rank": obj.get("rank"),
            "race": obj.get("race"),
            "league": obj.get("league"),
            "tier": obj.get("tier"),
            "mmr": obj.get("mmr"),
            "max_confirmed_mmr": obj.get("max_confirmed_mmr"),
            "points": obj.get("points"),
            "wins": obj.get("wins"),
            "losses": obj.get("losses"),
            "ties": obj.get("ties"),
            "matches": obj.get("matches"),
            "win_rate": obj.get("win_rate")
        })
        return _obj


