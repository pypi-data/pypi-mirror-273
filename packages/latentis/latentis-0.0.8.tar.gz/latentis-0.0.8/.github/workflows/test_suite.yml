name: tests

on:
  push:
    branches:
      - main
      - develop

  pull_request:
    types:
      - opened
      - reopened
      - synchronize

env:
  CONDA_ENV_FILE: "./env.yaml"
  CONDA_ENV_NAME: "latentis"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: ubuntu-20.04
            label: linux-64
            prefix: /usr/share/miniconda3/envs/

    #           - os: macos-latest
    #             label: osx-64
    #             prefix: /Users/runner/miniconda3/envs/$CONDA_ENV_NAME

    #           - os: windows-latest
    #             label: win-64
    #             prefix: C:\Miniconda3\envs\$CONDA_ENV_NAME

    name: ${{ matrix.label }}-py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Parametrize conda env name
        run: echo "PY_CONDA_ENV_NAME=${{ env.CONDA_ENV_NAME }}-${{ matrix.python-version }}" >> $GITHUB_ENV
      - name: echo conda env name
        run: echo ${{ env.PY_CONDA_ENV_NAME }}

      - name: Parametrize conda prefix
        run: echo "PY_PREFIX=${{ matrix.prefix }}${{ env.PY_CONDA_ENV_NAME }}" >> $GITHUB_ENV
      - name: echo conda prefix
        run: echo ${{ env.PY_PREFIX }}

      - uses: actions/checkout@v2

      # Remove the python version pin from the env.yml which could be inconsistent
      - name: Remove explicit python version from the environment
        shell: bash -l {0}
        run: |
          sed -Ei '/^\s*-?\s*python\s*([#=].*)?$/d' ${{ env.CONDA_ENV_FILE }}
          cat  ${{ env.CONDA_ENV_FILE }}

      # Remove pytorch-cuda line from the env.yml
      - name: Remove explicit pytorch-cuda version from the environment
        shell: bash -l {0}
        run: |
          sed -Ei '/^\s*-?\s*pytorch-cuda\s*([#=].*)?$/d' ${{ env.CONDA_ENV_FILE }}
          cat  ${{ env.CONDA_ENV_FILE }}

      # Install torch cpu-only
      - name: Install torch cpu only
        shell: bash -l {0}
        run: |
          sed -i '/nvidia\|cuda/d' ${{ env.CONDA_ENV_FILE }}
          cat  ${{ env.CONDA_ENV_FILE }}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          environment-file: ${{ env.CONDA_ENV_FILE }}
          activate-environment: ${{ env.PY_CONDA_ENV_NAME }}
          python-version: ${{ matrix.python-version }}
          use-mamba: true

      # Ensure the hack for the python version worked
      - name: Ensure we have the right Python
        shell: bash -l {0}
        run: |
          echo "Installed Python: $(python --version)"
          echo "Expected: ${{ matrix.python-version }}"
          python --version | grep "Python ${{ matrix.python-version }}"

      # # https://stackoverflow.com/questions/70520120/attributeerror-module-setuptools-distutils-has-no-attribute-version
      # # https://github.com/pytorch/pytorch/pull/69904
      # - name: Downgrade setuptools due to a bug in PyTorch 1.10.1
      #   shell: bash -l {0}
      #   run: |
      #     pip install setuptools==59.5.0 --upgrade
      - run: pip3 list
        shell: bash -l {0}
      - run: mamba info
      - run: mamba list

        # Ensure the hack for the python version worked
      - name: Ensure we have the right Python
        shell: bash -l {0}
        run: |
          echo "Installed Python: $(python --version)"
          echo "Expected: ${{ matrix.python-version }}"
          python --version | grep "Python ${{ matrix.python-version }}"

      - name: Run pre-commits
        shell: bash -l {0}
        run: |
          pre-commit install
          pre-commit run -v --all-files --show-diff-on-failure

      - name: Run tests and collect coverage
        shell: bash -l {0}
        run: |
          pytest --cov --cov-report xml:coverage.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
