[tool]

[tool.poetry]
name = "astel"
version = "0.1.1"
homepage = "https://github.com/William-Fernandes252/astel"
description = "Python package for asyncronous web crawling."
authors = ["William Fernandes Dias <william.winchester1967@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
packages = [{ include = "astel" }, { include = "tests", format = "sdist" }]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
click = "8.0.1"
setuptools = "~69.1"
mypy = { version = "^0.900", optional = true }
pytest = { version = ">=8.2.0,<8.3.0", optional = true }
pytest-cov = { version = "^2.12.0", optional = true }
tox = { version = "^3.20.1", optional = true }
virtualenv = { version = "^20.2.2", optional = true }
pip = { version = "^20.3.1", optional = true }
mkdocs = { version = "^1.6.0", optional = true }
mkdocs-include-markdown-plugin = { version = "^6.0.6", optional = true }
mkdocs-material = { version = "^9.5.21", optional = true }
mkdocstrings = { extras = ["python"], version = "^0.25.1", optional = true }
mkdocs-material-extensions = { version = "^1.0.1", optional = true }
twine = { version = "^3.3.0", optional = true }
mkdocs-autorefs = { version = "^1.0.1", optional = true }
pre-commit = { version = "^2.12.0", optional = true }
toml = { version = "^0.10.2", optional = true }
bump2version = { version = "^1.0.1", optional = true }
httpx = "^0.27.0"
tldextract = "^4.0.0"
hypothesis = { version = "6.88.1", optional = true }
pytest-xdist = { version = "^3.3.1", optional = true }
pytest-sugar = { version = "^1.0.0", optional = true }
ruff = { version = "^0.4.2", optional = true }
eventemitter = "^0.2.0"
pytest-camel-collect = { version = "^1.0.2", optional = true }
pytest-asyncio = { version = "^0.23.6", optional = true }
pytest-mock = { version = "^3.14.0", optional = true }
pytest-watcher = { version = "^0.4.2", optional = true }
freezegun = { version = "^1.5.0", optional = true }
pytest-httpx = { version = "^0.30.0", optional = true }

[tool.poetry.extras]
test = [
    "freezegun",
    "pytest",
    "pytest-sugar",
    "mypy",
    "pytest-camel-collect",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-watcher",
    "hypothesis",
    "pytest-xdist",
    "pytest-mock",
    "pytest-httpx",
]
dev = [
    "tox",
    "pre-commit",
    "virtualenv",
    "pip",
    "twine",
    "toml",
    "bump2version",
    "ruff",
]
doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs",
]

[tool.poetry.scripts]
astel = 'astel.cli:main'


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*",
]
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "ARG",
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    "NPY",
    "AIR",
    "PERF",
    "FURB",
    "LOG",
    "RUF",
]
ignore = [
    "SIM102", # sometimes it's better to nest
    "S314",
    "ISC001",
    "ANN101",
    "ANN002",
    "ANN003",
    "COM812",
    "UP035",
    "UP006",
    "UP007",
    "UP017",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-line-length = 120

[tool.ruff.lint.isort]
force-single-line = false

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["FBT001", "ANN201", "PLR0913", "S101"]


[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true


[tool.pytest.ini_options]
python_files = ["tests.py", "test_*.py"]
python_functions = ["test_*", "it_*", "its_*"]
python_classes = [
    "Test-*",
    "Describe-*",
    "Context-*",
    "With-*",
    "Without-*",
    "For-*",
    "When-*",
    "If-*",
    "Case-*",
]
testpaths = ["tests"]
asyncio_mode = "auto"


[tool.pytest-watcher]
now = true
runner = "pytest"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
