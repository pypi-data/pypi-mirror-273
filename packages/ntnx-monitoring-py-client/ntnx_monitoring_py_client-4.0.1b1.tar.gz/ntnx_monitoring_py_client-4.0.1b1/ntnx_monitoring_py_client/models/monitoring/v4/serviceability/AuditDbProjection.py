# coding: utf-8


"""
IGNORE:
    Nutanix Monitoring Versioned APIs

    Manage Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_monitoring_py_client.models.monitoring.v4.common.OperationType import OperationType  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AuditDb import AuditDb  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.AuditEntityReference import AuditEntityReference  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.Status import Status  # noqa: F401,E501
from ntnx_monitoring_py_client.models.monitoring.v4.serviceability.UserReference import UserReference  # noqa: F401,E501

class AuditDbProjection(AuditDb):

    """

    :param ext_id: (:attr:`ext_id`) 
    :type ext_id: 
    :param protobuf: (:attr:`protobuf`) 
    :type protobuf: 
    :param user_reference: (:attr:`user_reference`) 
    :type user_reference: 
    :param operation_type: (:attr:`operation_type`) 
    :type operation_type: 
    :param source_entity: (:attr:`source_entity`) 
    :type source_entity: 
    :param audit_type: (:attr:`audit_type`) 
    :type audit_type: 
    :param creation_time: (:attr:`creation_time`) 
    :type creation_time: 
    :param operation_start_time: (:attr:`operation_start_time`) 
    :type operation_start_time: 
    :param operation_end_time: (:attr:`operation_end_time`) 
    :type operation_end_time: 
    :param status: (:attr:`status`) 
    :type status: 
    :param message: (:attr:`message`) 
    :type message: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'protobuf': 'str',
        'user_reference': 'monitoring.v4.serviceability.UserReference',
        'operation_type': 'monitoring.v4.common.OperationType',
        'source_entity': 'monitoring.v4.serviceability.AuditEntityReference',
        'audit_type': 'str',
        'creation_time': 'datetime',
        'operation_start_time': 'datetime',
        'operation_end_time': 'datetime',
        'status': 'monitoring.v4.serviceability.Status',
        'message': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'protobuf': 'protobuf',
        'user_reference': 'userReference',
        'operation_type': 'operationType',
        'source_entity': 'sourceEntity',
        'audit_type': 'auditType',
        'creation_time': 'creationTime',
        'operation_start_time': 'operationStartTime',
        'operation_end_time': 'operationEndTime',
        'status': 'status',
        'message': 'message',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, protobuf=None, user_reference=None, operation_type=None, source_entity=None, audit_type=None, creation_time=None, operation_start_time=None, operation_end_time=None, status=None, message=None, *args, **kwargs):  # noqa: E501
        AuditDb.__init__(self, ext_id, protobuf, user_reference, operation_type, source_entity, audit_type, creation_time, operation_start_time, operation_end_time, status, message, *args, **kwargs)
        self.discriminator = None

    def _initialize_object_type(self):
        return 'monitoring.v4.serviceability.AuditDbProjection'

    def _initialize_object_version(self):
        return 'v4.r0.b1'


    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(AuditDbProjection, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditDbProjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

