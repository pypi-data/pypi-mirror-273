# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/archetypes/visual_bounds.fbs".

# You can extend this class by creating a "VisualBoundsExt" class in "visual_bounds_ext.py".

from __future__ import annotations

from attrs import define, field

from ... import components
from ..._baseclasses import Archetype
from .visual_bounds_ext import VisualBoundsExt

__all__ = ["VisualBounds"]


@define(str=False, repr=False, init=False)
class VisualBounds(VisualBoundsExt, Archetype):
    """**Archetype**: Controls the visual bounds of a 2D space view."""

    # __init__ can be found in visual_bounds_ext.py

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            range2d=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> VisualBounds:
        """Produce an empty VisualBounds, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    range2d: components.Range2DBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.Range2DBatch._optional,  # type: ignore[misc]
    )
    # The visible parts of a 2D space view, in the coordinate space of the scene.
    #
    # Everything within these bounds are guaranteed to be visible.
    # Somethings outside of these bounds may also be visible due to letterboxing.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
