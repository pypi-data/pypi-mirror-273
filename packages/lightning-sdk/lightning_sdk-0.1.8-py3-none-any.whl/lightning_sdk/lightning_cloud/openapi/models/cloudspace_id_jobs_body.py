# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class CloudspaceIdJobsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'command': 'str',
        'created_at': 'datetime',
        'entrypoint': 'str',
        'env': 'list[V1EnvVar]',
        'id': 'str',
        'image': 'str',
        'instance_name': 'str',
        'instance_type': 'str',
        'message': 'str',
        'name': 'str',
        'preemptible': 'bool',
        'resources': 'V1Resources',
        'restart_policy': 'str',
        'run_id': 'str',
        'skip_data_connections_setup': 'bool',
        'skip_filesystem_setup': 'bool',
        'started_at': 'datetime',
        'state': 'str',
        'stopped_at': 'datetime',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'command': 'command',
        'created_at': 'createdAt',
        'entrypoint': 'entrypoint',
        'env': 'env',
        'id': 'id',
        'image': 'image',
        'instance_name': 'instanceName',
        'instance_type': 'instanceType',
        'message': 'message',
        'name': 'name',
        'preemptible': 'preemptible',
        'resources': 'resources',
        'restart_policy': 'restartPolicy',
        'run_id': 'runId',
        'skip_data_connections_setup': 'skipDataConnectionsSetup',
        'skip_filesystem_setup': 'skipFilesystemSetup',
        'started_at': 'startedAt',
        'state': 'state',
        'stopped_at': 'stoppedAt',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, cluster_id: 'str' =None, command: 'str' =None, created_at: 'datetime' =None, entrypoint: 'str' =None, env: 'list[V1EnvVar]' =None, id: 'str' =None, image: 'str' =None, instance_name: 'str' =None, instance_type: 'str' =None, message: 'str' =None, name: 'str' =None, preemptible: 'bool' =None, resources: 'V1Resources' =None, restart_policy: 'str' =None, run_id: 'str' =None, skip_data_connections_setup: 'bool' =None, skip_filesystem_setup: 'bool' =None, started_at: 'datetime' =None, state: 'str' =None, stopped_at: 'datetime' =None, updated_at: 'datetime' =None, user_id: 'str' =None):  # noqa: E501
        """CloudspaceIdJobsBody - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._command = None
        self._created_at = None
        self._entrypoint = None
        self._env = None
        self._id = None
        self._image = None
        self._instance_name = None
        self._instance_type = None
        self._message = None
        self._name = None
        self._preemptible = None
        self._resources = None
        self._restart_policy = None
        self._run_id = None
        self._skip_data_connections_setup = None
        self._skip_filesystem_setup = None
        self._started_at = None
        self._state = None
        self._stopped_at = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if command is not None:
            self.command = command
        if created_at is not None:
            self.created_at = created_at
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if instance_name is not None:
            self.instance_name = instance_name
        if instance_type is not None:
            self.instance_type = instance_type
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if preemptible is not None:
            self.preemptible = preemptible
        if resources is not None:
            self.resources = resources
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if run_id is not None:
            self.run_id = run_id
        if skip_data_connections_setup is not None:
            self.skip_data_connections_setup = skip_data_connections_setup
        if skip_filesystem_setup is not None:
            self.skip_filesystem_setup = skip_filesystem_setup
        if started_at is not None:
            self.started_at = started_at
        if state is not None:
            self.state = state
        if stopped_at is not None:
            self.stopped_at = stopped_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The cluster_id of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this CloudspaceIdJobsBody.


        :param cluster_id: The cluster_id of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def command(self) -> 'str':
        """Gets the command of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The command of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this CloudspaceIdJobsBody.


        :param command: The command of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The created_at of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this CloudspaceIdJobsBody.


        :param created_at: The created_at of this CloudspaceIdJobsBody.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entrypoint(self) -> 'str':
        """Gets the entrypoint of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The entrypoint of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: 'str'):
        """Sets the entrypoint of this CloudspaceIdJobsBody.


        :param entrypoint: The entrypoint of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The env of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this CloudspaceIdJobsBody.


        :param env: The env of this CloudspaceIdJobsBody.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def id(self) -> 'str':
        """Gets the id of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The id of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this CloudspaceIdJobsBody.


        :param id: The id of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self) -> 'str':
        """Gets the image of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The image of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: 'str'):
        """Sets the image of this CloudspaceIdJobsBody.


        :param image: The image of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def instance_name(self) -> 'str':
        """Gets the instance_name of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The instance_name of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name: 'str'):
        """Sets the instance_name of this CloudspaceIdJobsBody.


        :param instance_name: The instance_name of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The instance_type of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this CloudspaceIdJobsBody.


        :param instance_type: The instance_type of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def message(self) -> 'str':
        """Gets the message of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The message of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this CloudspaceIdJobsBody.


        :param message: The message of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self) -> 'str':
        """Gets the name of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The name of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this CloudspaceIdJobsBody.


        :param name: The name of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preemptible(self) -> 'bool':
        """Gets the preemptible of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The preemptible of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible: 'bool'):
        """Sets the preemptible of this CloudspaceIdJobsBody.


        :param preemptible: The preemptible of this CloudspaceIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._preemptible = preemptible

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The resources of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this CloudspaceIdJobsBody.


        :param resources: The resources of this CloudspaceIdJobsBody.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    @property
    def restart_policy(self) -> 'str':
        """Gets the restart_policy of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The restart_policy of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: 'str'):
        """Sets the restart_policy of this CloudspaceIdJobsBody.


        :param restart_policy: The restart_policy of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._restart_policy = restart_policy

    @property
    def run_id(self) -> 'str':
        """Gets the run_id of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The run_id of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: 'str'):
        """Sets the run_id of this CloudspaceIdJobsBody.


        :param run_id: The run_id of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def skip_data_connections_setup(self) -> 'bool':
        """Gets the skip_data_connections_setup of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The skip_data_connections_setup of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._skip_data_connections_setup

    @skip_data_connections_setup.setter
    def skip_data_connections_setup(self, skip_data_connections_setup: 'bool'):
        """Sets the skip_data_connections_setup of this CloudspaceIdJobsBody.


        :param skip_data_connections_setup: The skip_data_connections_setup of this CloudspaceIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._skip_data_connections_setup = skip_data_connections_setup

    @property
    def skip_filesystem_setup(self) -> 'bool':
        """Gets the skip_filesystem_setup of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The skip_filesystem_setup of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._skip_filesystem_setup

    @skip_filesystem_setup.setter
    def skip_filesystem_setup(self, skip_filesystem_setup: 'bool'):
        """Sets the skip_filesystem_setup of this CloudspaceIdJobsBody.


        :param skip_filesystem_setup: The skip_filesystem_setup of this CloudspaceIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._skip_filesystem_setup = skip_filesystem_setup

    @property
    def started_at(self) -> 'datetime':
        """Gets the started_at of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The started_at of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: 'datetime'):
        """Sets the started_at of this CloudspaceIdJobsBody.


        :param started_at: The started_at of this CloudspaceIdJobsBody.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def state(self) -> 'str':
        """Gets the state of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The state of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: 'str'):
        """Sets the state of this CloudspaceIdJobsBody.


        :param state: The state of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def stopped_at(self) -> 'datetime':
        """Gets the stopped_at of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The stopped_at of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at: 'datetime'):
        """Sets the stopped_at of this CloudspaceIdJobsBody.


        :param stopped_at: The stopped_at of this CloudspaceIdJobsBody.  # noqa: E501
        :type: datetime
        """

        self._stopped_at = stopped_at

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The updated_at of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this CloudspaceIdJobsBody.


        :param updated_at: The updated_at of this CloudspaceIdJobsBody.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this CloudspaceIdJobsBody.  # noqa: E501


        :return: The user_id of this CloudspaceIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this CloudspaceIdJobsBody.


        :param user_id: The user_id of this CloudspaceIdJobsBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudspaceIdJobsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'CloudspaceIdJobsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudspaceIdJobsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'CloudspaceIdJobsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
