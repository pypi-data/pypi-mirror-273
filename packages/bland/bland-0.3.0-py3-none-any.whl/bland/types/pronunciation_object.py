# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import pydantic_v1


class PronunciationObject(pydantic_v1.BaseModel):
    word: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The word you want to guide the LLM on how to pronounce
    """

    pronunciation: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The word you want to guide the LLM on how to pronounce.
    """

    case_insensitive: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether or not to consider case. Particularly useful with names. EG - 'Max' the name versus 'max' the word. Defaults to false. `Not required`.
    """

    spaced: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    whether or not to consider spaces. When `true`, the word 'high' would be flagged but NOT 'hightop'. Defaults to true. `Not required`.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
