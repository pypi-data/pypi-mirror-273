# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .legal_structure_enum import LegalStructureEnum
from .trusted_user import TrustedUser
from .vertical_enum import VerticalEnum


class RegisterRequest(pydantic_v1.BaseModel):
    business_name: str = pydantic_v1.Field(alias="businessName")
    """
    The legal name of your business.
    """

    ein: str = pydantic_v1.Field()
    """
    Your Employer Identification Number.
    """

    vertical: VerticalEnum = pydantic_v1.Field()
    """
    The industry vertical of your business.
    """

    address: str = pydantic_v1.Field()
    """
    The business address.
    """

    city: str = pydantic_v1.Field()
    """
    The city of your business.
    """

    state: str = pydantic_v1.Field()
    """
    The state of your business. Must be a valid US state code.
    """

    postal_code: str = pydantic_v1.Field(alias="postalCode")
    """
    The postal code of your business.
    """

    country: str = pydantic_v1.Field()
    """
    The country of your business.
    """

    email: str = pydantic_v1.Field()
    """
    The email address for your business.
    """

    type: LegalStructureEnum = pydantic_v1.Field()
    """
    Legal structure of the business.
    """

    website: str = pydantic_v1.Field()
    """
    Your business's website URL.
    """

    opt_in_info: str = pydantic_v1.Field()
    """
    Information regarding opt-in procedures for your messaging service.
    
    EX: “Customers must explicitly consent on our website and during the phone call.”
    """

    message_samples: typing.List[str] = pydantic_v1.Field(alias="messageSamples")
    """
    An array of three strings, each a sample message you plan to use.
    """

    trusted_user: TrustedUser = pydantic_v1.Field()
    """
    An object containing details about the trusted user registering the brand.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
