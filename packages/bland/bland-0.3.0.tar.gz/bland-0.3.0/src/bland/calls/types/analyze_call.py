# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .goal import Goal


class AnalyzeCall(pydantic_v1.BaseModel):
    goal: Goal = pydantic_v1.Field()
    """
    This is the overall purpose of the call. Provides context for the analysis to guide how the questions/transcripts are interpreted.
    """

    questions: typing.List[typing.List[str]] = pydantic_v1.Field()
    """
    An array of questions to be analyzed for the call.
    
    Each question should be an array with two elements - the question text and the expected answer type (e.g., “string”, “boolean”).
    
    Fairly flexible in terms of the expected answer type, and unanswerable questions will default to `null`.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
