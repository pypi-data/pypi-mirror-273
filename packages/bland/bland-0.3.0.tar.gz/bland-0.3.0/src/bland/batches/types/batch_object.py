# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .call_params import CallParams


class BatchObject(pydantic_v1.BaseModel):
    batch_id: str = pydantic_v1.Field()
    """
    The unique identifier for the batch.
    """

    campaign_id: str
    created_at: dt.datetime = pydantic_v1.Field()
    """
    The date and time the batch was created.
    """

    label: str = pydantic_v1.Field()
    """
    The label you assigned to the batch (if any).
    """

    base_prompt: str = pydantic_v1.Field()
    """
    The prompt or task used for all the phone calls in the batch.
    """

    endpoint_code: str = pydantic_v1.Field()
    """
    Enterprise customers with custom endpoints will see the endpoint code here (if specified).
    
    The default value is `API`.
    """

    call_params: CallParams = pydantic_v1.Field()
    """
    The base call parameters used to create the batch.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
