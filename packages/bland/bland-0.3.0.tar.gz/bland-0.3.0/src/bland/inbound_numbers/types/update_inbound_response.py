# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1


class UpdateInboundResponse(pydantic_v1.BaseModel):
    status: str = pydantic_v1.Field()
    """
    Whether the update was successful or not - will be `success` or `error`.
    """

    message: str = pydantic_v1.Field()
    """
    A message describing the status of the update.
    """

    updates: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    An object containing the updated settings for the inbound number.
    """

    failed_updates: typing.Optional[typing.Dict[str, str]] = pydantic_v1.Field(default=None)
    """
    If the update was unsuccessful, this will contain the settings that failed to update. Useful to determine how your request is being interpreted on our end.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
