# coding: utf-8


"""
IGNORE:
    Nutanix Iam Versioned APIs

    Manage Identity and Access Management of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.2-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from pathlib import Path
from ntnx_iam_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_iam_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ApiKey import ApiKey  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ServiceAccountKey import ServiceAccountKey  # noqa: F401,E501

class ServiceAccount(ExternalizableAbstractModel):

    """A special type of identity meant for non-browser API clients.

    :param name: (:attr:`name`) Identifier for the Service Account in the form of a name.
    :type name: 
    :param email_id: (:attr:`email_id`) Email ID of the Service Account.
    :type email_id: 
    :param description: (:attr:`description`) Brief description of the Service Account.
    :type description: 
    :param nutanix_access_keys: (:attr:`nutanix_access_keys`) Nutanix access keys for the Service Account.
    :type nutanix_access_keys: 
    :param nutanix_api_keys: (:attr:`nutanix_api_keys`) Nutanix API keys for the Service Account.
    :type nutanix_api_keys: 
    :param created_time: (:attr:`created_time`) The creation time of the Service Account.
    :type created_time: 
    :param last_updated_time: (:attr:`last_updated_time`) The time when the Service Account was last updated.
    :type last_updated_time: 
    :param created_by: (:attr:`created_by`) User or Service who created the Service Account
    :type created_by: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'name': 'str',
        'email_id': 'str',
        'description': 'str',
        'nutanix_access_keys': 'list[iam.v4.authn.ServiceAccountKey]',
        'nutanix_api_keys': 'list[iam.v4.authn.ApiKey]',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'created_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'email_id': 'emailId',
        'description': 'description',
        'nutanix_access_keys': 'nutanixAccessKeys',
        'nutanix_api_keys': 'nutanixApiKeys',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'created_by': 'createdBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, email_id=None, description=None, nutanix_access_keys=None, nutanix_api_keys=None, created_time=None, last_updated_time=None, created_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__email_id = None
        self.__description = None
        self.__nutanix_access_keys = None
        self.__nutanix_api_keys = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__created_by = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        if email_id is not None:
            self.__email_id = email_id
        if description is not None:
            self.__description = description
        if nutanix_access_keys is not None:
            self.__nutanix_access_keys = nutanix_access_keys
        if nutanix_api_keys is not None:
            self.__nutanix_api_keys = nutanix_api_keys
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if created_by is not None:
            self.__created_by = created_by

    def _initialize_object_type(self):
        return 'iam.v4.authn.ServiceAccount'

    def _initialize_object_version(self):
        return 'v4.r0.b1'


    @property
    def name(self):
        """
        Identifier for the Service Account in the form of a name.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__name = name

    @property
    def email_id(self):
        """
        Email ID of the Service Account.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__email_id

    @email_id.setter
    def email_id(self, email_id):
        if email_id is not None and len(email_id) > 255:
            raise ValueError("Invalid value for `email_id`, length must be less than or equal to `255`")  # noqa: E501
        if email_id is not None and len(email_id) < 3:
            raise ValueError("Invalid value for `email_id`, length must be greater than or equal to `3`")  # noqa: E501
        if email_id is not None and not re.search('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$', email_id):  # noqa: E501
            raise ValueError(r"Invalid value for `email_id`, must be a follow pattern or equal to `/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/`")  # noqa: E501

        self.__email_id = email_id

    @property
    def description(self):
        """
        Brief description of the Service Account.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if description is not None and not re.search('^[^<>;()&+%\/\\\\\"`]*$', description):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/^[^<>;()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__description = description

    @property
    def nutanix_access_keys(self):
        """
        Nutanix access keys for the Service Account.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.ServiceAccountKey` ]
        """  # noqa: E501
        return self.__nutanix_access_keys

    @nutanix_access_keys.setter
    def nutanix_access_keys(self, nutanix_access_keys):

        self.__nutanix_access_keys = nutanix_access_keys

    @property
    def nutanix_api_keys(self):
        """
        Nutanix API keys for the Service Account.

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.ApiKey` ]
        """  # noqa: E501
        return self.__nutanix_api_keys

    @nutanix_api_keys.setter
    def nutanix_api_keys(self, nutanix_api_keys):

        self.__nutanix_api_keys = nutanix_api_keys

    @property
    def created_time(self):
        """
        The creation time of the Service Account.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        The time when the Service Account was last updated.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def created_by(self):
        """
        User or Service who created the Service Account

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}
        for attr, attr_type in six.iteritems(self.swagger_types):
        
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, Path):
                result[attr] = str(value)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize)) if hasattr(item[1], "_to_dict")
                    else (
                        (item[0], str(item[1])) if item[0] == 'path' and '$objectType' in value and value['$objectType'] == 'pathlib.Path'
                        else item
                    ),
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ServiceAccount, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

