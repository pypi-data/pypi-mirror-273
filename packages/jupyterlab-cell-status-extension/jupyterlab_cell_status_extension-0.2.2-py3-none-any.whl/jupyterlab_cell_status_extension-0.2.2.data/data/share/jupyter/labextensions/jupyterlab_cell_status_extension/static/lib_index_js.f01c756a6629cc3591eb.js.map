{"version":3,"file":"lib_index_js.f01c756a6629cc3591eb.js","mappings":"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","sources":["webpack://jupyterlab_cell_status_extension/./src/cell_status_actions.ts","webpack://jupyterlab_cell_status_extension/./src/cell_status_audio.ts","webpack://jupyterlab_cell_status_extension/./src/index.ts","webpack://jupyterlab_cell_status_extension/./src/utils.ts"],"sourcesContent":["/********* JUPYTERLAB_CELL_STATUS_EXTENSION *********\n\nThe jupyertlab_cell_Status extension provides a range of \ncell display and cell accessibility features realting to\ncode cell execution:\n\n- cell status indication: indicate cells that are queued for/pending execution,\n  have completere cell execution successfully, or have a failed cell execution;\n- cell flash (code via jupyterlab-cell-flash): flash the body of a code cell \n  when it successfull completes execution;\n- audible alerts on successful or unsuccessful cell completion;\n- spoken announcements describing cell exeucution errors.\n\n*/\n\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ICodeCellModel } from '@jupyterlab/cells';\n\nimport { play_success, play_error } from './cell_status_audio';\nimport { scc } from './utils';\n\n// Act on updated user settings:\n// - update cell status indicator colour CSS variables\n// - update cell flash duration and colour CSS variables\n// CSS variables and rules defiend in ../style/base.css\n// Settings config and defaults defined in ../schema/plugin.json\nexport function update_cell_status_settings(\n  settings: ISettingRegistry.ISettings,\n  root: HTMLElement\n) {\n  // Get values from settings (settings config: ../schema/plugin.json)\n  const queue_color = settings.get('cell_status_queue').composite as string;\n  const success_color = settings.get('cell_status_success').composite as string;\n  const error_color = settings.get('cell_status_error').composite as string;\n  const flash_duration = settings.get('cell_flash_duration')\n    .composite as number;\n  // TO DO — Maybe consider different cell flash status colors?\n  const flash_colour = settings.get('cell_flash_colour').composite as string;\n\n  // Update CSS variables to use settings values\n  // (CSS variables and style rules defined in ../style/base.css)\n  root.style.setProperty('--jp-cell-status-queue', queue_color);\n  root.style.setProperty('--jp-cell-status-success', success_color);\n  root.style.setProperty('--jp-cell-status-error', error_color);\n  root.style.setProperty('--jp-cell-flash-duration', `${flash_duration}s`);\n  root.style.setProperty('--jp-cell-flash-color', flash_colour);\n}\n\n// Create actions on notebook cell execution related events\nexport const create_cell_status_actions = (\n  settings: ISettingRegistry.ISettings | null\n) => {\n  //let heartbeatInterval = null;\n\n  // The NotebookActions.executed event is fired\n  // when a notebook cell completes execution.\n  NotebookActions.executed.connect((_, args) => {\n    const { cell } = args;\n    // The code cell model gives us access to the code cell execution count number\n    // If required, it also gives access to cell outputs.\n    const codeCellModel = cell.model as ICodeCellModel;\n    // Flag that identifies whether a cell executed successfully or not.\n    const { success } = args;\n    const { error } = args;\n\n    // Hard code defaults if no settings are found.\n    // (User settings config can be found in ../schema/plugin.json)\n    // Should these be the same as the defaults in the settings file?\n    let display_cell_status = true;\n    let display_flash = false;\n    let audio_success = false;\n    let audio_error = false;\n    let spoken_error = false;\n    // Heartbeart is not yet available - need a \"cell finished executing\" signal\n    //let use_heartbeat = false;\n    //let heartbeat_pulse_s = 5;\n\n    // If we have a settings file, get the settings from there\n    // that relate to whether or not we want partiluar things to happen, such as:\n    // - cell flash;\n    // - audio alert on successful cell execution;\n    // - audio alert on unsuccessful cell execution;\n    // - spoken description of error message;\n    if (settings != null) {\n      // Get values from settings\n      display_cell_status = settings.get('cell_status_enable').composite as boolean;\n      display_flash = settings.get('cell_flash_enable').composite as boolean;\n      audio_success = settings.get('cell_status_audio_success')\n        .composite as boolean;\n      audio_error = settings.get('cell_status_audio_error')\n        .composite as boolean;\n      spoken_error = settings.get('cell_status_error_spoken_alert')\n        .composite as boolean;\n      //use_heartbeat = settings.get('cell_status_heartbeat')\n      //  .composite as boolean;\n      //heartbeat_pulse_s = settings.get('cell_status_heartbeat_period')\n      //  .composite as number;\n    }\n\n    // Cell flash - via https://github.com/jupyterlab-contrib/jupyterlab-cell-flash\n    // Get a path to the cell's HTML element we want to flash\n    const element = cell.editor?.host;\n    if (element && display_flash) {\n      // Give ourselves a clean cell flash context to work with\n      element.classList.remove('cell-flash-effect');\n      element.offsetWidth;\n      // Define a callback function to tidy up a cell's HTML view\n      // when the cell flash animation has finished playing\n      const onAnimationEnd = (): void => {\n        // animationcancel is a CSS animation event:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event\n        element.removeEventListener('animationcancel', onAnimationEnd);\n        // animationend is a CSS animation event:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event\n        element.removeEventListener('animationend', onAnimationEnd);\n        element.classList.remove('cell-flash-effect');\n      };\n      // requestAnimationFrame is a browser window method\n      // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n      requestAnimationFrame(() => {\n        element.addEventListener('animationend', onAnimationEnd);\n        element.addEventListener('animationcancel', onAnimationEnd);\n        element.classList.add('cell-flash-effect');\n      });\n    }\n\n    // If we have a code cell, update the status\n    if (display_cell_status && cell.model.type == 'code' && cell.inputArea) {\n      cell.inputArea.promptNode.classList.remove('cell-status-scheduled');\n      // If the cell execution was successful...\n      if (success) {\n        // Set the visual cell status indicator\n        cell.inputArea.promptNode.classList.add('cell-status-success');\n        // If required, generate the cell success audio tone\n        if (audio_success) {\n          play_success();\n        }\n      } else {\n        // The cell execution failed for some reason.\n        cell.inputArea.promptNode.classList.add('cell-status-error');\n        // If we have either audible alert\n        if (audio_error || spoken_error) {\n          // If we have the spoken alert\n          if (spoken_error) {\n            // Generate the spoken alert message\n            let line_error = '';\n            const error_items =\n              error?.traceback?.join('\\n').trim().split('\\n') || [];\n            for (let line of error_items) {\n              console.log('  - error item: ' + line + '<<\\n');\n            }\n            const error_location = scc(error_items[0])\n              .trim()\n              .replace(/^Cell In\\[\\d+\\],\\s*/, '');\n            const error_type = scc(error_items[error_items.length - 1]);\n\n            let tracebackList = error?.traceback;\n            if (tracebackList) {\n              for (let line of tracebackList) {\n                if (scc(line).trim().startsWith('Cell In')) {\n                  line_error = scc(line)\n                    .trim()\n                    .replace(/^Cell In\\[\\d+\\],\\s*/, '')\n                    .split('\\n')[0];\n                  break;\n                }\n              }\n            }\n            // Maybe we should console log messages, perhaps tagged in a particular way\n            // Then explore how the console log can be used to provide diagnostic and history info?\n\n            const msg = `Error in executed cell ${codeCellModel.sharedModel.execution_count}. At ${line_error}. ${error_type}`;\n            play_error(msg);\n            console.log('Error errorName: ' + scc(error?.errorName) + '\\n\\n');\n            console.log('Error Value' + scc(error?.errorValue) + '\\n\\n');\n            console.log('Error Stack' + scc(error?.stack?.concat()) + '\\n\\n');\n            console.log('Error message' + scc(error?.message) + '\\n\\n');\n            console.log('Error name' + scc(error?.name) + '\\n\\n');\n            console.log(\n              'Error traceback' + scc(error?.traceback?.join('\\n')) + '\\n\\n'\n            );\n            console.log('Line error ' + line_error + '\\n\\n');\n            console.log(`AA ${error_location} BB ${error_type} CC`);\n          } // If required, just use the simple audio tone alert\n          else if (audio_error) play_error();\n        }\n      }\n    }\n  });\n\n  // The NotebookActions.executionScheduled event fires\n  // when a cell is scheduled for execution.\n  NotebookActions.executionScheduled.connect((_, args) => {\n    const { cell } = args;\n    let display_cell_status = true;\n    if (settings != null) {\n      display_cell_status = settings.get('cell_status_enable').composite as boolean;\n    }\n    // If we have a code cell, set up the cell flash mechanism:\n    // - set the status class to \"scheduled\"\n    // - remove the other cell flash classes\n    // ?? Is there a way of detecting that a cell is running rather than scheduled?\n    if (display_cell_status && cell.model.type == 'code' && cell.inputArea) {\n      cell.inputArea.promptNode.classList.remove('cell-status-success');\n      cell.inputArea.promptNode.classList.remove('cell-status-error');\n      cell.inputArea.promptNode.classList.add('cell-status-scheduled');\n    } else if (!display_cell_status && cell.model.type == 'code' && cell.inputArea) {\n      // TO DO — this feels slightly overkill but it helps clear unwanted CSS state\n      // If we can trigger an update on a settings change,\n      // would it be better to set CSS to transparent if there is no display?\n      cell.inputArea.promptNode.classList.remove('cell-status-scheduled');\n      cell.inputArea.promptNode.classList.remove('cell-status-success');\n      cell.inputArea.promptNode.classList.remove('cell-status-error');\n    }\n  });\n};\n","/*\n\nFunctions related to audio and speech handling.\n\n- say: speak a message aloud;\n- play_tone: generate tone;\n- play_success: play a tone on successful execution of a cell;\n- play_error: play a tone on unsuccessful execution of a cell;\n              also accept a message that be be spoken after the tone;\n\n*/\n\n// Create an AudioContext object for generating feedback tones as required.\nconst audioContext = new window.AudioContext();\n\n// Speak a message aloud using a browser SpeechSynthesisUtterance\n// The SpeechSynthesisUtterance object should be available\n// for garbage collection after the message is spoken.\nexport const say = (message: string | null) => {\n  if (message) {\n    let utterance = new SpeechSynthesisUtterance(message);\n    window.speechSynthesis.speak(utterance);\n  }\n};\n\n// Generate a tone using the AudioContext object.\nexport function play_tone(\n  frequency: number = 440,\n  duration_ms: number = 1000, //milliseconds\n  volume: number = 0.1,\n  type: OscillatorType = 'sine', //  \"sine\", \"square\", \"sawtooth\", \"triangle\",  \"custom\"\n  message: string | null = null\n) {\n  // Create a new AudioContext\n\n  // Create an OscillatorNode\n  const oscillator = audioContext.createOscillator();\n\n  // Create a gain node\n  const gain = audioContext.createGain();\n\n  // Set the colume\n  gain.gain.value = volume;\n\n  // Set the type of the oscillator\n  oscillator.type = type;\n\n  // Set the frequency of the oscillator\n  oscillator.frequency.value = frequency;\n\n  // Connect the gain function\n  oscillator.connect(gain);\n\n  // Connect the oscillator to the audio context's destination (the speakers)\n  oscillator.connect(audioContext.destination);\n\n  // Start the oscillator immediately\n  oscillator.start();\n\n  // Set the gain envelope\n  gain.gain.exponentialRampToValueAtTime(\n    0.00001,\n    audioContext.currentTime + duration_ms\n  );\n\n  // Stop the oscillator after the specified duration\n  setTimeout(() => {\n    oscillator.stop();\n    if (message)\n      setTimeout(() => {\n        say(message);\n      }, 100);\n  }, duration_ms);\n}\n\nexport function play_success(msg: string | null = null) {\n  play_tone(1000, 100, 0.1, 'sine', msg);\n}\n\nexport function play_error(msg: string | null = null) {\n  play_tone(50, 400, 0.1, 'sawtooth', msg);\n}\n\n/*\n// Notes for a possible heartbeat, if we can identify when a cell starts running\n// Extensions that support notifications or cell execution timing may be relevnt here.\n\nconst hearbeatContext = new window.AudioContext();\n\nfunction createHeartbeat() {\n  const o = hearbeatContext.createOscillator();\n  g = hearbeatContext.createGain();\n  o.connect(g);\n  o.type = 'sine';\n  g.connect(hearbeatContext.destination);\n  o.start(0);\n  g.gain.exponentialRampToValueAtTime(\n    0.00001,\n    hearbeatContext.currentTime + 0.05;\n  );\n}\n\n// Really, we need to have separate hearbeats for different notebooks?\n// Does the notifications extension suggest a way for that, perhaps?\nexport function audio_pulse(pulse_s: number = 5) {\n  console.log('pulse...');\n  let heartbeatInterval = setInterval(\n    () => createHeartbeat(),\n    pulse_s*1000\n  );\n  return heartbeatInterval;\n}\n\n// With the return value, when a cell has finished execution,\n// we can then call: clearInterval(heartbeatInterval)\n*/\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport {\n  create_cell_status_actions,\n  update_cell_status_settings\n} from './cell_status_actions';\n\n/**\n * Initialisation data for the jupyterlab_cell_status_extension extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_cell_status_extension:plugin',\n  description: 'A JupyterLab extension to display notebook cell status.',\n  autoStart: true,\n  optional: [ISettingRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    settingRegistry: ISettingRegistry | null\n  ) => {\n    console.log(\n      'JupyterLab extension jupyterlab_cell_status_extension is activated!'\n    );\n\n    if (settingRegistry) {\n      settingRegistry\n        .load(plugin.id)\n        .then(settings => {\n          console.log(\n            'jupyterlab_cell_status_extension:plugin: loading settings...'\n          );\n          const root = document.documentElement;\n          const updateSettings = (): void => {\n            update_cell_status_settings(settings, root);\n          };\n          updateSettings();\n          console.log(\n            'jupyterlab_cell_status_extension:plugin: loaded settings...'\n          );\n          // We can auto update the color\n          settings.changed.connect(updateSettings);\n          console.log(\n            'jupyterlab_cell_status_extension settings loaded:',\n            settings.composite\n          );\n          create_cell_status_actions(settings);\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for jupyterlab_cell_status_extension.',\n            reason\n          );\n          create_cell_status_actions(null);\n        });\n    } else {\n      create_cell_status_actions(null);\n    }\n\n    console.log('jupyterlab_cell_status_extension:plugin activated...');\n  }\n};\n\nexport default plugin;\n","//Strip control codes\nexport function scc(s: string = '') {\n  return s.replace(/\\x1b\\[[0-9;]*m/g, '').trim();\n}\n"],"names":[],"sourceRoot":""}