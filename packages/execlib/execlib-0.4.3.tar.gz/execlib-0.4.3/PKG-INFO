Metadata-Version: 2.1
Name: execlib
Version: 0.4.3
Summary: Lightweight multi-threaded job framework
Author-email: Sam Griesemer <samgriesemer+git@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Sam Griesemer
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
        
Project-URL: Homepage, https://doc.olog.io/execlog
Project-URL: Documentation, https://doc.olog.io/execlog
Project-URL: Repository, https://git.olog.io/olog/execlog
Project-URL: Issues, https://git.olog.io/olog/execlog/issues
Keywords: concurrent,async,inotify
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tqdm
Requires-Dist: wcmatch
Requires-Dist: uvicorn
Requires-Dist: fastapi
Requires-Dist: colorama
Requires-Dist: starlette
Requires-Dist: inotify_simple
Provides-Extra: tests
Requires-Dist: pytest; extra == "tests"
Requires-Dist: websockets; extra == "tests"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-togglebutton; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints; extra == "docs"
Requires-Dist: furo; extra == "docs"
Requires-Dist: myst-parser; extra == "docs"

# Overview
`execlog` is a lightweight multi-threaded job framework written in Python. It implements a
simple event-based model over core Python utilities like `ThreadPoolExecutor` to
facilitate reactivity and manage concurrent responses.

There are a few top-level classes exposed by the package:

- **Router**: Central event routing object. Routers facilitate route registration,
  allowing for _pattern_-based matching of _events_ to arbitrary _callback_ functions. For
  example, you could have a function that converts a PDF file to a collection images
  (_callback_), and want this function to be called for a new files (_event_) that match
  the glob `*.pdf` (_pattern_).
- **Listener**: Connective event listening object, often created directly by router
  instances. Listeners pay attention to events arising along registered routes of an
  affiliated router, passing them through (after optional delays, debouncing, filtering,
  etc). In the above example, the associated `Listener` instance might wrap a tool like
  iNotify to dynamically respond to file events.
- **Server**: Long-running process manager for listeners and optional live-reloading via
  HTTP. Interfaces with listener `start()` and `shutdown()` for graceful interruption.
